2015-12-31 11:02:55.170 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - Connecting with driver org.h2.Driver to jdbc:h2:mem:test
2015-12-31 11:02:55.200 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - class org.h2.Driver
2015-12-31 11:02:55.232 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - HikariPool.jdbc:h2:mem:test.username - configuration:
2015-12-31 11:02:55.238 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - allowPoolSuspension.............false
2015-12-31 11:02:55.238 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - autoCommit......................true
2015-12-31 11:02:55.239 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - catalog.........................
2015-12-31 11:02:55.239 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionInitSql...............
2015-12-31 11:02:55.239 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTestQuery.............
2015-12-31 11:02:55.240 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTimeout...............30000
2015-12-31 11:02:55.240 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSource......................
2015-12-31 11:02:55.240 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceClassName.............
2015-12-31 11:02:55.240 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceJNDI..................
2015-12-31 11:02:55.241 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceProperties............{password=<masked>, dataSourceClassName=org.h2.Driver}
2015-12-31 11:02:55.241 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - driverClassName.................
2015-12-31 11:02:55.241 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckProperties...........{}
2015-12-31 11:02:55.242 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckRegistry.............
2015-12-31 11:02:55.242 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - idleTimeout.....................600000
2015-12-31 11:02:55.242 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - initializationFailFast..........true
2015-12-31 11:02:55.243 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - isolateInternalQueries..........false
2015-12-31 11:02:55.243 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbc4ConnectionTest.............false
2015-12-31 11:02:55.243 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbcUrl.........................jdbc:h2:mem:test
2015-12-31 11:02:55.243 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - leakDetectionThreshold..........0
2015-12-31 11:02:55.244 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maxLifetime.....................1800000
2015-12-31 11:02:55.244 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maximumPoolSize.................10
2015-12-31 11:02:55.244 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricRegistry..................
2015-12-31 11:02:55.244 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricsTrackerFactory...........
2015-12-31 11:02:55.245 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - minimumIdle.....................10
2015-12-31 11:02:55.245 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - password........................<masked>
2015-12-31 11:02:55.245 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - poolName........................HikariPool.jdbc:h2:mem:test.username
2015-12-31 11:02:55.245 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - readOnly........................false
2015-12-31 11:02:55.245 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - registerMbeans..................false
2015-12-31 11:02:55.246 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - scheduledExecutorService........
2015-12-31 11:02:55.246 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - threadFactory...................
2015-12-31 11:02:55.246 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - transactionIsolation............
2015-12-31 11:02:55.247 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - username........................username
2015-12-31 11:02:55.247 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - validationTimeout...............5000
2015-12-31 11:02:55.248 [Test worker] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool.jdbc:h2:mem:test.username - is starting.
2015-12-31 11:02:55.705 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.PoolBase - HikariPool.jdbc:h2:mem:test.username - Connection.setNetworkTimeout() is not supported (org.h2.jdbc.JdbcConnection.getNetworkTimeout()I)
2015-12-31 11:02:55.723 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn0: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:55.736 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn1: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:55.737 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn2: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:55.737 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn3: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:55.738 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn4: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:55.739 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn5: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:55.740 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn6: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:55.740 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn7: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:55.741 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn8: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:55.742 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn9: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:55.743 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - After adding	pool HikariPool.jdbc:h2:mem:test.username stats (total=10, active=0, idle=10, waiting=0)
2015-12-31 11:02:56.303 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@fb23eda] obtained in 0 millis
2015-12-31 11:02:56.384 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[DROP TABLE IF EXISTS products] took 1 millis
2015-12-31 11:02:56.385 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@fb23eda] released
2015-12-31 11:02:56.386 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@382f6ea5] obtained in 0 millis
2015-12-31 11:02:56.410 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[CREATE TABLE products (id int(11) NOT NULL AUTO_INCREMENT, name varchar(20) NOT NULL DEFAULT '', vendor_id int(11) NOT NULL, price decimal(10,4) unsigned NOT NULL DEFAULT '0.0000', PRIMARY KEY (`id`) )] took 16 millis
2015-12-31 11:02:56.411 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@382f6ea5] released
2015-12-31 11:02:56.416 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@25bceaf2] obtained in 0 millis
2015-12-31 11:02:56.686 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - About to parse: inline@55888b29
2015-12-31 11:02:56.800 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Building AST
2015-12-31 11:02:56.842 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Creating templates
2015-12-31 11:02:57.654 [Test worker] DEBUG org.skife.jdbi.v2 - batch:[[
  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch1', 1.0, 1
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch2', 2.0, 2
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch3', 3.0, 3
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch4', 4.0, 4
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch5', 5.0, 5
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch6', 6.0, 6
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch7', 7.0, 7
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch8', 8.0, 8
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch9', 9.0, 9
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch10', 10.0, 10
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch11', 11.0, 11
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch12', 12.0, 12
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch13', 13.0, 13
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch14', 14.0, 14
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch15', 15.0, 15
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch16', 16.0, 16
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch17', 17.0, 17
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch18', 18.0, 18
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch19', 19.0, 19
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch20', 20.0, 20
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch21', 21.0, 21
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch22', 22.0, 22
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch23', 23.0, 23
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch24', 24.0, 24
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch25', 25.0, 25
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch26', 26.0, 26
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch27', 27.0, 27
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch28', 28.0, 28
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch29', 29.0, 29
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch30', 30.0, 30
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch31', 31.0, 31
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch32', 32.0, 32
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch33', 33.0, 33
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch34', 34.0, 34
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch35', 35.0, 35
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch36', 36.0, 36
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch37', 37.0, 37
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch38', 38.0, 38
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch39', 39.0, 39
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch40', 40.0, 40
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch41', 41.0, 41
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch42', 42.0, 42
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch43', 43.0, 43
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch44', 44.0, 44
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch45', 45.0, 45
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch46', 46.0, 46
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch47', 47.0, 47
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch48', 48.0, 48
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch49', 49.0, 49
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch50', 50.0, 50
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch51', 51.0, 51
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch52', 52.0, 52
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch53', 53.0, 53
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch54', 54.0, 54
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch55', 55.0, 55
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch56', 56.0, 56
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch57', 57.0, 57
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch58', 58.0, 58
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch59', 59.0, 59
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch60', 60.0, 60
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch61', 61.0, 61
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch62', 62.0, 62
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch63', 63.0, 63
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch64', 64.0, 64
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch65', 65.0, 65
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch66', 66.0, 66
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch67', 67.0, 67
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch68', 68.0, 68
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch69', 69.0, 69
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch70', 70.0, 70
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch71', 71.0, 71
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch72', 72.0, 72
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch73', 73.0, 73
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch74', 74.0, 74
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch75', 75.0, 75
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch76', 76.0, 76
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch77', 77.0, 77
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch78', 78.0, 78
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch79', 79.0, 79
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch80', 80.0, 80
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch81', 81.0, 81
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch82', 82.0, 82
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch83', 83.0, 83
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch84', 84.0, 84
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch85', 85.0, 85
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch86', 86.0, 86
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch87', 87.0, 87
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch88', 88.0, 88
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch89', 89.0, 89
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch90', 90.0, 90
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch91', 91.0, 91
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch92', 92.0, 92
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch93', 93.0, 93
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch94', 94.0, 94
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch95', 95.0, 95
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch96', 96.0, 96
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch97', 97.0, 97
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch98', 98.0, 98
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch99', 99.0, 99
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch100', 100.0, 100
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch101', 101.0, 101
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch102', 102.0, 102
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch103', 103.0, 103
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch104', 104.0, 104
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch105', 105.0, 105
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch106', 106.0, 106
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch107', 107.0, 107
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch108', 108.0, 108
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch109', 109.0, 109
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch110', 110.0, 110
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch111', 111.0, 111
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch112', 112.0, 112
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch113', 113.0, 113
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch114', 114.0, 114
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch115', 115.0, 115
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch116', 116.0, 116
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch117', 117.0, 117
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch118', 118.0, 118
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch119', 119.0, 119
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch120', 120.0, 120
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch121', 121.0, 121
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch122', 122.0, 122
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch123', 123.0, 123
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch124', 124.0, 124
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch125', 125.0, 125
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch126', 126.0, 126
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch127', 127.0, 127
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch128', 128.0, 128
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch129', 129.0, 129
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch130', 130.0, 130
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch131', 131.0, 131
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch132', 132.0, 132
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch133', 133.0, 133
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch134', 134.0, 134
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch135', 135.0, 135
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch136', 136.0, 136
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch137', 137.0, 137
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch138', 138.0, 138
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch139', 139.0, 139
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch140', 140.0, 140
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch141', 141.0, 141
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch142', 142.0, 142
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch143', 143.0, 143
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch144', 144.0, 144
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch145', 145.0, 145
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch146', 146.0, 146
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch147', 147.0, 147
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch148', 148.0, 148
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch149', 149.0, 149
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch150', 150.0, 150
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch151', 151.0, 151
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch152', 152.0, 152
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch153', 153.0, 153
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch154', 154.0, 154
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch155', 155.0, 155
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch156', 156.0, 156
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch157', 157.0, 157
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch158', 158.0, 158
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch159', 159.0, 159
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch160', 160.0, 160
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch161', 161.0, 161
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch162', 162.0, 162
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch163', 163.0, 163
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch164', 164.0, 164
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch165', 165.0, 165
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch166', 166.0, 166
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch167', 167.0, 167
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch168', 168.0, 168
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch169', 169.0, 169
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch170', 170.0, 170
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch171', 171.0, 171
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch172', 172.0, 172
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch173', 173.0, 173
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch174', 174.0, 174
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch175', 175.0, 175
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch176', 176.0, 176
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch177', 177.0, 177
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch178', 178.0, 178
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch179', 179.0, 179
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch180', 180.0, 180
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch181', 181.0, 181
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch182', 182.0, 182
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch183', 183.0, 183
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch184', 184.0, 184
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch185', 185.0, 185
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch186', 186.0, 186
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch187', 187.0, 187
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch188', 188.0, 188
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch189', 189.0, 189
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch190', 190.0, 190
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch191', 191.0, 191
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch192', 192.0, 192
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch193', 193.0, 193
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch194', 194.0, 194
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch195', 195.0, 195
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch196', 196.0, 196
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch197', 197.0, 197
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch198', 198.0, 198
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch199', 199.0, 199
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch200', 200.0, 200
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch201', 201.0, 201
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch202', 202.0, 202
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch203', 203.0, 203
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch204', 204.0, 204
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch205', 205.0, 205
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch206', 206.0, 206
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch207', 207.0, 207
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch208', 208.0, 208
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch209', 209.0, 209
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch210', 210.0, 210
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch211', 211.0, 211
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch212', 212.0, 212
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch213', 213.0, 213
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch214', 214.0, 214
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch215', 215.0, 215
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch216', 216.0, 216
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch217', 217.0, 217
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch218', 218.0, 218
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch219', 219.0, 219
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch220', 220.0, 220
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch221', 221.0, 221
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch222', 222.0, 222
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch223', 223.0, 223
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch224', 224.0, 224
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch225', 225.0, 225
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch226', 226.0, 226
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch227', 227.0, 227
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch228', 228.0, 228
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch229', 229.0, 229
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch230', 230.0, 230
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch231', 231.0, 231
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch232', 232.0, 232
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch233', 233.0, 233
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch234', 234.0, 234
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch235', 235.0, 235
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch236', 236.0, 236
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch237', 237.0, 237
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch238', 238.0, 238
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch239', 239.0, 239
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch240', 240.0, 240
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch241', 241.0, 241
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch242', 242.0, 242
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch243', 243.0, 243
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch244', 244.0, 244
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch245', 245.0, 245
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch246', 246.0, 246
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch247', 247.0, 247
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch248', 248.0, 248
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch249', 249.0, 249
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch250', 250.0, 250
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch251', 251.0, 251
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch252', 252.0, 252
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch253', 253.0, 253
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch254', 254.0, 254
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch255', 255.0, 255
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch256', 256.0, 256
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch257', 257.0, 257
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch258', 258.0, 258
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch259', 259.0, 259
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch260', 260.0, 260
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch261', 261.0, 261
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch262', 262.0, 262
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch263', 263.0, 263
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch264', 264.0, 264
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch265', 265.0, 265
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch266', 266.0, 266
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch267', 267.0, 267
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch268', 268.0, 268
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch269', 269.0, 269
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch270', 270.0, 270
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch271', 271.0, 271
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch272', 272.0, 272
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch273', 273.0, 273
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch274', 274.0, 274
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch275', 275.0, 275
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch276', 276.0, 276
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch277', 277.0, 277
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch278', 278.0, 278
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch279', 279.0, 279
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch280', 280.0, 280
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch281', 281.0, 281
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch282', 282.0, 282
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch283', 283.0, 283
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch284', 284.0, 284
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch285', 285.0, 285
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch286', 286.0, 286
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch287', 287.0, 287
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch288', 288.0, 288
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch289', 289.0, 289
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch290', 290.0, 290
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch291', 291.0, 291
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch292', 292.0, 292
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch293', 293.0, 293
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch294', 294.0, 294
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch295', 295.0, 295
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch296', 296.0, 296
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch297', 297.0, 297
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch298', 298.0, 298
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch299', 299.0, 299
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch300', 300.0, 300
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch301', 301.0, 301
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch302', 302.0, 302
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch303', 303.0, 303
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch304', 304.0, 304
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch305', 305.0, 305
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch306', 306.0, 306
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch307', 307.0, 307
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch308', 308.0, 308
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch309', 309.0, 309
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch310', 310.0, 310
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch311', 311.0, 311
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch312', 312.0, 312
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch313', 313.0, 313
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch314', 314.0, 314
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch315', 315.0, 315
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch316', 316.0, 316
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch317', 317.0, 317
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch318', 318.0, 318
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch319', 319.0, 319
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch320', 320.0, 320
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch321', 321.0, 321
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch322', 322.0, 322
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch323', 323.0, 323
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch324', 324.0, 324
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch325', 325.0, 325
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch326', 326.0, 326
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch327', 327.0, 327
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch328', 328.0, 328
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch329', 329.0, 329
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch330', 330.0, 330
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch331', 331.0, 331
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch332', 332.0, 332
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch333', 333.0, 333
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch334', 334.0, 334
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch335', 335.0, 335
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch336', 336.0, 336
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch337', 337.0, 337
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch338', 338.0, 338
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch339', 339.0, 339
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch340', 340.0, 340
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch341', 341.0, 341
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch342', 342.0, 342
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch343', 343.0, 343
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch344', 344.0, 344
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch345', 345.0, 345
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch346', 346.0, 346
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch347', 347.0, 347
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch348', 348.0, 348
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch349', 349.0, 349
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch350', 350.0, 350
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch351', 351.0, 351
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch352', 352.0, 352
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch353', 353.0, 353
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch354', 354.0, 354
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch355', 355.0, 355
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch356', 356.0, 356
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch357', 357.0, 357
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch358', 358.0, 358
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch359', 359.0, 359
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch360', 360.0, 360
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch361', 361.0, 361
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch362', 362.0, 362
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch363', 363.0, 363
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch364', 364.0, 364
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch365', 365.0, 365
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch366', 366.0, 366
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch367', 367.0, 367
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch368', 368.0, 368
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch369', 369.0, 369
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch370', 370.0, 370
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch371', 371.0, 371
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch372', 372.0, 372
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch373', 373.0, 373
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch374', 374.0, 374
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch375', 375.0, 375
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch376', 376.0, 376
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch377', 377.0, 377
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch378', 378.0, 378
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch379', 379.0, 379
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch380', 380.0, 380
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch381', 381.0, 381
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch382', 382.0, 382
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch383', 383.0, 383
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch384', 384.0, 384
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch385', 385.0, 385
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch386', 386.0, 386
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch387', 387.0, 387
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch388', 388.0, 388
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch389', 389.0, 389
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch390', 390.0, 390
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch391', 391.0, 391
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch392', 392.0, 392
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch393', 393.0, 393
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch394', 394.0, 394
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch395', 395.0, 395
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch396', 396.0, 396
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch397', 397.0, 397
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch398', 398.0, 398
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch399', 399.0, 399
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch400', 400.0, 400
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch401', 401.0, 401
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch402', 402.0, 402
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch403', 403.0, 403
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch404', 404.0, 404
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch405', 405.0, 405
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch406', 406.0, 406
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch407', 407.0, 407
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch408', 408.0, 408
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch409', 409.0, 409
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch410', 410.0, 410
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch411', 411.0, 411
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch412', 412.0, 412
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch413', 413.0, 413
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch414', 414.0, 414
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch415', 415.0, 415
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch416', 416.0, 416
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch417', 417.0, 417
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch418', 418.0, 418
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch419', 419.0, 419
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch420', 420.0, 420
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch421', 421.0, 421
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch422', 422.0, 422
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch423', 423.0, 423
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch424', 424.0, 424
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch425', 425.0, 425
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch426', 426.0, 426
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch427', 427.0, 427
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch428', 428.0, 428
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch429', 429.0, 429
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch430', 430.0, 430
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch431', 431.0, 431
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch432', 432.0, 432
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch433', 433.0, 433
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch434', 434.0, 434
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch435', 435.0, 435
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch436', 436.0, 436
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch437', 437.0, 437
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch438', 438.0, 438
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch439', 439.0, 439
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch440', 440.0, 440
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch441', 441.0, 441
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch442', 442.0, 442
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch443', 443.0, 443
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch444', 444.0, 444
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch445', 445.0, 445
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch446', 446.0, 446
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch447', 447.0, 447
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch448', 448.0, 448
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch449', 449.0, 449
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch450', 450.0, 450
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch451', 451.0, 451
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch452', 452.0, 452
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch453', 453.0, 453
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch454', 454.0, 454
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch455', 455.0, 455
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch456', 456.0, 456
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch457', 457.0, 457
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch458', 458.0, 458
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch459', 459.0, 459
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch460', 460.0, 460
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch461', 461.0, 461
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch462', 462.0, 462
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch463', 463.0, 463
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch464', 464.0, 464
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch465', 465.0, 465
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch466', 466.0, 466
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch467', 467.0, 467
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch468', 468.0, 468
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch469', 469.0, 469
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch470', 470.0, 470
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch471', 471.0, 471
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch472', 472.0, 472
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch473', 473.0, 473
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch474', 474.0, 474
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch475', 475.0, 475
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch476', 476.0, 476
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch477', 477.0, 477
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch478', 478.0, 478
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch479', 479.0, 479
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch480', 480.0, 480
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch481', 481.0, 481
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch482', 482.0, 482
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch483', 483.0, 483
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch484', 484.0, 484
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch485', 485.0, 485
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch486', 486.0, 486
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch487', 487.0, 487
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch488', 488.0, 488
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch489', 489.0, 489
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch490', 490.0, 490
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch491', 491.0, 491
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch492', 492.0, 492
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch493', 493.0, 493
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch494', 494.0, 494
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch495', 495.0, 495
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch496', 496.0, 496
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch497', 497.0, 497
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch498', 498.0, 498
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch499', 499.0, 499
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch500', 500.0, 500
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch501', 501.0, 501
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch502', 502.0, 502
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch503', 503.0, 503
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch504', 504.0, 504
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch505', 505.0, 505
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch506', 506.0, 506
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch507', 507.0, 507
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch508', 508.0, 508
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch509', 509.0, 509
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch510', 510.0, 510
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch511', 511.0, 511
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch512', 512.0, 512
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch513', 513.0, 513
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch514', 514.0, 514
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch515', 515.0, 515
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch516', 516.0, 516
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch517', 517.0, 517
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch518', 518.0, 518
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch519', 519.0, 519
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch520', 520.0, 520
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch521', 521.0, 521
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch522', 522.0, 522
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch523', 523.0, 523
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch524', 524.0, 524
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch525', 525.0, 525
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch526', 526.0, 526
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch527', 527.0, 527
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch528', 528.0, 528
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch529', 529.0, 529
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch530', 530.0, 530
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch531', 531.0, 531
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch532', 532.0, 532
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch533', 533.0, 533
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch534', 534.0, 534
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch535', 535.0, 535
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch536', 536.0, 536
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch537', 537.0, 537
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch538', 538.0, 538
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch539', 539.0, 539
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch540', 540.0, 540
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch541', 541.0, 541
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch542', 542.0, 542
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch543', 543.0, 543
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch544', 544.0, 544
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch545', 545.0, 545
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch546', 546.0, 546
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch547', 547.0, 547
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch548', 548.0, 548
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch549', 549.0, 549
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch550', 550.0, 550
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch551', 551.0, 551
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch552', 552.0, 552
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch553', 553.0, 553
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch554', 554.0, 554
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch555', 555.0, 555
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch556', 556.0, 556
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch557', 557.0, 557
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch558', 558.0, 558
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch559', 559.0, 559
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch560', 560.0, 560
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch561', 561.0, 561
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch562', 562.0, 562
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch563', 563.0, 563
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch564', 564.0, 564
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch565', 565.0, 565
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch566', 566.0, 566
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch567', 567.0, 567
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch568', 568.0, 568
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch569', 569.0, 569
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch570', 570.0, 570
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch571', 571.0, 571
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch572', 572.0, 572
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch573', 573.0, 573
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch574', 574.0, 574
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch575', 575.0, 575
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch576', 576.0, 576
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch577', 577.0, 577
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch578', 578.0, 578
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch579', 579.0, 579
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch580', 580.0, 580
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch581', 581.0, 581
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch582', 582.0, 582
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch583', 583.0, 583
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch584', 584.0, 584
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch585', 585.0, 585
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch586', 586.0, 586
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch587', 587.0, 587
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch588', 588.0, 588
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch589', 589.0, 589
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch590', 590.0, 590
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch591', 591.0, 591
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch592', 592.0, 592
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch593', 593.0, 593
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch594', 594.0, 594
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch595', 595.0, 595
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch596', 596.0, 596
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch597', 597.0, 597
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch598', 598.0, 598
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch599', 599.0, 599
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch600', 600.0, 600
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch601', 601.0, 601
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch602', 602.0, 602
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch603', 603.0, 603
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch604', 604.0, 604
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch605', 605.0, 605
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch606', 606.0, 606
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch607', 607.0, 607
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch608', 608.0, 608
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch609', 609.0, 609
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch610', 610.0, 610
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch611', 611.0, 611
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch612', 612.0, 612
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch613', 613.0, 613
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch614', 614.0, 614
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch615', 615.0, 615
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch616', 616.0, 616
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch617', 617.0, 617
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch618', 618.0, 618
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch619', 619.0, 619
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch620', 620.0, 620
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch621', 621.0, 621
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch622', 622.0, 622
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch623', 623.0, 623
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch624', 624.0, 624
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch625', 625.0, 625
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch626', 626.0, 626
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch627', 627.0, 627
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch628', 628.0, 628
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch629', 629.0, 629
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch630', 630.0, 630
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch631', 631.0, 631
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch632', 632.0, 632
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch633', 633.0, 633
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch634', 634.0, 634
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch635', 635.0, 635
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch636', 636.0, 636
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch637', 637.0, 637
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch638', 638.0, 638
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch639', 639.0, 639
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch640', 640.0, 640
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch641', 641.0, 641
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch642', 642.0, 642
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch643', 643.0, 643
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch644', 644.0, 644
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch645', 645.0, 645
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch646', 646.0, 646
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch647', 647.0, 647
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch648', 648.0, 648
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch649', 649.0, 649
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch650', 650.0, 650
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch651', 651.0, 651
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch652', 652.0, 652
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch653', 653.0, 653
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch654', 654.0, 654
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch655', 655.0, 655
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch656', 656.0, 656
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch657', 657.0, 657
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch658', 658.0, 658
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch659', 659.0, 659
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch660', 660.0, 660
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch661', 661.0, 661
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch662', 662.0, 662
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch663', 663.0, 663
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch664', 664.0, 664
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch665', 665.0, 665
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch666', 666.0, 666
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch667', 667.0, 667
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch668', 668.0, 668
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch669', 669.0, 669
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch670', 670.0, 670
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch671', 671.0, 671
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch672', 672.0, 672
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch673', 673.0, 673
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch674', 674.0, 674
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch675', 675.0, 675
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch676', 676.0, 676
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch677', 677.0, 677
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch678', 678.0, 678
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch679', 679.0, 679
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch680', 680.0, 680
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch681', 681.0, 681
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch682', 682.0, 682
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch683', 683.0, 683
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch684', 684.0, 684
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch685', 685.0, 685
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch686', 686.0, 686
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch687', 687.0, 687
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch688', 688.0, 688
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch689', 689.0, 689
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch690', 690.0, 690
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch691', 691.0, 691
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch692', 692.0, 692
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch693', 693.0, 693
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch694', 694.0, 694
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch695', 695.0, 695
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch696', 696.0, 696
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch697', 697.0, 697
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch698', 698.0, 698
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch699', 699.0, 699
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch700', 700.0, 700
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch701', 701.0, 701
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch702', 702.0, 702
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch703', 703.0, 703
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch704', 704.0, 704
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch705', 705.0, 705
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch706', 706.0, 706
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch707', 707.0, 707
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch708', 708.0, 708
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch709', 709.0, 709
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch710', 710.0, 710
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch711', 711.0, 711
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch712', 712.0, 712
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch713', 713.0, 713
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch714', 714.0, 714
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch715', 715.0, 715
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch716', 716.0, 716
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch717', 717.0, 717
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch718', 718.0, 718
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch719', 719.0, 719
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch720', 720.0, 720
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch721', 721.0, 721
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch722', 722.0, 722
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch723', 723.0, 723
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch724', 724.0, 724
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch725', 725.0, 725
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch726', 726.0, 726
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch727', 727.0, 727
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch728', 728.0, 728
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch729', 729.0, 729
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch730', 730.0, 730
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch731', 731.0, 731
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch732', 732.0, 732
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch733', 733.0, 733
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch734', 734.0, 734
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch735', 735.0, 735
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch736', 736.0, 736
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch737', 737.0, 737
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch738', 738.0, 738
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch739', 739.0, 739
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch740', 740.0, 740
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch741', 741.0, 741
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch742', 742.0, 742
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch743', 743.0, 743
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch744', 744.0, 744
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch745', 745.0, 745
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch746', 746.0, 746
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch747', 747.0, 747
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch748', 748.0, 748
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch749', 749.0, 749
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch750', 750.0, 750
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch751', 751.0, 751
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch752', 752.0, 752
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch753', 753.0, 753
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch754', 754.0, 754
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch755', 755.0, 755
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch756', 756.0, 756
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch757', 757.0, 757
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch758', 758.0, 758
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch759', 759.0, 759
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch760', 760.0, 760
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch761', 761.0, 761
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch762', 762.0, 762
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch763', 763.0, 763
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch764', 764.0, 764
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch765', 765.0, 765
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch766', 766.0, 766
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch767', 767.0, 767
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch768', 768.0, 768
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch769', 769.0, 769
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch770', 770.0, 770
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch771', 771.0, 771
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch772', 772.0, 772
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch773', 773.0, 773
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch774', 774.0, 774
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch775', 775.0, 775
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch776', 776.0, 776
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch777', 777.0, 777
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch778', 778.0, 778
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch779', 779.0, 779
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch780', 780.0, 780
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch781', 781.0, 781
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch782', 782.0, 782
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch783', 783.0, 783
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch784', 784.0, 784
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch785', 785.0, 785
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch786', 786.0, 786
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch787', 787.0, 787
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch788', 788.0, 788
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch789', 789.0, 789
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch790', 790.0, 790
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch791', 791.0, 791
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch792', 792.0, 792
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch793', 793.0, 793
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch794', 794.0, 794
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch795', 795.0, 795
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch796', 796.0, 796
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch797', 797.0, 797
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch798', 798.0, 798
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch799', 799.0, 799
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch800', 800.0, 800
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch801', 801.0, 801
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch802', 802.0, 802
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch803', 803.0, 803
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch804', 804.0, 804
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch805', 805.0, 805
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch806', 806.0, 806
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch807', 807.0, 807
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch808', 808.0, 808
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch809', 809.0, 809
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch810', 810.0, 810
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch811', 811.0, 811
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch812', 812.0, 812
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch813', 813.0, 813
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch814', 814.0, 814
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch815', 815.0, 815
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch816', 816.0, 816
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch817', 817.0, 817
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch818', 818.0, 818
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch819', 819.0, 819
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch820', 820.0, 820
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch821', 821.0, 821
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch822', 822.0, 822
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch823', 823.0, 823
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch824', 824.0, 824
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch825', 825.0, 825
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch826', 826.0, 826
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch827', 827.0, 827
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch828', 828.0, 828
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch829', 829.0, 829
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch830', 830.0, 830
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch831', 831.0, 831
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch832', 832.0, 832
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch833', 833.0, 833
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch834', 834.0, 834
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch835', 835.0, 835
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch836', 836.0, 836
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch837', 837.0, 837
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch838', 838.0, 838
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch839', 839.0, 839
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch840', 840.0, 840
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch841', 841.0, 841
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch842', 842.0, 842
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch843', 843.0, 843
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch844', 844.0, 844
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch845', 845.0, 845
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch846', 846.0, 846
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch847', 847.0, 847
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch848', 848.0, 848
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch849', 849.0, 849
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch850', 850.0, 850
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch851', 851.0, 851
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch852', 852.0, 852
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch853', 853.0, 853
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch854', 854.0, 854
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch855', 855.0, 855
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch856', 856.0, 856
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch857', 857.0, 857
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch858', 858.0, 858
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch859', 859.0, 859
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch860', 860.0, 860
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch861', 861.0, 861
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch862', 862.0, 862
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch863', 863.0, 863
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch864', 864.0, 864
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch865', 865.0, 865
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch866', 866.0, 866
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch867', 867.0, 867
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch868', 868.0, 868
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch869', 869.0, 869
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch870', 870.0, 870
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch871', 871.0, 871
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch872', 872.0, 872
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch873', 873.0, 873
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch874', 874.0, 874
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch875', 875.0, 875
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch876', 876.0, 876
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch877', 877.0, 877
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch878', 878.0, 878
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch879', 879.0, 879
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch880', 880.0, 880
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch881', 881.0, 881
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch882', 882.0, 882
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch883', 883.0, 883
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch884', 884.0, 884
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch885', 885.0, 885
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch886', 886.0, 886
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch887', 887.0, 887
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch888', 888.0, 888
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch889', 889.0, 889
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch890', 890.0, 890
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch891', 891.0, 891
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch892', 892.0, 892
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch893', 893.0, 893
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch894', 894.0, 894
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch895', 895.0, 895
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch896', 896.0, 896
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch897', 897.0, 897
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch898', 898.0, 898
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch899', 899.0, 899
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch900', 900.0, 900
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch901', 901.0, 901
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch902', 902.0, 902
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch903', 903.0, 903
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch904', 904.0, 904
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch905', 905.0, 905
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch906', 906.0, 906
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch907', 907.0, 907
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch908', 908.0, 908
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch909', 909.0, 909
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch910', 910.0, 910
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch911', 911.0, 911
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch912', 912.0, 912
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch913', 913.0, 913
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch914', 914.0, 914
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch915', 915.0, 915
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch916', 916.0, 916
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch917', 917.0, 917
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch918', 918.0, 918
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch919', 919.0, 919
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch920', 920.0, 920
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch921', 921.0, 921
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch922', 922.0, 922
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch923', 923.0, 923
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch924', 924.0, 924
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch925', 925.0, 925
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch926', 926.0, 926
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch927', 927.0, 927
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch928', 928.0, 928
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch929', 929.0, 929
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch930', 930.0, 930
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch931', 931.0, 931
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch932', 932.0, 932
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch933', 933.0, 933
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch934', 934.0, 934
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch935', 935.0, 935
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch936', 936.0, 936
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch937', 937.0, 937
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch938', 938.0, 938
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch939', 939.0, 939
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch940', 940.0, 940
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch941', 941.0, 941
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch942', 942.0, 942
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch943', 943.0, 943
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch944', 944.0, 944
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch945', 945.0, 945
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch946', 946.0, 946
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch947', 947.0, 947
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch948', 948.0, 948
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch949', 949.0, 949
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch950', 950.0, 950
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch951', 951.0, 951
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch952', 952.0, 952
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch953', 953.0, 953
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch954', 954.0, 954
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch955', 955.0, 955
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch956', 956.0, 956
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch957', 957.0, 957
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch958', 958.0, 958
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch959', 959.0, 959
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch960', 960.0, 960
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch961', 961.0, 961
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch962', 962.0, 962
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch963', 963.0, 963
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch964', 964.0, 964
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch965', 965.0, 965
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch966', 966.0, 966
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch967', 967.0, 967
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch968', 968.0, 968
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch969', 969.0, 969
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch970', 970.0, 970
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch971', 971.0, 971
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch972', 972.0, 972
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch973', 973.0, 973
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch974', 974.0, 974
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch975', 975.0, 975
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch976', 976.0, 976
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch977', 977.0, 977
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch978', 978.0, 978
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch979', 979.0, 979
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch980', 980.0, 980
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch981', 981.0, 981
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch982', 982.0, 982
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch983', 983.0, 983
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch984', 984.0, 984
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch985', 985.0, 985
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch986', 986.0, 986
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch987', 987.0, 987
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch988', 988.0, 988
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch989', 989.0, 989
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch990', 990.0, 990
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch991', 991.0, 991
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch992', 992.0, 992
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch993', 993.0, 993
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch994', 994.0, 994
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch995', 995.0, 995
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch996', 996.0, 996
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch997', 997.0, 997
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch998', 998.0, 998
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch999', 999.0, 999
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch1000', 1000.0, 1000
  );

]] took 707 millis
2015-12-31 11:02:57.714 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@25bceaf2] released
2015-12-31 11:02:57.714 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@7479843a] obtained in 0 millis
2015-12-31 11:02:57.718 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - About to parse: inline@4c744f80
2015-12-31 11:02:57.718 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Building AST
2015-12-31 11:02:57.720 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Creating templates
2015-12-31 11:02:57.807 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[SELECT * FROM products] took 53 millis
2015-12-31 11:02:57.890 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@7479843a] released
2015-12-31 11:02:57.952 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - Connecting with driver org.h2.Driver to jdbc:h2:mem:test
2015-12-31 11:02:57.952 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - class org.h2.Driver
2015-12-31 11:02:57.952 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - HikariPool.jdbc:h2:mem:test.username - configuration:
2015-12-31 11:02:57.954 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - allowPoolSuspension.............false
2015-12-31 11:02:57.954 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - autoCommit......................true
2015-12-31 11:02:57.954 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - catalog.........................
2015-12-31 11:02:57.954 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionInitSql...............
2015-12-31 11:02:57.954 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTestQuery.............
2015-12-31 11:02:57.954 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTimeout...............30000
2015-12-31 11:02:57.955 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSource......................
2015-12-31 11:02:57.955 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceClassName.............
2015-12-31 11:02:57.955 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceJNDI..................
2015-12-31 11:02:57.955 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceProperties............{password=<masked>, dataSourceClassName=org.h2.Driver}
2015-12-31 11:02:57.955 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - driverClassName.................
2015-12-31 11:02:57.955 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckProperties...........{}
2015-12-31 11:02:57.955 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckRegistry.............
2015-12-31 11:02:57.955 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - idleTimeout.....................600000
2015-12-31 11:02:57.955 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - initializationFailFast..........true
2015-12-31 11:02:57.955 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - isolateInternalQueries..........false
2015-12-31 11:02:57.956 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbc4ConnectionTest.............false
2015-12-31 11:02:57.956 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbcUrl.........................jdbc:h2:mem:test
2015-12-31 11:02:57.956 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - leakDetectionThreshold..........0
2015-12-31 11:02:57.956 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maxLifetime.....................1800000
2015-12-31 11:02:57.956 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maximumPoolSize.................10
2015-12-31 11:02:57.956 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricRegistry..................
2015-12-31 11:02:57.956 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricsTrackerFactory...........
2015-12-31 11:02:57.956 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - minimumIdle.....................10
2015-12-31 11:02:57.957 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - password........................<masked>
2015-12-31 11:02:57.957 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - poolName........................HikariPool.jdbc:h2:mem:test.username
2015-12-31 11:02:57.957 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - readOnly........................false
2015-12-31 11:02:57.957 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - registerMbeans..................false
2015-12-31 11:02:57.957 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - scheduledExecutorService........
2015-12-31 11:02:57.957 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - threadFactory...................
2015-12-31 11:02:57.957 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - transactionIsolation............
2015-12-31 11:02:57.957 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - username........................username
2015-12-31 11:02:57.958 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - validationTimeout...............5000
2015-12-31 11:02:57.958 [Test worker] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool.jdbc:h2:mem:test.username - is starting.
2015-12-31 11:02:57.959 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.PoolBase - HikariPool.jdbc:h2:mem:test.username - Connection.setNetworkTimeout() is not supported (org.h2.jdbc.JdbcConnection.getNetworkTimeout()I)
2015-12-31 11:02:57.960 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn10: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:57.962 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn11: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:57.963 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn12: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:57.963 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn13: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:57.963 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@98d538f] obtained in 0 millis
2015-12-31 11:02:57.964 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn14: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:57.964 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn15: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:57.965 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn16: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:57.965 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn17: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:57.965 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn18: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:57.968 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[DROP TABLE IF EXISTS products] took 2 millis
2015-12-31 11:02:57.968 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn19: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:57.968 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@98d538f] released
2015-12-31 11:02:57.968 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - After adding	pool HikariPool.jdbc:h2:mem:test.username stats (total=10, active=0, idle=10, waiting=0)
2015-12-31 11:02:57.969 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@65cc69a3] obtained in 0 millis
2015-12-31 11:02:57.970 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[CREATE TABLE products (id int(11) NOT NULL AUTO_INCREMENT, name varchar(20) NOT NULL DEFAULT '', vendor_id int(11) NOT NULL, price decimal(10,4) unsigned NOT NULL DEFAULT '0.0000', PRIMARY KEY (`id`) )] took 1 millis
2015-12-31 11:02:57.971 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@65cc69a3] released
2015-12-31 11:02:57.971 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@5b94fe4e] obtained in 0 millis
2015-12-31 11:02:57.972 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-12-31 11:02:57.973 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@5b94fe4e] released
2015-12-31 11:02:57.973 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@39f0692f] obtained in 0 millis
2015-12-31 11:02:57.973 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-12-31 11:02:57.973 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@39f0692f] released
2015-12-31 11:02:57.974 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@95561b] obtained in 0 millis
2015-12-31 11:02:57.974 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-12-31 11:02:57.974 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@95561b] released
2015-12-31 11:02:57.974 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@137e30cd] obtained in 0 millis
2015-12-31 11:02:57.976 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - About to parse: inline@4c744f80
2015-12-31 11:02:57.976 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Building AST
2015-12-31 11:02:57.977 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Creating templates
2015-12-31 11:02:57.980 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[SELECT * FROM products] took 0 millis
2015-12-31 11:02:57.985 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - Connecting with driver org.h2.Driver to jdbc:h2:mem:test
2015-12-31 11:02:57.986 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - class org.h2.Driver
2015-12-31 11:02:57.986 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - HikariPool.jdbc:h2:mem:test.username - configuration:
2015-12-31 11:02:57.987 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - allowPoolSuspension.............false
2015-12-31 11:02:57.987 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - autoCommit......................true
2015-12-31 11:02:57.987 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - catalog.........................
2015-12-31 11:02:57.987 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionInitSql...............
2015-12-31 11:02:57.987 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTestQuery.............
2015-12-31 11:02:57.987 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTimeout...............30000
2015-12-31 11:02:57.988 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSource......................
2015-12-31 11:02:57.988 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceClassName.............
2015-12-31 11:02:57.988 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceJNDI..................
2015-12-31 11:02:57.988 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceProperties............{password=<masked>, dataSourceClassName=org.h2.Driver}
2015-12-31 11:02:57.988 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - driverClassName.................
2015-12-31 11:02:57.988 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckProperties...........{}
2015-12-31 11:02:57.988 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckRegistry.............
2015-12-31 11:02:57.988 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - idleTimeout.....................600000
2015-12-31 11:02:57.988 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - initializationFailFast..........true
2015-12-31 11:02:57.988 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - isolateInternalQueries..........false
2015-12-31 11:02:57.988 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbc4ConnectionTest.............false
2015-12-31 11:02:57.988 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbcUrl.........................jdbc:h2:mem:test
2015-12-31 11:02:57.988 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - leakDetectionThreshold..........0
2015-12-31 11:02:57.989 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maxLifetime.....................1800000
2015-12-31 11:02:57.989 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maximumPoolSize.................10
2015-12-31 11:02:57.989 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricRegistry..................
2015-12-31 11:02:57.989 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricsTrackerFactory...........
2015-12-31 11:02:57.989 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - minimumIdle.....................10
2015-12-31 11:02:57.989 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - password........................<masked>
2015-12-31 11:02:57.989 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - poolName........................HikariPool.jdbc:h2:mem:test.username
2015-12-31 11:02:57.989 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - readOnly........................false
2015-12-31 11:02:57.989 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - registerMbeans..................false
2015-12-31 11:02:57.989 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - scheduledExecutorService........
2015-12-31 11:02:57.989 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - threadFactory...................
2015-12-31 11:02:57.989 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - transactionIsolation............
2015-12-31 11:02:57.989 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - username........................username
2015-12-31 11:02:57.990 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - validationTimeout...............5000
2015-12-31 11:02:57.990 [Test worker] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool.jdbc:h2:mem:test.username - is starting.
2015-12-31 11:02:57.991 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.PoolBase - HikariPool.jdbc:h2:mem:test.username - Connection.setNetworkTimeout() is not supported (org.h2.jdbc.JdbcConnection.getNetworkTimeout()I)
2015-12-31 11:02:57.991 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn20: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:57.992 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn21: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:57.992 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn22: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:57.992 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn23: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:57.993 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@22fb32d8] obtained in 0 millis
2015-12-31 11:02:57.993 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn24: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:57.993 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn25: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:57.994 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn26: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:57.994 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[DROP TABLE IF EXISTS products] took 0 millis
2015-12-31 11:02:57.994 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn27: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:57.995 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@22fb32d8] released
2015-12-31 11:02:57.995 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@653cb090] obtained in 0 millis
2015-12-31 11:02:57.995 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn28: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:57.996 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[CREATE TABLE products (id int(11) NOT NULL AUTO_INCREMENT, name varchar(20) NOT NULL DEFAULT '', vendor_id int(11) NOT NULL, price decimal(10,4) unsigned NOT NULL DEFAULT '0.0000', PRIMARY KEY (`id`) )] took 0 millis
2015-12-31 11:02:57.996 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn29: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:57.996 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - After adding	pool HikariPool.jdbc:h2:mem:test.username stats (total=10, active=0, idle=10, waiting=0)
2015-12-31 11:02:57.996 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@653cb090] released
2015-12-31 11:02:57.996 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@6295b96] obtained in 0 millis
2015-12-31 11:02:57.997 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-12-31 11:02:57.997 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@6295b96] released
2015-12-31 11:02:57.997 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@49b0c70f] obtained in 0 millis
2015-12-31 11:02:57.998 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-12-31 11:02:57.998 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@49b0c70f] released
2015-12-31 11:02:57.998 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@d0fb5e5] obtained in 0 millis
2015-12-31 11:02:57.999 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-12-31 11:02:57.999 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@d0fb5e5] released
2015-12-31 11:02:57.999 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@78742f52] obtained in 0 millis
2015-12-31 11:02:58.000 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - About to parse: inline@4c744f80
2015-12-31 11:02:58.000 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Building AST
2015-12-31 11:02:58.001 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Creating templates
2015-12-31 11:02:58.002 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[SELECT * FROM products] took 0 millis
2015-12-31 11:02:58.003 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - Connecting with driver org.h2.Driver to jdbc:h2:mem:test
2015-12-31 11:02:58.003 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - class org.h2.Driver
2015-12-31 11:02:58.003 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - HikariPool.jdbc:h2:mem:test.username - configuration:
2015-12-31 11:02:58.005 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - allowPoolSuspension.............false
2015-12-31 11:02:58.005 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - autoCommit......................true
2015-12-31 11:02:58.005 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - catalog.........................
2015-12-31 11:02:58.005 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionInitSql...............
2015-12-31 11:02:58.005 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTestQuery.............
2015-12-31 11:02:58.005 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTimeout...............30000
2015-12-31 11:02:58.005 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSource......................
2015-12-31 11:02:58.005 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceClassName.............
2015-12-31 11:02:58.005 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceJNDI..................
2015-12-31 11:02:58.005 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceProperties............{password=<masked>, dataSourceClassName=org.h2.Driver}
2015-12-31 11:02:58.005 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - driverClassName.................
2015-12-31 11:02:58.006 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckProperties...........{}
2015-12-31 11:02:58.006 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckRegistry.............
2015-12-31 11:02:58.006 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - idleTimeout.....................600000
2015-12-31 11:02:58.006 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - initializationFailFast..........true
2015-12-31 11:02:58.006 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - isolateInternalQueries..........false
2015-12-31 11:02:58.006 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbc4ConnectionTest.............false
2015-12-31 11:02:58.006 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbcUrl.........................jdbc:h2:mem:test
2015-12-31 11:02:58.006 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - leakDetectionThreshold..........0
2015-12-31 11:02:58.007 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maxLifetime.....................1800000
2015-12-31 11:02:58.007 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maximumPoolSize.................10
2015-12-31 11:02:58.007 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricRegistry..................
2015-12-31 11:02:58.007 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricsTrackerFactory...........
2015-12-31 11:02:58.007 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - minimumIdle.....................10
2015-12-31 11:02:58.007 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - password........................<masked>
2015-12-31 11:02:58.008 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - poolName........................HikariPool.jdbc:h2:mem:test.username
2015-12-31 11:02:58.008 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - readOnly........................false
2015-12-31 11:02:58.008 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - registerMbeans..................false
2015-12-31 11:02:58.008 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - scheduledExecutorService........
2015-12-31 11:02:58.008 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - threadFactory...................
2015-12-31 11:02:58.009 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - transactionIsolation............
2015-12-31 11:02:58.009 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - username........................username
2015-12-31 11:02:58.009 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - validationTimeout...............5000
2015-12-31 11:02:58.009 [Test worker] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool.jdbc:h2:mem:test.username - is starting.
2015-12-31 11:02:58.012 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.PoolBase - HikariPool.jdbc:h2:mem:test.username - Connection.setNetworkTimeout() is not supported (org.h2.jdbc.JdbcConnection.getNetworkTimeout()I)
2015-12-31 11:02:58.012 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn30: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.013 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn31: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.013 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn32: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.014 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn33: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.014 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@58f8965f] obtained in 0 millis
2015-12-31 11:02:58.014 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn34: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.015 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[DROP TABLE IF EXISTS products] took 0 millis
2015-12-31 11:02:58.015 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn35: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.015 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@58f8965f] released
2015-12-31 11:02:58.016 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn36: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.016 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@1449b5cf] obtained in 0 millis
2015-12-31 11:02:58.016 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn37: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.017 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[CREATE TABLE products (id int(11) NOT NULL AUTO_INCREMENT, name varchar(20) NOT NULL DEFAULT '', vendor_id int(11) NOT NULL, price decimal(10,4) unsigned NOT NULL DEFAULT '0.0000', PRIMARY KEY (`id`) )] took 0 millis
2015-12-31 11:02:58.017 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn38: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.017 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@1449b5cf] released
2015-12-31 11:02:58.017 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@176aa752] obtained in 0 millis
2015-12-31 11:02:58.017 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn39: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.017 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - After adding	pool HikariPool.jdbc:h2:mem:test.username stats (total=10, active=1, idle=9, waiting=0)
2015-12-31 11:02:58.017 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-12-31 11:02:58.018 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@176aa752] released
2015-12-31 11:02:58.018 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@3a2f023f] obtained in 0 millis
2015-12-31 11:02:58.018 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-12-31 11:02:58.018 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@3a2f023f] released
2015-12-31 11:02:58.018 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@12a7dcd7] obtained in 0 millis
2015-12-31 11:02:58.018 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-12-31 11:02:58.018 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@12a7dcd7] released
2015-12-31 11:02:58.019 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@794cc7af] obtained in 0 millis
2015-12-31 11:02:58.019 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - About to parse: inline@4c744f80
2015-12-31 11:02:58.019 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Building AST
2015-12-31 11:02:58.020 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Creating templates
2015-12-31 11:02:58.020 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[SELECT * FROM products] took 0 millis
2015-12-31 11:02:58.021 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@794cc7af] released
2015-12-31 11:02:58.021 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - Connecting with driver org.h2.Driver to jdbc:h2:mem:test
2015-12-31 11:02:58.021 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - class org.h2.Driver
2015-12-31 11:02:58.021 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - HikariPool.jdbc:h2:mem:test.username - configuration:
2015-12-31 11:02:58.022 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - allowPoolSuspension.............false
2015-12-31 11:02:58.023 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - autoCommit......................true
2015-12-31 11:02:58.023 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - catalog.........................
2015-12-31 11:02:58.023 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionInitSql...............
2015-12-31 11:02:58.023 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTestQuery.............
2015-12-31 11:02:58.023 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTimeout...............30000
2015-12-31 11:02:58.023 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSource......................
2015-12-31 11:02:58.023 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceClassName.............
2015-12-31 11:02:58.023 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceJNDI..................
2015-12-31 11:02:58.023 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceProperties............{password=<masked>, dataSourceClassName=org.h2.Driver}
2015-12-31 11:02:58.024 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - driverClassName.................
2015-12-31 11:02:58.024 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckProperties...........{}
2015-12-31 11:02:58.024 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckRegistry.............
2015-12-31 11:02:58.024 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - idleTimeout.....................600000
2015-12-31 11:02:58.024 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - initializationFailFast..........true
2015-12-31 11:02:58.024 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - isolateInternalQueries..........false
2015-12-31 11:02:58.024 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbc4ConnectionTest.............false
2015-12-31 11:02:58.024 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbcUrl.........................jdbc:h2:mem:test
2015-12-31 11:02:58.024 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - leakDetectionThreshold..........0
2015-12-31 11:02:58.024 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maxLifetime.....................1800000
2015-12-31 11:02:58.025 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maximumPoolSize.................10
2015-12-31 11:02:58.025 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricRegistry..................
2015-12-31 11:02:58.025 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricsTrackerFactory...........
2015-12-31 11:02:58.025 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - minimumIdle.....................10
2015-12-31 11:02:58.025 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - password........................<masked>
2015-12-31 11:02:58.025 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - poolName........................HikariPool.jdbc:h2:mem:test.username
2015-12-31 11:02:58.025 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - readOnly........................false
2015-12-31 11:02:58.025 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - registerMbeans..................false
2015-12-31 11:02:58.025 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - scheduledExecutorService........
2015-12-31 11:02:58.025 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - threadFactory...................
2015-12-31 11:02:58.025 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - transactionIsolation............
2015-12-31 11:02:58.025 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - username........................username
2015-12-31 11:02:58.025 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - validationTimeout...............5000
2015-12-31 11:02:58.026 [Test worker] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool.jdbc:h2:mem:test.username - is starting.
2015-12-31 11:02:58.027 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.PoolBase - HikariPool.jdbc:h2:mem:test.username - Connection.setNetworkTimeout() is not supported (org.h2.jdbc.JdbcConnection.getNetworkTimeout()I)
2015-12-31 11:02:58.028 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn40: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.029 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn41: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.029 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn42: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.030 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn43: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.030 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn44: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.030 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn45: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.031 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn46: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.031 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn47: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.031 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn48: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.031 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@476e05d2] obtained in 0 millis
2015-12-31 11:02:58.032 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[DROP TABLE IF EXISTS products] took 0 millis
2015-12-31 11:02:58.032 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn49: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.033 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - After adding	pool HikariPool.jdbc:h2:mem:test.username stats (total=10, active=1, idle=10, waiting=0)
2015-12-31 11:02:58.033 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@476e05d2] released
2015-12-31 11:02:58.033 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@23ae612e] obtained in 0 millis
2015-12-31 11:02:58.034 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[CREATE TABLE products (id int(11) NOT NULL AUTO_INCREMENT, name varchar(20) NOT NULL DEFAULT '', vendor_id int(11) NOT NULL, price decimal(10,4) unsigned NOT NULL DEFAULT '0.0000', PRIMARY KEY (`id`) )] took 0 millis
2015-12-31 11:02:58.034 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@23ae612e] released
2015-12-31 11:02:58.034 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@e26d161] obtained in 0 millis
2015-12-31 11:02:58.034 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-12-31 11:02:58.034 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@e26d161] released
2015-12-31 11:02:58.035 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@752858a] obtained in 0 millis
2015-12-31 11:02:58.035 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-12-31 11:02:58.035 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@752858a] released
2015-12-31 11:02:58.035 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@6a2792c6] obtained in 0 millis
2015-12-31 11:02:58.036 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-12-31 11:02:58.036 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@6a2792c6] released
2015-12-31 11:02:58.036 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@11329f33] obtained in 0 millis
2015-12-31 11:02:58.036 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[SELECT * FROM products] took 0 millis
2015-12-31 11:02:58.037 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - Connecting with driver org.h2.Driver to jdbc:h2:mem:test
2015-12-31 11:02:58.037 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - class org.h2.Driver
2015-12-31 11:02:58.037 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - HikariPool.jdbc:h2:mem:test.username - configuration:
2015-12-31 11:02:58.038 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - allowPoolSuspension.............false
2015-12-31 11:02:58.038 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - autoCommit......................true
2015-12-31 11:02:58.038 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - catalog.........................
2015-12-31 11:02:58.039 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionInitSql...............
2015-12-31 11:02:58.039 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTestQuery.............
2015-12-31 11:02:58.039 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTimeout...............30000
2015-12-31 11:02:58.039 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSource......................
2015-12-31 11:02:58.039 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceClassName.............
2015-12-31 11:02:58.039 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceJNDI..................
2015-12-31 11:02:58.039 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceProperties............{password=<masked>, dataSourceClassName=org.h2.Driver}
2015-12-31 11:02:58.039 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - driverClassName.................
2015-12-31 11:02:58.039 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckProperties...........{}
2015-12-31 11:02:58.039 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckRegistry.............
2015-12-31 11:02:58.039 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - idleTimeout.....................600000
2015-12-31 11:02:58.039 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - initializationFailFast..........true
2015-12-31 11:02:58.039 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - isolateInternalQueries..........false
2015-12-31 11:02:58.039 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbc4ConnectionTest.............false
2015-12-31 11:02:58.039 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbcUrl.........................jdbc:h2:mem:test
2015-12-31 11:02:58.039 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - leakDetectionThreshold..........0
2015-12-31 11:02:58.040 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maxLifetime.....................1800000
2015-12-31 11:02:58.040 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maximumPoolSize.................10
2015-12-31 11:02:58.040 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricRegistry..................
2015-12-31 11:02:58.040 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricsTrackerFactory...........
2015-12-31 11:02:58.040 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - minimumIdle.....................10
2015-12-31 11:02:58.040 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - password........................<masked>
2015-12-31 11:02:58.040 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - poolName........................HikariPool.jdbc:h2:mem:test.username
2015-12-31 11:02:58.040 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - readOnly........................false
2015-12-31 11:02:58.040 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - registerMbeans..................false
2015-12-31 11:02:58.040 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - scheduledExecutorService........
2015-12-31 11:02:58.040 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - threadFactory...................
2015-12-31 11:02:58.040 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - transactionIsolation............
2015-12-31 11:02:58.040 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - username........................username
2015-12-31 11:02:58.040 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - validationTimeout...............5000
2015-12-31 11:02:58.041 [Test worker] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool.jdbc:h2:mem:test.username - is starting.
2015-12-31 11:02:58.042 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.PoolBase - HikariPool.jdbc:h2:mem:test.username - Connection.setNetworkTimeout() is not supported (org.h2.jdbc.JdbcConnection.getNetworkTimeout()I)
2015-12-31 11:02:58.042 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn50: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.043 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn51: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.043 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn52: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.044 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn53: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.044 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn54: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.044 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@f4b1ff4] obtained in 0 millis
2015-12-31 11:02:58.045 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[DROP TABLE IF EXISTS products] took 0 millis
2015-12-31 11:02:58.045 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn55: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.045 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@f4b1ff4] released
2015-12-31 11:02:58.045 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@5b8de44d] obtained in 0 millis
2015-12-31 11:02:58.045 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn56: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.046 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[CREATE TABLE products (id int(11) NOT NULL AUTO_INCREMENT, name varchar(20) NOT NULL DEFAULT '', vendor_id int(11) NOT NULL, price decimal(10,4) unsigned NOT NULL DEFAULT '0.0000', PRIMARY KEY (`id`) )] took 0 millis
2015-12-31 11:02:58.046 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn57: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.046 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@5b8de44d] released
2015-12-31 11:02:58.046 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@67904a8d] obtained in 0 millis
2015-12-31 11:02:58.046 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn58: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.047 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-12-31 11:02:58.047 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn59: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.047 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@67904a8d] released
2015-12-31 11:02:58.047 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - After adding	pool HikariPool.jdbc:h2:mem:test.username stats (total=10, active=1, idle=9, waiting=0)
2015-12-31 11:02:58.047 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@288722ff] obtained in 0 millis
2015-12-31 11:02:58.047 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-12-31 11:02:58.047 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@288722ff] released
2015-12-31 11:02:58.047 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@453c5c65] obtained in 0 millis
2015-12-31 11:02:58.048 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-12-31 11:02:58.048 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@453c5c65] released
2015-12-31 11:02:58.048 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@7ffdb45a] obtained in 0 millis
2015-12-31 11:02:58.049 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - About to parse: inline@4c744f80
2015-12-31 11:02:58.049 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Building AST
2015-12-31 11:02:58.049 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Creating templates
2015-12-31 11:02:58.050 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[SELECT * FROM products] took 0 millis
2015-12-31 11:02:58.050 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@7ffdb45a] released
2015-12-31 11:02:58.050 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - Connecting with driver org.h2.Driver to jdbc:h2:mem:test
2015-12-31 11:02:58.050 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - class org.h2.Driver
2015-12-31 11:02:58.050 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - HikariPool.jdbc:h2:mem:test.username - configuration:
2015-12-31 11:02:58.051 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - allowPoolSuspension.............false
2015-12-31 11:02:58.052 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - autoCommit......................true
2015-12-31 11:02:58.052 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - catalog.........................
2015-12-31 11:02:58.052 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionInitSql...............
2015-12-31 11:02:58.052 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTestQuery.............
2015-12-31 11:02:58.052 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTimeout...............30000
2015-12-31 11:02:58.052 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSource......................
2015-12-31 11:02:58.052 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceClassName.............
2015-12-31 11:02:58.052 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceJNDI..................
2015-12-31 11:02:58.052 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceProperties............{password=<masked>, dataSourceClassName=org.h2.Driver}
2015-12-31 11:02:58.052 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - driverClassName.................
2015-12-31 11:02:58.052 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckProperties...........{}
2015-12-31 11:02:58.052 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckRegistry.............
2015-12-31 11:02:58.052 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - idleTimeout.....................600000
2015-12-31 11:02:58.052 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - initializationFailFast..........true
2015-12-31 11:02:58.052 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - isolateInternalQueries..........false
2015-12-31 11:02:58.052 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbc4ConnectionTest.............false
2015-12-31 11:02:58.052 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbcUrl.........................jdbc:h2:mem:test
2015-12-31 11:02:58.053 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - leakDetectionThreshold..........0
2015-12-31 11:02:58.053 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maxLifetime.....................1800000
2015-12-31 11:02:58.053 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maximumPoolSize.................10
2015-12-31 11:02:58.053 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricRegistry..................
2015-12-31 11:02:58.053 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricsTrackerFactory...........
2015-12-31 11:02:58.053 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - minimumIdle.....................10
2015-12-31 11:02:58.053 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - password........................<masked>
2015-12-31 11:02:58.053 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - poolName........................HikariPool.jdbc:h2:mem:test.username
2015-12-31 11:02:58.053 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - readOnly........................false
2015-12-31 11:02:58.053 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - registerMbeans..................false
2015-12-31 11:02:58.053 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - scheduledExecutorService........
2015-12-31 11:02:58.053 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - threadFactory...................
2015-12-31 11:02:58.053 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - transactionIsolation............
2015-12-31 11:02:58.053 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - username........................username
2015-12-31 11:02:58.053 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - validationTimeout...............5000
2015-12-31 11:02:58.054 [Test worker] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool.jdbc:h2:mem:test.username - is starting.
2015-12-31 11:02:58.055 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.PoolBase - HikariPool.jdbc:h2:mem:test.username - Connection.setNetworkTimeout() is not supported (org.h2.jdbc.JdbcConnection.getNetworkTimeout()I)
2015-12-31 11:02:58.055 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn60: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.055 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn61: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.056 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn62: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.056 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn63: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.057 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn64: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.057 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@65862fbc] obtained in 0 millis
2015-12-31 11:02:58.057 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn65: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.057 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn66: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.058 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn67: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.058 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn68: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.058 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn69: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.058 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - After adding	pool HikariPool.jdbc:h2:mem:test.username stats (total=10, active=1, idle=9, waiting=0)
2015-12-31 11:02:58.059 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[DROP TABLE IF EXISTS products] took 0 millis
2015-12-31 11:02:58.060 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@65862fbc] released
2015-12-31 11:02:58.060 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@2c24fdcd] obtained in 0 millis
2015-12-31 11:02:58.061 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[CREATE TABLE products (id int(11) NOT NULL AUTO_INCREMENT, name varchar(20) NOT NULL DEFAULT '', vendor_id int(11) NOT NULL, price decimal(10,4) unsigned NOT NULL DEFAULT '0.0000', PRIMARY KEY (`id`) )] took 0 millis
2015-12-31 11:02:58.062 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@2c24fdcd] released
2015-12-31 11:02:58.062 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@1249325b] obtained in 0 millis
2015-12-31 11:02:58.064 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-12-31 11:02:58.064 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@1249325b] released
2015-12-31 11:02:58.064 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@64874c2c] obtained in 0 millis
2015-12-31 11:02:58.064 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-12-31 11:02:58.064 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@64874c2c] released
2015-12-31 11:02:58.065 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@26e3eaf0] obtained in 0 millis
2015-12-31 11:02:58.065 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-12-31 11:02:58.065 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@26e3eaf0] released
2015-12-31 11:02:58.065 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@27376d01] obtained in 0 millis
2015-12-31 11:02:58.066 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[SELECT * FROM products] took 0 millis
2015-12-31 11:02:58.070 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - Connecting with driver org.h2.Driver to jdbc:h2:mem:test
2015-12-31 11:02:58.070 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - class org.h2.Driver
2015-12-31 11:02:58.070 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - HikariPool.jdbc:h2:mem:test.username - configuration:
2015-12-31 11:02:58.071 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - allowPoolSuspension.............false
2015-12-31 11:02:58.071 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - autoCommit......................true
2015-12-31 11:02:58.071 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - catalog.........................
2015-12-31 11:02:58.071 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionInitSql...............
2015-12-31 11:02:58.071 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTestQuery.............
2015-12-31 11:02:58.071 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTimeout...............30000
2015-12-31 11:02:58.071 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSource......................
2015-12-31 11:02:58.071 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceClassName.............
2015-12-31 11:02:58.071 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceJNDI..................
2015-12-31 11:02:58.071 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceProperties............{password=<masked>, dataSourceClassName=org.h2.Driver}
2015-12-31 11:02:58.071 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - driverClassName.................
2015-12-31 11:02:58.071 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckProperties...........{}
2015-12-31 11:02:58.072 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckRegistry.............
2015-12-31 11:02:58.072 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - idleTimeout.....................600000
2015-12-31 11:02:58.072 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - initializationFailFast..........true
2015-12-31 11:02:58.072 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - isolateInternalQueries..........false
2015-12-31 11:02:58.072 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbc4ConnectionTest.............false
2015-12-31 11:02:58.072 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbcUrl.........................jdbc:h2:mem:test
2015-12-31 11:02:58.072 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - leakDetectionThreshold..........0
2015-12-31 11:02:58.072 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maxLifetime.....................1800000
2015-12-31 11:02:58.072 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maximumPoolSize.................10
2015-12-31 11:02:58.072 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricRegistry..................
2015-12-31 11:02:58.072 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricsTrackerFactory...........
2015-12-31 11:02:58.072 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - minimumIdle.....................10
2015-12-31 11:02:58.072 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - password........................<masked>
2015-12-31 11:02:58.072 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - poolName........................HikariPool.jdbc:h2:mem:test.username
2015-12-31 11:02:58.073 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - readOnly........................false
2015-12-31 11:02:58.073 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - registerMbeans..................false
2015-12-31 11:02:58.073 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - scheduledExecutorService........
2015-12-31 11:02:58.073 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - threadFactory...................
2015-12-31 11:02:58.073 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - transactionIsolation............
2015-12-31 11:02:58.073 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - username........................username
2015-12-31 11:02:58.073 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - validationTimeout...............5000
2015-12-31 11:02:58.073 [Test worker] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool.jdbc:h2:mem:test.username - is starting.
2015-12-31 11:02:58.076 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.PoolBase - HikariPool.jdbc:h2:mem:test.username - Connection.setNetworkTimeout() is not supported (org.h2.jdbc.JdbcConnection.getNetworkTimeout()I)
2015-12-31 11:02:58.076 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn70: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.078 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn71: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.078 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn72: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.079 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn73: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.079 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@c200642] obtained in 0 millis
2015-12-31 11:02:58.080 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[DROP TABLE IF EXISTS products] took 0 millis
2015-12-31 11:02:58.080 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@c200642] released
2015-12-31 11:02:58.080 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@4e86bfbc] obtained in 0 millis
2015-12-31 11:02:58.082 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[CREATE TABLE products (id int(11) NOT NULL AUTO_INCREMENT, name varchar(20) NOT NULL DEFAULT '', vendor_id int(11) NOT NULL, price decimal(10,4) unsigned NOT NULL DEFAULT '0.0000', PRIMARY KEY (`id`) )] took 0 millis
2015-12-31 11:02:58.082 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn74: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.082 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@4e86bfbc] released
2015-12-31 11:02:58.082 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@33f180d1] obtained in 0 millis
2015-12-31 11:02:58.082 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn75: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.083 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-12-31 11:02:58.083 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@33f180d1] released
2015-12-31 11:02:58.083 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn76: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.083 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@4f65aff9] obtained in 0 millis
2015-12-31 11:02:58.083 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-12-31 11:02:58.083 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn77: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.084 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@4f65aff9] released
2015-12-31 11:02:58.084 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@35f09dfa] obtained in 0 millis
2015-12-31 11:02:58.084 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-12-31 11:02:58.084 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn78: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.084 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@35f09dfa] released
2015-12-31 11:02:58.084 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@2a9de2b2] obtained in 0 millis
2015-12-31 11:02:58.085 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn79: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.085 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - After adding	pool HikariPool.jdbc:h2:mem:test.username stats (total=10, active=1, idle=9, waiting=0)
2015-12-31 11:02:58.086 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - About to parse: inline@4c744f80
2015-12-31 11:02:58.086 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Building AST
2015-12-31 11:02:58.087 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Creating templates
2015-12-31 11:02:58.087 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[SELECT * FROM products] took 0 millis
2015-12-31 11:02:58.092 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@2a9de2b2] released
2015-12-31 11:02:58.092 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@36e911f2] obtained in 0 millis
2015-12-31 11:02:58.096 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - About to parse: inline@1126789b
2015-12-31 11:02:58.096 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Building AST
2015-12-31 11:02:58.097 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Creating templates
2015-12-31 11:02:58.101 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[DELETE FROM products] took 1 millis
2015-12-31 11:02:58.108 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@36e911f2] released
2015-12-31 11:02:58.108 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@68c55923] obtained in 0 millis
2015-12-31 11:02:58.111 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - About to parse: inline@4c744f80
2015-12-31 11:02:58.111 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Building AST
2015-12-31 11:02:58.112 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Creating templates
2015-12-31 11:02:58.113 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[SELECT * FROM products] took 0 millis
2015-12-31 11:02:58.113 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@68c55923] released
2015-12-31 11:02:58.114 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - Connecting with driver org.h2.Driver to jdbc:h2:mem:test
2015-12-31 11:02:58.114 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - class org.h2.Driver
2015-12-31 11:02:58.114 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - HikariPool.jdbc:h2:mem:test.username - configuration:
2015-12-31 11:02:58.115 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - allowPoolSuspension.............false
2015-12-31 11:02:58.115 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - autoCommit......................true
2015-12-31 11:02:58.115 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - catalog.........................
2015-12-31 11:02:58.115 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionInitSql...............
2015-12-31 11:02:58.115 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTestQuery.............
2015-12-31 11:02:58.115 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTimeout...............30000
2015-12-31 11:02:58.116 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSource......................
2015-12-31 11:02:58.116 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceClassName.............
2015-12-31 11:02:58.116 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceJNDI..................
2015-12-31 11:02:58.116 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceProperties............{password=<masked>, dataSourceClassName=org.h2.Driver}
2015-12-31 11:02:58.116 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - driverClassName.................
2015-12-31 11:02:58.116 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckProperties...........{}
2015-12-31 11:02:58.116 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckRegistry.............
2015-12-31 11:02:58.116 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - idleTimeout.....................600000
2015-12-31 11:02:58.116 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - initializationFailFast..........true
2015-12-31 11:02:58.116 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - isolateInternalQueries..........false
2015-12-31 11:02:58.116 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbc4ConnectionTest.............false
2015-12-31 11:02:58.116 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbcUrl.........................jdbc:h2:mem:test
2015-12-31 11:02:58.116 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - leakDetectionThreshold..........0
2015-12-31 11:02:58.116 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maxLifetime.....................1800000
2015-12-31 11:02:58.116 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maximumPoolSize.................10
2015-12-31 11:02:58.117 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricRegistry..................
2015-12-31 11:02:58.117 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricsTrackerFactory...........
2015-12-31 11:02:58.117 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - minimumIdle.....................10
2015-12-31 11:02:58.117 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - password........................<masked>
2015-12-31 11:02:58.117 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - poolName........................HikariPool.jdbc:h2:mem:test.username
2015-12-31 11:02:58.117 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - readOnly........................false
2015-12-31 11:02:58.117 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - registerMbeans..................false
2015-12-31 11:02:58.117 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - scheduledExecutorService........
2015-12-31 11:02:58.117 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - threadFactory...................
2015-12-31 11:02:58.117 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - transactionIsolation............
2015-12-31 11:02:58.117 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - username........................username
2015-12-31 11:02:58.117 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - validationTimeout...............5000
2015-12-31 11:02:58.117 [Test worker] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool.jdbc:h2:mem:test.username - is starting.
2015-12-31 11:02:58.119 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.PoolBase - HikariPool.jdbc:h2:mem:test.username - Connection.setNetworkTimeout() is not supported (org.h2.jdbc.JdbcConnection.getNetworkTimeout()I)
2015-12-31 11:02:58.119 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn80: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.120 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn81: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.120 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn82: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.120 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn83: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.121 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@31855d] obtained in 0 millis
2015-12-31 11:02:58.121 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn84: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.122 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[DROP TABLE IF EXISTS products] took 0 millis
2015-12-31 11:02:58.122 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn85: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.122 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@31855d] released
2015-12-31 11:02:58.122 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@3dd36c91] obtained in 0 millis
2015-12-31 11:02:58.122 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn86: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.123 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[CREATE TABLE products (id int(11) NOT NULL AUTO_INCREMENT, name varchar(20) NOT NULL DEFAULT '', vendor_id int(11) NOT NULL, price decimal(10,4) unsigned NOT NULL DEFAULT '0.0000', PRIMARY KEY (`id`) )] took 0 millis
2015-12-31 11:02:58.123 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn87: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.124 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@3dd36c91] released
2015-12-31 11:02:58.124 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@378d0ff6] obtained in 0 millis
2015-12-31 11:02:58.124 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn88: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.124 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-12-31 11:02:58.124 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@378d0ff6] released
2015-12-31 11:02:58.124 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn89: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.125 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@c4a0c1] obtained in 0 millis
2015-12-31 11:02:58.125 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - After adding	pool HikariPool.jdbc:h2:mem:test.username stats (total=10, active=1, idle=9, waiting=0)
2015-12-31 11:02:58.125 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-12-31 11:02:58.125 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@c4a0c1] released
2015-12-31 11:02:58.125 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@2cf3c405] obtained in 0 millis
2015-12-31 11:02:58.126 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-12-31 11:02:58.126 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@2cf3c405] released
2015-12-31 11:02:58.126 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@18d5e05a] obtained in 0 millis
2015-12-31 11:02:58.128 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - About to parse: inline@4c744f80
2015-12-31 11:02:58.128 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Building AST
2015-12-31 11:02:58.129 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Creating templates
2015-12-31 11:02:58.130 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[SELECT * FROM products] took 0 millis
2015-12-31 11:02:58.139 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@18d5e05a] released
2015-12-31 11:02:58.140 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@4a3e9dd] obtained in 0 millis
2015-12-31 11:02:58.146 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - About to parse: inline@507a281
2015-12-31 11:02:58.146 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Building AST
2015-12-31 11:02:58.148 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Creating templates
2015-12-31 11:02:58.153 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[DELETE FROM products WHERE id = ?] took 0 millis
2015-12-31 11:02:58.154 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@4a3e9dd] released
2015-12-31 11:02:58.154 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@134ec891] obtained in 0 millis
2015-12-31 11:02:58.156 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - About to parse: inline@4c744f80
2015-12-31 11:02:58.156 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Building AST
2015-12-31 11:02:58.158 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Creating templates
2015-12-31 11:02:58.160 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[SELECT * FROM products] took 0 millis
2015-12-31 11:02:58.167 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@134ec891] released
2015-12-31 11:02:58.172 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - Connecting with driver org.test.Driver to jdbc:h2:mem:test
2015-12-31 11:02:58.178 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - Connecting with driver org.test.Driver to jdbc:h2:mem:test
2015-12-31 11:02:58.186 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - Connecting with driver org.h2.Driver to jdbc:h2:mem:test
2015-12-31 11:02:58.186 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - class org.h2.Driver
2015-12-31 11:02:58.186 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - HikariPool.jdbc:h2:mem:test.username - configuration:
2015-12-31 11:02:58.188 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - allowPoolSuspension.............false
2015-12-31 11:02:58.188 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - autoCommit......................true
2015-12-31 11:02:58.188 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - catalog.........................
2015-12-31 11:02:58.188 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionInitSql...............
2015-12-31 11:02:58.188 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTestQuery.............
2015-12-31 11:02:58.188 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTimeout...............30000
2015-12-31 11:02:58.188 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSource......................
2015-12-31 11:02:58.189 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceClassName.............
2015-12-31 11:02:58.189 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceJNDI..................
2015-12-31 11:02:58.189 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceProperties............{password=<masked>, dataSourceClassName=org.h2.Driver}
2015-12-31 11:02:58.189 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - driverClassName.................
2015-12-31 11:02:58.189 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckProperties...........{}
2015-12-31 11:02:58.189 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckRegistry.............
2015-12-31 11:02:58.189 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - idleTimeout.....................600000
2015-12-31 11:02:58.189 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - initializationFailFast..........true
2015-12-31 11:02:58.189 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - isolateInternalQueries..........false
2015-12-31 11:02:58.190 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbc4ConnectionTest.............false
2015-12-31 11:02:58.190 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbcUrl.........................jdbc:h2:mem:test
2015-12-31 11:02:58.190 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - leakDetectionThreshold..........0
2015-12-31 11:02:58.190 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maxLifetime.....................1800000
2015-12-31 11:02:58.190 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maximumPoolSize.................10
2015-12-31 11:02:58.190 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricRegistry..................
2015-12-31 11:02:58.190 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricsTrackerFactory...........
2015-12-31 11:02:58.190 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - minimumIdle.....................10
2015-12-31 11:02:58.190 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - password........................<masked>
2015-12-31 11:02:58.190 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - poolName........................HikariPool.jdbc:h2:mem:test.username
2015-12-31 11:02:58.190 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - readOnly........................false
2015-12-31 11:02:58.191 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - registerMbeans..................false
2015-12-31 11:02:58.191 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - scheduledExecutorService........
2015-12-31 11:02:58.191 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - threadFactory...................
2015-12-31 11:02:58.191 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - transactionIsolation............
2015-12-31 11:02:58.192 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - username........................username
2015-12-31 11:02:58.192 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - validationTimeout...............5000
2015-12-31 11:02:58.193 [Test worker] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool.jdbc:h2:mem:test.username - is starting.
2015-12-31 11:02:58.196 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.PoolBase - HikariPool.jdbc:h2:mem:test.username - Connection.setNetworkTimeout() is not supported (org.h2.jdbc.JdbcConnection.getNetworkTimeout()I)
2015-12-31 11:02:58.196 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn90: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.197 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn91: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.198 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn92: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.199 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn93: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.200 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@7461ad3a] obtained in 0 millis
2015-12-31 11:02:58.200 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn94: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.201 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn95: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.201 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[DROP TABLE IF EXISTS something; create table something (id int primary key, name varchar(100))] took 0 millis
2015-12-31 11:02:58.202 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@7461ad3a] released
2015-12-31 11:02:58.202 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn96: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.202 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - Connecting with driver org.h2.Driver to jdbc:h2:mem:test
2015-12-31 11:02:58.202 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - class org.h2.Driver
2015-12-31 11:02:58.202 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn97: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.202 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - HikariPool.jdbc:h2:mem:test.username - configuration:
2015-12-31 11:02:58.203 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn98: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.203 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn99: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.203 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - After adding	pool HikariPool.jdbc:h2:mem:test.username stats (total=10, active=0, idle=10, waiting=0)
2015-12-31 11:02:58.204 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - allowPoolSuspension.............false
2015-12-31 11:02:58.204 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - autoCommit......................true
2015-12-31 11:02:58.204 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - catalog.........................
2015-12-31 11:02:58.204 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionInitSql...............
2015-12-31 11:02:58.204 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTestQuery.............
2015-12-31 11:02:58.204 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTimeout...............30000
2015-12-31 11:02:58.204 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSource......................
2015-12-31 11:02:58.204 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceClassName.............
2015-12-31 11:02:58.204 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceJNDI..................
2015-12-31 11:02:58.205 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceProperties............{password=<masked>, dataSourceClassName=org.h2.Driver}
2015-12-31 11:02:58.205 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - driverClassName.................
2015-12-31 11:02:58.205 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckProperties...........{}
2015-12-31 11:02:58.205 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckRegistry.............
2015-12-31 11:02:58.205 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - idleTimeout.....................600000
2015-12-31 11:02:58.205 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - initializationFailFast..........true
2015-12-31 11:02:58.205 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - isolateInternalQueries..........false
2015-12-31 11:02:58.205 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbc4ConnectionTest.............false
2015-12-31 11:02:58.205 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbcUrl.........................jdbc:h2:mem:test
2015-12-31 11:02:58.205 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - leakDetectionThreshold..........0
2015-12-31 11:02:58.205 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maxLifetime.....................1800000
2015-12-31 11:02:58.205 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maximumPoolSize.................10
2015-12-31 11:02:58.206 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricRegistry..................
2015-12-31 11:02:58.206 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricsTrackerFactory...........
2015-12-31 11:02:58.206 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - minimumIdle.....................10
2015-12-31 11:02:58.206 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - password........................<masked>
2015-12-31 11:02:58.206 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - poolName........................HikariPool.jdbc:h2:mem:test.username
2015-12-31 11:02:58.206 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - readOnly........................false
2015-12-31 11:02:58.206 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - registerMbeans..................false
2015-12-31 11:02:58.206 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - scheduledExecutorService........
2015-12-31 11:02:58.206 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - threadFactory...................
2015-12-31 11:02:58.206 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - transactionIsolation............
2015-12-31 11:02:58.206 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - username........................username
2015-12-31 11:02:58.206 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - validationTimeout...............5000
2015-12-31 11:02:58.206 [Test worker] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool.jdbc:h2:mem:test.username - is starting.
2015-12-31 11:02:58.208 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.PoolBase - HikariPool.jdbc:h2:mem:test.username - Connection.setNetworkTimeout() is not supported (org.h2.jdbc.JdbcConnection.getNetworkTimeout()I)
2015-12-31 11:02:58.209 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn100: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.209 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn101: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.210 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn102: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.210 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn103: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.211 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@6e3e8c14] obtained in 0 millis
2015-12-31 11:02:58.211 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn104: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.213 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[DROP TABLE IF EXISTS something; create table something (id int primary key, name varchar(100))] took 1 millis
2015-12-31 11:02:58.213 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn105: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.213 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@6e3e8c14] released
2015-12-31 11:02:58.214 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@6dc341e1] obtained in 0 millis
2015-12-31 11:02:58.214 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn106: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.214 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[insert into something (id, name) values (1, 'Brian')] took 0 millis
2015-12-31 11:02:58.214 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@6dc341e1] released
2015-12-31 11:02:58.214 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn107: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.214 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@5504df01] obtained in 0 millis
2015-12-31 11:02:58.214 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn108: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.215 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn109: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.215 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - After adding	pool HikariPool.jdbc:h2:mem:test.username stats (total=10, active=1, idle=9, waiting=0)
2015-12-31 11:02:58.222 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[select name from something] took 0 millis
2015-12-31 11:02:58.222 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@5504df01] released
2015-12-31 11:02:58.223 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - Connecting with driver org.h2.Driver to jdbc:h2:mem:test
2015-12-31 11:02:58.223 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - class org.h2.Driver
2015-12-31 11:02:58.223 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - HikariPool.jdbc:h2:mem:test.username - configuration:
2015-12-31 11:02:58.224 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - allowPoolSuspension.............false
2015-12-31 11:02:58.224 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - autoCommit......................true
2015-12-31 11:02:58.224 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - catalog.........................
2015-12-31 11:02:58.224 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionInitSql...............
2015-12-31 11:02:58.224 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTestQuery.............
2015-12-31 11:02:58.224 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTimeout...............30000
2015-12-31 11:02:58.224 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSource......................
2015-12-31 11:02:58.224 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceClassName.............
2015-12-31 11:02:58.224 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceJNDI..................
2015-12-31 11:02:58.224 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceProperties............{password=<masked>, dataSourceClassName=org.h2.Driver}
2015-12-31 11:02:58.224 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - driverClassName.................
2015-12-31 11:02:58.224 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckProperties...........{}
2015-12-31 11:02:58.224 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckRegistry.............
2015-12-31 11:02:58.224 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - idleTimeout.....................600000
2015-12-31 11:02:58.224 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - initializationFailFast..........true
2015-12-31 11:02:58.224 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - isolateInternalQueries..........false
2015-12-31 11:02:58.224 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbc4ConnectionTest.............false
2015-12-31 11:02:58.224 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbcUrl.........................jdbc:h2:mem:test
2015-12-31 11:02:58.224 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - leakDetectionThreshold..........0
2015-12-31 11:02:58.224 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maxLifetime.....................1800000
2015-12-31 11:02:58.224 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maximumPoolSize.................10
2015-12-31 11:02:58.225 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricRegistry..................
2015-12-31 11:02:58.225 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricsTrackerFactory...........
2015-12-31 11:02:58.225 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - minimumIdle.....................10
2015-12-31 11:02:58.225 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - password........................<masked>
2015-12-31 11:02:58.225 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - poolName........................HikariPool.jdbc:h2:mem:test.username
2015-12-31 11:02:58.225 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - readOnly........................false
2015-12-31 11:02:58.225 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - registerMbeans..................false
2015-12-31 11:02:58.225 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - scheduledExecutorService........
2015-12-31 11:02:58.225 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - threadFactory...................
2015-12-31 11:02:58.225 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - transactionIsolation............
2015-12-31 11:02:58.225 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - username........................username
2015-12-31 11:02:58.225 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - validationTimeout...............5000
2015-12-31 11:02:58.225 [Test worker] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool.jdbc:h2:mem:test.username - is starting.
2015-12-31 11:02:58.227 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.PoolBase - HikariPool.jdbc:h2:mem:test.username - Connection.setNetworkTimeout() is not supported (org.h2.jdbc.JdbcConnection.getNetworkTimeout()I)
2015-12-31 11:02:58.227 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn110: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.228 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn111: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.229 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn112: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.229 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn113: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.230 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@32dae4a1] obtained in 0 millis
2015-12-31 11:02:58.230 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn114: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.231 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[DROP TABLE IF EXISTS something; create table something (id int primary key, name varchar(100))] took 1 millis
2015-12-31 11:02:58.232 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn115: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.232 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@32dae4a1] released
2015-12-31 11:02:58.232 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@7ec539f8] obtained in 0 millis
2015-12-31 11:02:58.232 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn116: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.232 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[insert into something (id, name) values (1, 'Brian')] took 0 millis
2015-12-31 11:02:58.232 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn117: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.232 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@7ec539f8] released
2015-12-31 11:02:58.232 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn118: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.233 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn119: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.233 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - After adding	pool HikariPool.jdbc:h2:mem:test.username stats (total=10, active=0, idle=10, waiting=0)
2015-12-31 11:02:58.234 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - Connecting with driver org.h2.Driver to jdbc:h2:mem:test
2015-12-31 11:02:58.234 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - class org.h2.Driver
2015-12-31 11:02:58.234 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - HikariPool.jdbc:h2:mem:test.username - configuration:
2015-12-31 11:02:58.235 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - allowPoolSuspension.............false
2015-12-31 11:02:58.235 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - autoCommit......................true
2015-12-31 11:02:58.235 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - catalog.........................
2015-12-31 11:02:58.235 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionInitSql...............
2015-12-31 11:02:58.235 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTestQuery.............
2015-12-31 11:02:58.235 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTimeout...............30000
2015-12-31 11:02:58.235 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSource......................
2015-12-31 11:02:58.235 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceClassName.............
2015-12-31 11:02:58.235 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceJNDI..................
2015-12-31 11:02:58.236 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceProperties............{password=<masked>, dataSourceClassName=org.h2.Driver}
2015-12-31 11:02:58.236 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - driverClassName.................
2015-12-31 11:02:58.236 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckProperties...........{}
2015-12-31 11:02:58.236 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckRegistry.............
2015-12-31 11:02:58.236 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - idleTimeout.....................600000
2015-12-31 11:02:58.236 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - initializationFailFast..........true
2015-12-31 11:02:58.236 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - isolateInternalQueries..........false
2015-12-31 11:02:58.236 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbc4ConnectionTest.............false
2015-12-31 11:02:58.236 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbcUrl.........................jdbc:h2:mem:test
2015-12-31 11:02:58.236 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - leakDetectionThreshold..........0
2015-12-31 11:02:58.236 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maxLifetime.....................1800000
2015-12-31 11:02:58.236 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maximumPoolSize.................10
2015-12-31 11:02:58.236 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricRegistry..................
2015-12-31 11:02:58.236 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricsTrackerFactory...........
2015-12-31 11:02:58.236 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - minimumIdle.....................10
2015-12-31 11:02:58.236 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - password........................<masked>
2015-12-31 11:02:58.236 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - poolName........................HikariPool.jdbc:h2:mem:test.username
2015-12-31 11:02:58.236 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - readOnly........................false
2015-12-31 11:02:58.236 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - registerMbeans..................false
2015-12-31 11:02:58.236 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - scheduledExecutorService........
2015-12-31 11:02:58.236 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - threadFactory...................
2015-12-31 11:02:58.236 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - transactionIsolation............
2015-12-31 11:02:58.236 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - username........................username
2015-12-31 11:02:58.236 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - validationTimeout...............5000
2015-12-31 11:02:58.236 [Test worker] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool.jdbc:h2:mem:test.username - is starting.
2015-12-31 11:02:58.237 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.PoolBase - HikariPool.jdbc:h2:mem:test.username - Connection.setNetworkTimeout() is not supported (org.h2.jdbc.JdbcConnection.getNetworkTimeout()I)
2015-12-31 11:02:58.238 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn120: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.238 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn121: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.238 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn122: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.239 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn123: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.239 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn124: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.239 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@12a88bdf] obtained in 0 millis
2015-12-31 11:02:58.239 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn125: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.240 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[DROP TABLE IF EXISTS products] took 0 millis
2015-12-31 11:02:58.240 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn126: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.240 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@12a88bdf] released
2015-12-31 11:02:58.240 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@453aa71c] obtained in 0 millis
2015-12-31 11:02:58.241 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn127: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.242 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[CREATE TABLE products (id int(11) NOT NULL AUTO_INCREMENT, name varchar(20) NOT NULL DEFAULT '', vendor_id int(11) NOT NULL, price decimal(10,4) unsigned NOT NULL DEFAULT '0.0000', PRIMARY KEY (`id`) )] took 0 millis
2015-12-31 11:02:58.242 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn128: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.242 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@453aa71c] released
2015-12-31 11:02:58.242 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@38b37e1d] obtained in 0 millis
2015-12-31 11:02:58.242 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn129: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.242 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - After adding	pool HikariPool.jdbc:h2:mem:test.username stats (total=10, active=1, idle=9, waiting=0)
2015-12-31 11:02:58.242 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-12-31 11:02:58.242 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@38b37e1d] released
2015-12-31 11:02:58.243 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@6a8875f9] obtained in 0 millis
2015-12-31 11:02:58.243 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-12-31 11:02:58.243 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@6a8875f9] released
2015-12-31 11:02:58.243 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@681a59a0] obtained in 0 millis
2015-12-31 11:02:58.243 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-12-31 11:02:58.244 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@681a59a0] released
2015-12-31 11:02:58.244 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@7165cbdb] obtained in 0 millis
2015-12-31 11:02:58.246 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - About to parse: inline@4c744f80
2015-12-31 11:02:58.246 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Building AST
2015-12-31 11:02:58.247 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Creating templates
2015-12-31 11:02:58.248 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[SELECT * FROM products] took 0 millis
2015-12-31 11:02:58.252 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@7165cbdb] released
2015-12-31 11:02:58.252 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@567a4c6a] obtained in 0 millis
2015-12-31 11:02:58.255 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - About to parse: inline@6ffdc663
2015-12-31 11:02:58.255 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Building AST
2015-12-31 11:02:58.260 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Creating templates
2015-12-31 11:02:58.262 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, vendor_id, price) VALUES (?, ?, ?)] took 0 millis
2015-12-31 11:02:58.265 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@567a4c6a] released
2015-12-31 11:02:58.270 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - Connecting with driver org.h2.Driver to jdbc:h2:mem:test
2015-12-31 11:02:58.270 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - class org.h2.Driver
2015-12-31 11:02:58.270 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - HikariPool.jdbc:h2:mem:test.username - configuration:
2015-12-31 11:02:58.271 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - allowPoolSuspension.............false
2015-12-31 11:02:58.271 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - autoCommit......................true
2015-12-31 11:02:58.271 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - catalog.........................
2015-12-31 11:02:58.271 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionInitSql...............
2015-12-31 11:02:58.271 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTestQuery.............
2015-12-31 11:02:58.271 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTimeout...............30000
2015-12-31 11:02:58.271 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSource......................
2015-12-31 11:02:58.271 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceClassName.............
2015-12-31 11:02:58.271 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceJNDI..................
2015-12-31 11:02:58.271 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceProperties............{password=<masked>, dataSourceClassName=org.h2.Driver}
2015-12-31 11:02:58.271 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - driverClassName.................
2015-12-31 11:02:58.271 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckProperties...........{}
2015-12-31 11:02:58.271 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckRegistry.............
2015-12-31 11:02:58.271 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - idleTimeout.....................600000
2015-12-31 11:02:58.271 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - initializationFailFast..........true
2015-12-31 11:02:58.271 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - isolateInternalQueries..........false
2015-12-31 11:02:58.271 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbc4ConnectionTest.............false
2015-12-31 11:02:58.271 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbcUrl.........................jdbc:h2:mem:test
2015-12-31 11:02:58.271 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - leakDetectionThreshold..........0
2015-12-31 11:02:58.271 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maxLifetime.....................1800000
2015-12-31 11:02:58.271 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maximumPoolSize.................10
2015-12-31 11:02:58.272 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricRegistry..................
2015-12-31 11:02:58.272 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricsTrackerFactory...........
2015-12-31 11:02:58.272 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - minimumIdle.....................10
2015-12-31 11:02:58.272 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - password........................<masked>
2015-12-31 11:02:58.272 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - poolName........................HikariPool.jdbc:h2:mem:test.username
2015-12-31 11:02:58.272 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - readOnly........................false
2015-12-31 11:02:58.272 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - registerMbeans..................false
2015-12-31 11:02:58.272 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - scheduledExecutorService........
2015-12-31 11:02:58.272 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - threadFactory...................
2015-12-31 11:02:58.272 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - transactionIsolation............
2015-12-31 11:02:58.272 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - username........................username
2015-12-31 11:02:58.272 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - validationTimeout...............5000
2015-12-31 11:02:58.272 [Test worker] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool.jdbc:h2:mem:test.username - is starting.
2015-12-31 11:02:58.274 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.PoolBase - HikariPool.jdbc:h2:mem:test.username - Connection.setNetworkTimeout() is not supported (org.h2.jdbc.JdbcConnection.getNetworkTimeout()I)
2015-12-31 11:02:58.274 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn130: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.276 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn131: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.277 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn132: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.278 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn133: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.278 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn134: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.279 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn135: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.279 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn136: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.280 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn137: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.280 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn138: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.280 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn139: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.281 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - After adding	pool HikariPool.jdbc:h2:mem:test.username stats (total=10, active=0, idle=10, waiting=0)
2015-12-31 11:02:58.283 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - Connecting with driver org.h2.Driver to jdbc:h2:mem:test
2015-12-31 11:02:58.283 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - class org.h2.Driver
2015-12-31 11:02:58.283 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - HikariPool.jdbc:h2:mem:test.username - configuration:
2015-12-31 11:02:58.284 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - allowPoolSuspension.............false
2015-12-31 11:02:58.284 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - autoCommit......................true
2015-12-31 11:02:58.284 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - catalog.........................
2015-12-31 11:02:58.284 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionInitSql...............
2015-12-31 11:02:58.284 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTestQuery.............
2015-12-31 11:02:58.284 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTimeout...............30000
2015-12-31 11:02:58.284 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSource......................
2015-12-31 11:02:58.284 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceClassName.............
2015-12-31 11:02:58.284 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceJNDI..................
2015-12-31 11:02:58.284 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceProperties............{password=<masked>, dataSourceClassName=org.h2.Driver}
2015-12-31 11:02:58.285 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - driverClassName.................
2015-12-31 11:02:58.285 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckProperties...........{}
2015-12-31 11:02:58.285 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckRegistry.............
2015-12-31 11:02:58.285 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - idleTimeout.....................600000
2015-12-31 11:02:58.285 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - initializationFailFast..........true
2015-12-31 11:02:58.285 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - isolateInternalQueries..........false
2015-12-31 11:02:58.285 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbc4ConnectionTest.............false
2015-12-31 11:02:58.285 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbcUrl.........................jdbc:h2:mem:test
2015-12-31 11:02:58.285 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - leakDetectionThreshold..........0
2015-12-31 11:02:58.285 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maxLifetime.....................1800000
2015-12-31 11:02:58.285 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maximumPoolSize.................10
2015-12-31 11:02:58.285 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricRegistry..................
2015-12-31 11:02:58.286 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricsTrackerFactory...........
2015-12-31 11:02:58.286 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - minimumIdle.....................10
2015-12-31 11:02:58.286 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - password........................<masked>
2015-12-31 11:02:58.286 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - poolName........................HikariPool.jdbc:h2:mem:test.username
2015-12-31 11:02:58.286 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - readOnly........................false
2015-12-31 11:02:58.286 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - registerMbeans..................false
2015-12-31 11:02:58.286 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - scheduledExecutorService........
2015-12-31 11:02:58.286 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - threadFactory...................
2015-12-31 11:02:58.286 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - transactionIsolation............
2015-12-31 11:02:58.286 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - username........................username
2015-12-31 11:02:58.286 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - validationTimeout...............5000
2015-12-31 11:02:58.287 [Test worker] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool.jdbc:h2:mem:test.username - is starting.
2015-12-31 11:02:58.288 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.PoolBase - HikariPool.jdbc:h2:mem:test.username - Connection.setNetworkTimeout() is not supported (org.h2.jdbc.JdbcConnection.getNetworkTimeout()I)
2015-12-31 11:02:58.288 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn140: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.289 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn141: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.289 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn142: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.289 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn143: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.289 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn144: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.290 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn145: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.290 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn146: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.290 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn147: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.291 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn148: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.291 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn149: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.291 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - After adding	pool HikariPool.jdbc:h2:mem:test.username stats (total=10, active=0, idle=10, waiting=0)
2015-12-31 11:02:58.296 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - Connecting with driver org.h2.Driver to jdbc:h2:mem:test
2015-12-31 11:02:58.296 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - class org.h2.Driver
2015-12-31 11:02:58.296 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - HikariPool.jdbc:h2:mem:test.username - configuration:
2015-12-31 11:02:58.298 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - allowPoolSuspension.............false
2015-12-31 11:02:58.299 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - autoCommit......................true
2015-12-31 11:02:58.300 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - catalog.........................
2015-12-31 11:02:58.300 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionInitSql...............
2015-12-31 11:02:58.300 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTestQuery.............
2015-12-31 11:02:58.300 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTimeout...............30000
2015-12-31 11:02:58.301 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSource......................
2015-12-31 11:02:58.301 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceClassName.............
2015-12-31 11:02:58.301 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceJNDI..................
2015-12-31 11:02:58.302 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceProperties............{password=<masked>, dataSourceClassName=org.h2.Driver}
2015-12-31 11:02:58.302 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - driverClassName.................
2015-12-31 11:02:58.303 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckProperties...........{}
2015-12-31 11:02:58.303 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckRegistry.............
2015-12-31 11:02:58.304 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - idleTimeout.....................600000
2015-12-31 11:02:58.304 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - initializationFailFast..........true
2015-12-31 11:02:58.305 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - isolateInternalQueries..........false
2015-12-31 11:02:58.305 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbc4ConnectionTest.............false
2015-12-31 11:02:58.305 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbcUrl.........................jdbc:h2:mem:test
2015-12-31 11:02:58.306 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - leakDetectionThreshold..........0
2015-12-31 11:02:58.307 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maxLifetime.....................1800000
2015-12-31 11:02:58.308 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maximumPoolSize.................10
2015-12-31 11:02:58.309 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricRegistry..................
2015-12-31 11:02:58.309 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricsTrackerFactory...........
2015-12-31 11:02:58.310 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - minimumIdle.....................10
2015-12-31 11:02:58.310 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - password........................<masked>
2015-12-31 11:02:58.310 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - poolName........................HikariPool.jdbc:h2:mem:test.username
2015-12-31 11:02:58.313 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - readOnly........................false
2015-12-31 11:02:58.313 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - registerMbeans..................false
2015-12-31 11:02:58.313 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - scheduledExecutorService........
2015-12-31 11:02:58.314 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - threadFactory...................
2015-12-31 11:02:58.315 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - transactionIsolation............
2015-12-31 11:02:58.315 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - username........................username
2015-12-31 11:02:58.316 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - validationTimeout...............5000
2015-12-31 11:02:58.316 [Test worker] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool.jdbc:h2:mem:test.username - is starting.
2015-12-31 11:02:58.318 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.PoolBase - HikariPool.jdbc:h2:mem:test.username - Connection.setNetworkTimeout() is not supported (org.h2.jdbc.JdbcConnection.getNetworkTimeout()I)
2015-12-31 11:02:58.318 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn150: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.319 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn151: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.319 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn152: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.319 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn153: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.319 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn154: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.320 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn155: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.320 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@3ce913f2] obtained in 0 millis
2015-12-31 11:02:58.320 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn156: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.320 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn157: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.320 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn158: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.321 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn159: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.321 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - After adding	pool HikariPool.jdbc:h2:mem:test.username stats (total=10, active=1, idle=9, waiting=0)
2015-12-31 11:02:58.322 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[DROP TABLE IF EXISTS products] took 0 millis
2015-12-31 11:02:58.323 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@3ce913f2] released
2015-12-31 11:02:58.323 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@226a3367] obtained in 0 millis
2015-12-31 11:02:58.325 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[CREATE TABLE products (id int(11) NOT NULL AUTO_INCREMENT, name varchar(20) NOT NULL DEFAULT '', vendor_id int(11) NOT NULL, price decimal(10,4) unsigned NOT NULL DEFAULT '0.0000', PRIMARY KEY (`id`) )] took 1 millis
2015-12-31 11:02:58.325 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@226a3367] released
2015-12-31 11:02:58.325 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@5f595b8e] obtained in 0 millis
2015-12-31 11:02:58.326 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-12-31 11:02:58.326 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@5f595b8e] released
2015-12-31 11:02:58.327 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@3cd64a70] obtained in 0 millis
2015-12-31 11:02:58.328 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-12-31 11:02:58.328 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@3cd64a70] released
2015-12-31 11:02:58.330 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@58cf6e61] obtained in 1 millis
2015-12-31 11:02:58.331 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-12-31 11:02:58.331 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@58cf6e61] released
2015-12-31 11:02:58.331 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@26fba84a] obtained in 0 millis
2015-12-31 11:02:58.333 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - About to parse: inline@186a09e1
2015-12-31 11:02:58.333 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Building AST
2015-12-31 11:02:58.336 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Creating templates
2015-12-31 11:02:58.339 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[SELECT * FROM products WHERE vendor_id = ? OR vendor_id = ?] took 0 millis
2015-12-31 11:02:58.350 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@26fba84a] released
2015-12-31 11:02:58.351 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - Connecting with driver org.h2.Driver to jdbc:h2:mem:test
2015-12-31 11:02:58.351 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - class org.h2.Driver
2015-12-31 11:02:58.351 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - HikariPool.jdbc:h2:mem:test.username - configuration:
2015-12-31 11:02:58.353 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - allowPoolSuspension.............false
2015-12-31 11:02:58.353 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - autoCommit......................true
2015-12-31 11:02:58.353 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - catalog.........................
2015-12-31 11:02:58.353 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionInitSql...............
2015-12-31 11:02:58.353 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTestQuery.............
2015-12-31 11:02:58.353 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTimeout...............30000
2015-12-31 11:02:58.353 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSource......................
2015-12-31 11:02:58.353 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceClassName.............
2015-12-31 11:02:58.353 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceJNDI..................
2015-12-31 11:02:58.353 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceProperties............{password=<masked>, dataSourceClassName=org.h2.Driver}
2015-12-31 11:02:58.353 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - driverClassName.................
2015-12-31 11:02:58.353 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckProperties...........{}
2015-12-31 11:02:58.353 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckRegistry.............
2015-12-31 11:02:58.354 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - idleTimeout.....................600000
2015-12-31 11:02:58.354 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - initializationFailFast..........true
2015-12-31 11:02:58.354 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - isolateInternalQueries..........false
2015-12-31 11:02:58.354 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbc4ConnectionTest.............false
2015-12-31 11:02:58.354 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbcUrl.........................jdbc:h2:mem:test
2015-12-31 11:02:58.354 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - leakDetectionThreshold..........0
2015-12-31 11:02:58.354 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maxLifetime.....................1800000
2015-12-31 11:02:58.354 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maximumPoolSize.................10
2015-12-31 11:02:58.354 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricRegistry..................
2015-12-31 11:02:58.354 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricsTrackerFactory...........
2015-12-31 11:02:58.354 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - minimumIdle.....................10
2015-12-31 11:02:58.354 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - password........................<masked>
2015-12-31 11:02:58.354 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - poolName........................HikariPool.jdbc:h2:mem:test.username
2015-12-31 11:02:58.354 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - readOnly........................false
2015-12-31 11:02:58.354 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - registerMbeans..................false
2015-12-31 11:02:58.354 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - scheduledExecutorService........
2015-12-31 11:02:58.354 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - threadFactory...................
2015-12-31 11:02:58.354 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - transactionIsolation............
2015-12-31 11:02:58.354 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - username........................username
2015-12-31 11:02:58.354 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - validationTimeout...............5000
2015-12-31 11:02:58.354 [Test worker] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool.jdbc:h2:mem:test.username - is starting.
2015-12-31 11:02:58.356 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.PoolBase - HikariPool.jdbc:h2:mem:test.username - Connection.setNetworkTimeout() is not supported (org.h2.jdbc.JdbcConnection.getNetworkTimeout()I)
2015-12-31 11:02:58.356 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn160: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.357 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn161: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.359 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn162: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.360 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn163: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.361 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn164: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.361 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn165: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.361 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn166: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.361 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn167: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.362 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn168: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.362 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn169: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.362 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - After adding	pool HikariPool.jdbc:h2:mem:test.username stats (total=10, active=0, idle=10, waiting=0)
2015-12-31 11:02:58.364 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@3f4e9ce8] obtained in 0 millis
2015-12-31 11:02:58.365 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[DROP TABLE IF EXISTS products] took 0 millis
2015-12-31 11:02:58.365 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@3f4e9ce8] released
2015-12-31 11:02:58.365 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@56f198aa] obtained in 0 millis
2015-12-31 11:02:58.367 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[CREATE TABLE products (id int(11) NOT NULL AUTO_INCREMENT, name varchar(20) NOT NULL DEFAULT '', vendor_id int(11) NOT NULL, price decimal(10,4) unsigned NOT NULL DEFAULT '0.0000', PRIMARY KEY (`id`) )] took 1 millis
2015-12-31 11:02:58.367 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@56f198aa] released
2015-12-31 11:02:58.367 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@675bccdc] obtained in 0 millis
2015-12-31 11:02:58.368 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-12-31 11:02:58.368 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@675bccdc] released
2015-12-31 11:02:58.368 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@3f5c872f] obtained in 0 millis
2015-12-31 11:02:58.369 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-12-31 11:02:58.369 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@3f5c872f] released
2015-12-31 11:02:58.370 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@12417ea3] obtained in 0 millis
2015-12-31 11:02:58.385 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 15 millis
2015-12-31 11:02:58.385 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@12417ea3] released
2015-12-31 11:02:58.387 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@67abe7d5] obtained in 0 millis
2015-12-31 11:02:58.389 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - About to parse: inline@2d00c006
2015-12-31 11:02:58.389 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Building AST
2015-12-31 11:02:58.396 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Creating templates
2015-12-31 11:02:58.400 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[SELECT * FROM products WHERE id = ?] took 0 millis
2015-12-31 11:02:58.420 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@67abe7d5] released
2015-12-31 11:02:58.422 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - Connecting with driver org.h2.Driver to jdbc:h2:mem:test
2015-12-31 11:02:58.422 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - class org.h2.Driver
2015-12-31 11:02:58.422 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - HikariPool.jdbc:h2:mem:test.username - configuration:
2015-12-31 11:02:58.425 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - allowPoolSuspension.............false
2015-12-31 11:02:58.425 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - autoCommit......................true
2015-12-31 11:02:58.425 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - catalog.........................
2015-12-31 11:02:58.425 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionInitSql...............
2015-12-31 11:02:58.425 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTestQuery.............
2015-12-31 11:02:58.425 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTimeout...............30000
2015-12-31 11:02:58.425 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSource......................
2015-12-31 11:02:58.426 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceClassName.............
2015-12-31 11:02:58.426 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceJNDI..................
2015-12-31 11:02:58.426 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceProperties............{password=<masked>, dataSourceClassName=org.h2.Driver}
2015-12-31 11:02:58.426 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - driverClassName.................
2015-12-31 11:02:58.426 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckProperties...........{}
2015-12-31 11:02:58.426 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckRegistry.............
2015-12-31 11:02:58.426 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - idleTimeout.....................600000
2015-12-31 11:02:58.426 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - initializationFailFast..........true
2015-12-31 11:02:58.426 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - isolateInternalQueries..........false
2015-12-31 11:02:58.426 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbc4ConnectionTest.............false
2015-12-31 11:02:58.426 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbcUrl.........................jdbc:h2:mem:test
2015-12-31 11:02:58.426 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - leakDetectionThreshold..........0
2015-12-31 11:02:58.427 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maxLifetime.....................1800000
2015-12-31 11:02:58.427 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maximumPoolSize.................10
2015-12-31 11:02:58.427 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricRegistry..................
2015-12-31 11:02:58.427 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricsTrackerFactory...........
2015-12-31 11:02:58.427 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - minimumIdle.....................10
2015-12-31 11:02:58.427 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - password........................<masked>
2015-12-31 11:02:58.427 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - poolName........................HikariPool.jdbc:h2:mem:test.username
2015-12-31 11:02:58.428 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - readOnly........................false
2015-12-31 11:02:58.428 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - registerMbeans..................false
2015-12-31 11:02:58.428 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - scheduledExecutorService........
2015-12-31 11:02:58.428 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - threadFactory...................
2015-12-31 11:02:58.428 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - transactionIsolation............
2015-12-31 11:02:58.428 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - username........................username
2015-12-31 11:02:58.428 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - validationTimeout...............5000
2015-12-31 11:02:58.428 [Test worker] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool.jdbc:h2:mem:test.username - is starting.
2015-12-31 11:02:58.432 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.PoolBase - HikariPool.jdbc:h2:mem:test.username - Connection.setNetworkTimeout() is not supported (org.h2.jdbc.JdbcConnection.getNetworkTimeout()I)
2015-12-31 11:02:58.432 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn170: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.432 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn171: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.433 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn172: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.433 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn173: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.433 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn174: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.434 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn175: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.434 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn176: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.434 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn177: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.435 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn178: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.435 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn179: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.435 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - After adding	pool HikariPool.jdbc:h2:mem:test.username stats (total=10, active=0, idle=10, waiting=0)
2015-12-31 11:02:58.436 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@4c2685bf] obtained in 0 millis
2015-12-31 11:02:58.438 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[DROP TABLE IF EXISTS products] took 0 millis
2015-12-31 11:02:58.438 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@4c2685bf] released
2015-12-31 11:02:58.438 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@6fb39a40] obtained in 0 millis
2015-12-31 11:02:58.440 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[CREATE TABLE products (id int(11) NOT NULL AUTO_INCREMENT, name varchar(20) NOT NULL DEFAULT '', vendor_id int(11) NOT NULL, price decimal(10,4) unsigned NOT NULL DEFAULT '0.0000', PRIMARY KEY (`id`) )] took 1 millis
2015-12-31 11:02:58.440 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@6fb39a40] released
2015-12-31 11:02:58.440 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@4fdc1e45] obtained in 0 millis
2015-12-31 11:02:58.441 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-12-31 11:02:58.441 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@4fdc1e45] released
2015-12-31 11:02:58.442 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@2c8ac9e2] obtained in 0 millis
2015-12-31 11:02:58.443 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-12-31 11:02:58.443 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@2c8ac9e2] released
2015-12-31 11:02:58.444 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@489ed437] obtained in 0 millis
2015-12-31 11:02:58.444 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-12-31 11:02:58.444 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@489ed437] released
2015-12-31 11:02:58.444 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@4ce62bd] obtained in 0 millis
2015-12-31 11:02:58.445 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - About to parse: inline@4c744f80
2015-12-31 11:02:58.445 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Building AST
2015-12-31 11:02:58.446 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Creating templates
2015-12-31 11:02:58.447 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[SELECT * FROM products] took 0 millis
2015-12-31 11:02:58.450 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@4ce62bd] released
2015-12-31 11:02:58.452 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - Connecting with driver org.h2.Driver to jdbc:h2:mem:test
2015-12-31 11:02:58.452 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - class org.h2.Driver
2015-12-31 11:02:58.452 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - HikariPool.jdbc:h2:mem:test.username - configuration:
2015-12-31 11:02:58.453 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - allowPoolSuspension.............false
2015-12-31 11:02:58.453 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - autoCommit......................true
2015-12-31 11:02:58.453 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - catalog.........................
2015-12-31 11:02:58.453 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionInitSql...............
2015-12-31 11:02:58.453 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTestQuery.............
2015-12-31 11:02:58.453 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTimeout...............30000
2015-12-31 11:02:58.453 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSource......................
2015-12-31 11:02:58.453 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceClassName.............
2015-12-31 11:02:58.453 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceJNDI..................
2015-12-31 11:02:58.453 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceProperties............{password=<masked>, dataSourceClassName=org.h2.Driver}
2015-12-31 11:02:58.453 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - driverClassName.................
2015-12-31 11:02:58.453 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckProperties...........{}
2015-12-31 11:02:58.453 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckRegistry.............
2015-12-31 11:02:58.453 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - idleTimeout.....................600000
2015-12-31 11:02:58.453 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - initializationFailFast..........true
2015-12-31 11:02:58.454 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - isolateInternalQueries..........false
2015-12-31 11:02:58.454 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbc4ConnectionTest.............false
2015-12-31 11:02:58.454 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbcUrl.........................jdbc:h2:mem:test
2015-12-31 11:02:58.454 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - leakDetectionThreshold..........0
2015-12-31 11:02:58.454 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maxLifetime.....................1800000
2015-12-31 11:02:58.454 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maximumPoolSize.................10
2015-12-31 11:02:58.454 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricRegistry..................
2015-12-31 11:02:58.454 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricsTrackerFactory...........
2015-12-31 11:02:58.454 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - minimumIdle.....................10
2015-12-31 11:02:58.454 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - password........................<masked>
2015-12-31 11:02:58.454 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - poolName........................HikariPool.jdbc:h2:mem:test.username
2015-12-31 11:02:58.454 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - readOnly........................false
2015-12-31 11:02:58.454 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - registerMbeans..................false
2015-12-31 11:02:58.454 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - scheduledExecutorService........
2015-12-31 11:02:58.454 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - threadFactory...................
2015-12-31 11:02:58.454 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - transactionIsolation............
2015-12-31 11:02:58.454 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - username........................username
2015-12-31 11:02:58.454 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - validationTimeout...............5000
2015-12-31 11:02:58.454 [Test worker] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool.jdbc:h2:mem:test.username - is starting.
2015-12-31 11:02:58.455 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.PoolBase - HikariPool.jdbc:h2:mem:test.username - Connection.setNetworkTimeout() is not supported (org.h2.jdbc.JdbcConnection.getNetworkTimeout()I)
2015-12-31 11:02:58.456 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn180: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.457 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn181: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.457 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn182: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.458 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn183: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.458 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn184: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.459 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn185: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.459 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn186: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.460 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn187: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.460 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@5a0a2809] obtained in 0 millis
2015-12-31 11:02:58.460 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn188: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.461 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn189: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.461 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - After adding	pool HikariPool.jdbc:h2:mem:test.username stats (total=10, active=1, idle=9, waiting=0)
2015-12-31 11:02:58.462 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[DROP TABLE IF EXISTS products] took 0 millis
2015-12-31 11:02:58.462 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@5a0a2809] released
2015-12-31 11:02:58.462 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@1f281317] obtained in 0 millis
2015-12-31 11:02:58.464 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[CREATE TABLE products (id int(11) NOT NULL AUTO_INCREMENT, name varchar(20) NOT NULL DEFAULT '', vendor_id int(11) NOT NULL, price decimal(10,4) unsigned NOT NULL DEFAULT '0.0000', PRIMARY KEY (`id`) )] took 0 millis
2015-12-31 11:02:58.464 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@1f281317] released
2015-12-31 11:02:58.464 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@564b5d98] obtained in 0 millis
2015-12-31 11:02:58.465 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-12-31 11:02:58.465 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@564b5d98] released
2015-12-31 11:02:58.465 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@541687bc] obtained in 0 millis
2015-12-31 11:02:58.466 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-12-31 11:02:58.466 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@541687bc] released
2015-12-31 11:02:58.466 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@738a6388] obtained in 0 millis
2015-12-31 11:02:58.466 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-12-31 11:02:58.466 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@738a6388] released
2015-12-31 11:02:58.467 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@784ea8fb] obtained in 0 millis
2015-12-31 11:02:58.469 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - About to parse: inline@186a09e1
2015-12-31 11:02:58.469 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Building AST
2015-12-31 11:02:58.473 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Creating templates
2015-12-31 11:02:58.476 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[SELECT * FROM products WHERE vendor_id = ? OR vendor_id = ?] took 0 millis
2015-12-31 11:02:58.482 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@784ea8fb] released
2015-12-31 11:02:58.482 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - Connecting with driver org.h2.Driver to jdbc:h2:mem:test
2015-12-31 11:02:58.482 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - class org.h2.Driver
2015-12-31 11:02:58.482 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - HikariPool.jdbc:h2:mem:test.username - configuration:
2015-12-31 11:02:58.484 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - allowPoolSuspension.............false
2015-12-31 11:02:58.484 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - autoCommit......................true
2015-12-31 11:02:58.484 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - catalog.........................
2015-12-31 11:02:58.484 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionInitSql...............
2015-12-31 11:02:58.484 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTestQuery.............
2015-12-31 11:02:58.485 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTimeout...............30000
2015-12-31 11:02:58.485 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSource......................
2015-12-31 11:02:58.485 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceClassName.............
2015-12-31 11:02:58.485 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceJNDI..................
2015-12-31 11:02:58.485 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceProperties............{password=<masked>, dataSourceClassName=org.h2.Driver}
2015-12-31 11:02:58.485 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - driverClassName.................
2015-12-31 11:02:58.485 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckProperties...........{}
2015-12-31 11:02:58.485 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckRegistry.............
2015-12-31 11:02:58.485 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - idleTimeout.....................600000
2015-12-31 11:02:58.485 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - initializationFailFast..........true
2015-12-31 11:02:58.485 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - isolateInternalQueries..........false
2015-12-31 11:02:58.485 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbc4ConnectionTest.............false
2015-12-31 11:02:58.485 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbcUrl.........................jdbc:h2:mem:test
2015-12-31 11:02:58.485 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - leakDetectionThreshold..........0
2015-12-31 11:02:58.485 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maxLifetime.....................1800000
2015-12-31 11:02:58.485 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maximumPoolSize.................10
2015-12-31 11:02:58.485 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricRegistry..................
2015-12-31 11:02:58.485 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricsTrackerFactory...........
2015-12-31 11:02:58.485 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - minimumIdle.....................10
2015-12-31 11:02:58.485 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - password........................<masked>
2015-12-31 11:02:58.485 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - poolName........................HikariPool.jdbc:h2:mem:test.username
2015-12-31 11:02:58.485 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - readOnly........................false
2015-12-31 11:02:58.485 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - registerMbeans..................false
2015-12-31 11:02:58.485 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - scheduledExecutorService........
2015-12-31 11:02:58.485 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - threadFactory...................
2015-12-31 11:02:58.485 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - transactionIsolation............
2015-12-31 11:02:58.485 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - username........................username
2015-12-31 11:02:58.486 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - validationTimeout...............5000
2015-12-31 11:02:58.486 [Test worker] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool.jdbc:h2:mem:test.username - is starting.
2015-12-31 11:02:58.489 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.PoolBase - HikariPool.jdbc:h2:mem:test.username - Connection.setNetworkTimeout() is not supported (org.h2.jdbc.JdbcConnection.getNetworkTimeout()I)
2015-12-31 11:02:58.489 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn190: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.490 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn191: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.490 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn192: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.490 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn193: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.491 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn194: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.491 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@57254fc2] obtained in 0 millis
2015-12-31 11:02:58.491 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn195: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.491 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn196: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.492 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn197: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.492 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn198: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.492 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn199: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.492 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - After adding	pool HikariPool.jdbc:h2:mem:test.username stats (total=10, active=1, idle=9, waiting=0)
2015-12-31 11:02:58.493 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[DROP TABLE IF EXISTS products] took 0 millis
2015-12-31 11:02:58.493 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@57254fc2] released
2015-12-31 11:02:58.493 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@3eb0576e] obtained in 0 millis
2015-12-31 11:02:58.494 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[CREATE TABLE products (id int(11) NOT NULL AUTO_INCREMENT, name varchar(20) NOT NULL DEFAULT '', vendor_id int(11) NOT NULL, price decimal(10,4) unsigned NOT NULL DEFAULT '0.0000', PRIMARY KEY (`id`) )] took 0 millis
2015-12-31 11:02:58.495 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@3eb0576e] released
2015-12-31 11:02:58.495 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@747b9527] obtained in 0 millis
2015-12-31 11:02:58.495 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-12-31 11:02:58.495 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@747b9527] released
2015-12-31 11:02:58.495 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@3998b0a7] obtained in 0 millis
2015-12-31 11:02:58.496 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-12-31 11:02:58.496 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@3998b0a7] released
2015-12-31 11:02:58.496 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@3c008dfe] obtained in 0 millis
2015-12-31 11:02:58.496 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-12-31 11:02:58.499 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@3c008dfe] released
2015-12-31 11:02:58.499 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@67c67a50] obtained in 0 millis
2015-12-31 11:02:58.500 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - About to parse: inline@2d00c006
2015-12-31 11:02:58.500 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Building AST
2015-12-31 11:02:58.503 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Creating templates
2015-12-31 11:02:58.504 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[SELECT * FROM products WHERE id = ?] took 0 millis
2015-12-31 11:02:58.506 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@67c67a50] released
2015-12-31 11:02:58.507 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - Connecting with driver org.h2.Driver to jdbc:h2:mem:test
2015-12-31 11:02:58.507 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - class org.h2.Driver
2015-12-31 11:02:58.507 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - HikariPool.jdbc:h2:mem:test.username - configuration:
2015-12-31 11:02:58.509 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - allowPoolSuspension.............false
2015-12-31 11:02:58.509 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - autoCommit......................true
2015-12-31 11:02:58.509 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - catalog.........................
2015-12-31 11:02:58.509 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionInitSql...............
2015-12-31 11:02:58.509 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTestQuery.............
2015-12-31 11:02:58.509 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTimeout...............30000
2015-12-31 11:02:58.509 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSource......................
2015-12-31 11:02:58.509 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceClassName.............
2015-12-31 11:02:58.509 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceJNDI..................
2015-12-31 11:02:58.509 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceProperties............{password=<masked>, dataSourceClassName=org.h2.Driver}
2015-12-31 11:02:58.509 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - driverClassName.................
2015-12-31 11:02:58.509 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckProperties...........{}
2015-12-31 11:02:58.509 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckRegistry.............
2015-12-31 11:02:58.510 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - idleTimeout.....................600000
2015-12-31 11:02:58.510 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - initializationFailFast..........true
2015-12-31 11:02:58.510 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - isolateInternalQueries..........false
2015-12-31 11:02:58.510 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbc4ConnectionTest.............false
2015-12-31 11:02:58.510 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbcUrl.........................jdbc:h2:mem:test
2015-12-31 11:02:58.510 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - leakDetectionThreshold..........0
2015-12-31 11:02:58.510 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maxLifetime.....................1800000
2015-12-31 11:02:58.510 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maximumPoolSize.................10
2015-12-31 11:02:58.510 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricRegistry..................
2015-12-31 11:02:58.510 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricsTrackerFactory...........
2015-12-31 11:02:58.510 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - minimumIdle.....................10
2015-12-31 11:02:58.510 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - password........................<masked>
2015-12-31 11:02:58.510 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - poolName........................HikariPool.jdbc:h2:mem:test.username
2015-12-31 11:02:58.510 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - readOnly........................false
2015-12-31 11:02:58.510 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - registerMbeans..................false
2015-12-31 11:02:58.510 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - scheduledExecutorService........
2015-12-31 11:02:58.510 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - threadFactory...................
2015-12-31 11:02:58.510 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - transactionIsolation............
2015-12-31 11:02:58.510 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - username........................username
2015-12-31 11:02:58.510 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - validationTimeout...............5000
2015-12-31 11:02:58.511 [Test worker] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool.jdbc:h2:mem:test.username - is starting.
2015-12-31 11:02:58.513 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.PoolBase - HikariPool.jdbc:h2:mem:test.username - Connection.setNetworkTimeout() is not supported (org.h2.jdbc.JdbcConnection.getNetworkTimeout()I)
2015-12-31 11:02:58.513 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn200: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.514 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn201: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.514 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn202: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.514 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn203: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.514 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn204: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.514 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn205: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.515 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn206: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.515 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@90eadef] obtained in 0 millis
2015-12-31 11:02:58.515 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn207: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.515 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn208: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.515 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn209: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.515 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - After adding	pool HikariPool.jdbc:h2:mem:test.username stats (total=10, active=1, idle=9, waiting=0)
2015-12-31 11:02:58.517 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[DROP TABLE IF EXISTS products] took 0 millis
2015-12-31 11:02:58.517 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@90eadef] released
2015-12-31 11:02:58.517 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@36d36359] obtained in 0 millis
2015-12-31 11:02:58.518 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[CREATE TABLE products (id int(11) NOT NULL AUTO_INCREMENT, name varchar(20) NOT NULL DEFAULT '', vendor_id int(11) NOT NULL, price decimal(10,4) unsigned NOT NULL DEFAULT '0.0000', PRIMARY KEY (`id`) )] took 0 millis
2015-12-31 11:02:58.518 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@36d36359] released
2015-12-31 11:02:58.518 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@5f9b6690] obtained in 0 millis
2015-12-31 11:02:58.519 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-12-31 11:02:58.519 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@5f9b6690] released
2015-12-31 11:02:58.519 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@4e09a4ad] obtained in 0 millis
2015-12-31 11:02:58.519 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-12-31 11:02:58.520 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@4e09a4ad] released
2015-12-31 11:02:58.520 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@4086b040] obtained in 0 millis
2015-12-31 11:02:58.520 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-12-31 11:02:58.520 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@4086b040] released
2015-12-31 11:02:58.520 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@58a4868f] obtained in 0 millis
2015-12-31 11:02:58.522 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - About to parse: inline@4c744f80
2015-12-31 11:02:58.522 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Building AST
2015-12-31 11:02:58.523 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Creating templates
2015-12-31 11:02:58.523 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[SELECT * FROM products] took 0 millis
2015-12-31 11:02:58.525 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@58a4868f] released
2015-12-31 11:02:58.527 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - Connecting with driver org.h2.Driver to jdbc:h2:mem:test
2015-12-31 11:02:58.527 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - class org.h2.Driver
2015-12-31 11:02:58.527 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - HikariPool.jdbc:h2:mem:test.username - configuration:
2015-12-31 11:02:58.528 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - allowPoolSuspension.............false
2015-12-31 11:02:58.528 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - autoCommit......................true
2015-12-31 11:02:58.528 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - catalog.........................
2015-12-31 11:02:58.528 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionInitSql...............
2015-12-31 11:02:58.528 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTestQuery.............
2015-12-31 11:02:58.528 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTimeout...............30000
2015-12-31 11:02:58.528 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSource......................
2015-12-31 11:02:58.528 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceClassName.............
2015-12-31 11:02:58.528 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceJNDI..................
2015-12-31 11:02:58.528 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceProperties............{password=<masked>, dataSourceClassName=org.h2.Driver}
2015-12-31 11:02:58.528 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - driverClassName.................
2015-12-31 11:02:58.528 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckProperties...........{}
2015-12-31 11:02:58.528 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckRegistry.............
2015-12-31 11:02:58.528 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - idleTimeout.....................600000
2015-12-31 11:02:58.528 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - initializationFailFast..........true
2015-12-31 11:02:58.528 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - isolateInternalQueries..........false
2015-12-31 11:02:58.528 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbc4ConnectionTest.............false
2015-12-31 11:02:58.528 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbcUrl.........................jdbc:h2:mem:test
2015-12-31 11:02:58.528 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - leakDetectionThreshold..........0
2015-12-31 11:02:58.528 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maxLifetime.....................1800000
2015-12-31 11:02:58.528 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maximumPoolSize.................10
2015-12-31 11:02:58.528 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricRegistry..................
2015-12-31 11:02:58.528 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricsTrackerFactory...........
2015-12-31 11:02:58.528 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - minimumIdle.....................10
2015-12-31 11:02:58.528 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - password........................<masked>
2015-12-31 11:02:58.528 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - poolName........................HikariPool.jdbc:h2:mem:test.username
2015-12-31 11:02:58.528 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - readOnly........................false
2015-12-31 11:02:58.528 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - registerMbeans..................false
2015-12-31 11:02:58.528 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - scheduledExecutorService........
2015-12-31 11:02:58.528 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - threadFactory...................
2015-12-31 11:02:58.528 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - transactionIsolation............
2015-12-31 11:02:58.528 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - username........................username
2015-12-31 11:02:58.528 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - validationTimeout...............5000
2015-12-31 11:02:58.528 [Test worker] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool.jdbc:h2:mem:test.username - is starting.
2015-12-31 11:02:58.529 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.PoolBase - HikariPool.jdbc:h2:mem:test.username - Connection.setNetworkTimeout() is not supported (org.h2.jdbc.JdbcConnection.getNetworkTimeout()I)
2015-12-31 11:02:58.529 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn210: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.530 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn211: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.530 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn212: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.530 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn213: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.530 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn214: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.531 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@5d33df17] obtained in 0 millis
2015-12-31 11:02:58.531 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn215: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.531 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn216: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.531 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn217: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.531 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn218: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.531 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn219: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.531 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - After adding	pool HikariPool.jdbc:h2:mem:test.username stats (total=10, active=1, idle=9, waiting=0)
2015-12-31 11:02:58.532 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[DROP TABLE IF EXISTS products] took 0 millis
2015-12-31 11:02:58.533 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@5d33df17] released
2015-12-31 11:02:58.533 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@545130b] obtained in 0 millis
2015-12-31 11:02:58.533 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[CREATE TABLE products (id int(11) NOT NULL AUTO_INCREMENT, name varchar(20) NOT NULL DEFAULT '', vendor_id int(11) NOT NULL, price decimal(10,4) unsigned NOT NULL DEFAULT '0.0000', PRIMARY KEY (`id`) )] took 0 millis
2015-12-31 11:02:58.534 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@545130b] released
2015-12-31 11:02:58.534 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@457429a9] obtained in 0 millis
2015-12-31 11:02:58.534 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-12-31 11:02:58.534 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@457429a9] released
2015-12-31 11:02:58.534 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@4383570c] obtained in 0 millis
2015-12-31 11:02:58.535 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-12-31 11:02:58.535 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@4383570c] released
2015-12-31 11:02:58.535 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@6a80ef7c] obtained in 0 millis
2015-12-31 11:02:58.535 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-12-31 11:02:58.535 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@6a80ef7c] released
2015-12-31 11:02:58.535 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@7376d4a5] obtained in 0 millis
2015-12-31 11:02:58.536 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - About to parse: inline@44af029f
2015-12-31 11:02:58.536 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Building AST
2015-12-31 11:02:58.539 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Creating templates
2015-12-31 11:02:58.542 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[SELECT * FROM products
] took 0 millis
2015-12-31 11:02:58.545 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@7376d4a5] released
2015-12-31 11:02:58.545 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@7f6af5e1] obtained in 0 millis
2015-12-31 11:02:58.546 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - About to parse: inline@44af029f
2015-12-31 11:02:58.546 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Building AST
2015-12-31 11:02:58.548 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Creating templates
2015-12-31 11:02:58.549 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[SELECT * FROM products

  WHERE id = ?] took 0 millis
2015-12-31 11:02:58.551 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@7f6af5e1] released
2015-12-31 11:02:58.551 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - Connecting with driver org.h2.Driver to jdbc:h2:mem:test
2015-12-31 11:02:58.551 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - class org.h2.Driver
2015-12-31 11:02:58.551 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - HikariPool.jdbc:h2:mem:test.username - configuration:
2015-12-31 11:02:58.552 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - allowPoolSuspension.............false
2015-12-31 11:02:58.552 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - autoCommit......................true
2015-12-31 11:02:58.552 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - catalog.........................
2015-12-31 11:02:58.552 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionInitSql...............
2015-12-31 11:02:58.552 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTestQuery.............
2015-12-31 11:02:58.552 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTimeout...............30000
2015-12-31 11:02:58.552 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSource......................
2015-12-31 11:02:58.552 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceClassName.............
2015-12-31 11:02:58.553 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceJNDI..................
2015-12-31 11:02:58.553 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceProperties............{password=<masked>, dataSourceClassName=org.h2.Driver}
2015-12-31 11:02:58.553 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - driverClassName.................
2015-12-31 11:02:58.553 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckProperties...........{}
2015-12-31 11:02:58.553 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckRegistry.............
2015-12-31 11:02:58.553 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - idleTimeout.....................600000
2015-12-31 11:02:58.553 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - initializationFailFast..........true
2015-12-31 11:02:58.553 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - isolateInternalQueries..........false
2015-12-31 11:02:58.553 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbc4ConnectionTest.............false
2015-12-31 11:02:58.553 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbcUrl.........................jdbc:h2:mem:test
2015-12-31 11:02:58.553 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - leakDetectionThreshold..........0
2015-12-31 11:02:58.553 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maxLifetime.....................1800000
2015-12-31 11:02:58.553 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maximumPoolSize.................10
2015-12-31 11:02:58.553 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricRegistry..................
2015-12-31 11:02:58.553 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricsTrackerFactory...........
2015-12-31 11:02:58.553 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - minimumIdle.....................10
2015-12-31 11:02:58.553 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - password........................<masked>
2015-12-31 11:02:58.553 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - poolName........................HikariPool.jdbc:h2:mem:test.username
2015-12-31 11:02:58.553 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - readOnly........................false
2015-12-31 11:02:58.553 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - registerMbeans..................false
2015-12-31 11:02:58.553 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - scheduledExecutorService........
2015-12-31 11:02:58.553 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - threadFactory...................
2015-12-31 11:02:58.553 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - transactionIsolation............
2015-12-31 11:02:58.553 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - username........................username
2015-12-31 11:02:58.553 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - validationTimeout...............5000
2015-12-31 11:02:58.553 [Test worker] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool.jdbc:h2:mem:test.username - is starting.
2015-12-31 11:02:58.554 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.PoolBase - HikariPool.jdbc:h2:mem:test.username - Connection.setNetworkTimeout() is not supported (org.h2.jdbc.JdbcConnection.getNetworkTimeout()I)
2015-12-31 11:02:58.555 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn220: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.555 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn221: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.556 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn222: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.556 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn223: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.556 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn224: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.557 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn225: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.557 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn226: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.557 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn227: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.557 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn228: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.558 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn229: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.558 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - After adding	pool HikariPool.jdbc:h2:mem:test.username stats (total=10, active=0, idle=10, waiting=0)
2015-12-31 11:02:58.558 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@4a05ef17] obtained in 0 millis
2015-12-31 11:02:58.560 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[DROP TABLE IF EXISTS products] took 0 millis
2015-12-31 11:02:58.560 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@4a05ef17] released
2015-12-31 11:02:58.560 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@6b1452a0] obtained in 0 millis
2015-12-31 11:02:58.561 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[CREATE TABLE products (id int(11) NOT NULL AUTO_INCREMENT, name varchar(20) NOT NULL DEFAULT '', vendor_id int(11) NOT NULL, price decimal(10,4) unsigned NOT NULL DEFAULT '0.0000', PRIMARY KEY (`id`) )] took 0 millis
2015-12-31 11:02:58.561 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@6b1452a0] released
2015-12-31 11:02:58.562 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@1cdeb896] obtained in 0 millis
2015-12-31 11:02:58.562 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-12-31 11:02:58.562 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@1cdeb896] released
2015-12-31 11:02:58.562 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@38ddb524] obtained in 0 millis
2015-12-31 11:02:58.562 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-12-31 11:02:58.562 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@38ddb524] released
2015-12-31 11:02:58.563 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@37d0f272] obtained in 0 millis
2015-12-31 11:02:58.563 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-12-31 11:02:58.563 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@37d0f272] released
2015-12-31 11:02:58.564 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - Connecting with driver org.h2.Driver to jdbc:h2:mem:test
2015-12-31 11:02:58.564 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - class org.h2.Driver
2015-12-31 11:02:58.565 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - HikariPool.jdbc:h2:mem:test.username - configuration:
2015-12-31 11:02:58.565 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - allowPoolSuspension.............false
2015-12-31 11:02:58.565 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - autoCommit......................true
2015-12-31 11:02:58.565 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - catalog.........................
2015-12-31 11:02:58.565 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionInitSql...............
2015-12-31 11:02:58.565 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTestQuery.............
2015-12-31 11:02:58.565 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTimeout...............30000
2015-12-31 11:02:58.565 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSource......................
2015-12-31 11:02:58.565 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceClassName.............
2015-12-31 11:02:58.565 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceJNDI..................
2015-12-31 11:02:58.565 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceProperties............{password=<masked>, dataSourceClassName=org.h2.Driver}
2015-12-31 11:02:58.565 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - driverClassName.................
2015-12-31 11:02:58.565 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckProperties...........{}
2015-12-31 11:02:58.566 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckRegistry.............
2015-12-31 11:02:58.566 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - idleTimeout.....................600000
2015-12-31 11:02:58.566 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - initializationFailFast..........true
2015-12-31 11:02:58.566 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - isolateInternalQueries..........false
2015-12-31 11:02:58.566 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbc4ConnectionTest.............false
2015-12-31 11:02:58.566 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbcUrl.........................jdbc:h2:mem:test
2015-12-31 11:02:58.566 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - leakDetectionThreshold..........0
2015-12-31 11:02:58.566 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maxLifetime.....................1800000
2015-12-31 11:02:58.566 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maximumPoolSize.................10
2015-12-31 11:02:58.566 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricRegistry..................
2015-12-31 11:02:58.566 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricsTrackerFactory...........
2015-12-31 11:02:58.566 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - minimumIdle.....................10
2015-12-31 11:02:58.566 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - password........................<masked>
2015-12-31 11:02:58.566 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - poolName........................HikariPool.jdbc:h2:mem:test.username
2015-12-31 11:02:58.566 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - readOnly........................false
2015-12-31 11:02:58.566 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - registerMbeans..................false
2015-12-31 11:02:58.566 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - scheduledExecutorService........
2015-12-31 11:02:58.566 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - threadFactory...................
2015-12-31 11:02:58.566 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - transactionIsolation............
2015-12-31 11:02:58.566 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - username........................username
2015-12-31 11:02:58.566 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - validationTimeout...............5000
2015-12-31 11:02:58.566 [Test worker] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool.jdbc:h2:mem:test.username - is starting.
2015-12-31 11:02:58.567 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.PoolBase - HikariPool.jdbc:h2:mem:test.username - Connection.setNetworkTimeout() is not supported (org.h2.jdbc.JdbcConnection.getNetworkTimeout()I)
2015-12-31 11:02:58.567 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn230: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.571 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn231: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.572 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn232: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.572 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn233: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.572 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn234: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.573 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn235: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.573 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn236: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.573 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn237: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.573 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn238: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.573 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@24480d37] obtained in 0 millis
2015-12-31 11:02:58.574 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[DROP TABLE IF EXISTS products] took 0 millis
2015-12-31 11:02:58.574 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn239: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.574 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@24480d37] released
2015-12-31 11:02:58.574 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - After adding	pool HikariPool.jdbc:h2:mem:test.username stats (total=10, active=0, idle=10, waiting=0)
2015-12-31 11:02:58.574 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@dd49e3e] obtained in 0 millis
2015-12-31 11:02:58.575 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[CREATE TABLE products (id int(11) NOT NULL AUTO_INCREMENT, name varchar(20) NOT NULL DEFAULT '', vendor_id int(11) NOT NULL, price decimal(10,4) unsigned NOT NULL DEFAULT '0.0000', PRIMARY KEY (`id`) )] took 0 millis
2015-12-31 11:02:58.575 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@dd49e3e] released
2015-12-31 11:02:58.576 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@65972315] obtained in 0 millis
2015-12-31 11:02:58.576 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-12-31 11:02:58.576 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@65972315] released
2015-12-31 11:02:58.576 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@2dec73de] obtained in 0 millis
2015-12-31 11:02:58.576 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-12-31 11:02:58.577 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@2dec73de] released
2015-12-31 11:02:58.577 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@663da137] obtained in 0 millis
2015-12-31 11:02:58.577 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-12-31 11:02:58.577 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@663da137] released
2015-12-31 11:02:58.577 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@5db94942] obtained in 0 millis
2015-12-31 11:02:58.577 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[SELECT * FROM products] took 0 millis
2015-12-31 11:02:58.657 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - Connecting with driver org.h2.Driver to jdbc:h2:mem:test
2015-12-31 11:02:58.657 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - class org.h2.Driver
2015-12-31 11:02:58.657 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - HikariPool.jdbc:h2:mem:test.username - configuration:
2015-12-31 11:02:58.658 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - allowPoolSuspension.............false
2015-12-31 11:02:58.658 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - autoCommit......................true
2015-12-31 11:02:58.658 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - catalog.........................
2015-12-31 11:02:58.658 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionInitSql...............
2015-12-31 11:02:58.658 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTestQuery.............
2015-12-31 11:02:58.658 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTimeout...............30000
2015-12-31 11:02:58.658 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSource......................
2015-12-31 11:02:58.658 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceClassName.............
2015-12-31 11:02:58.658 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceJNDI..................
2015-12-31 11:02:58.658 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceProperties............{password=<masked>, dataSourceClassName=org.h2.Driver}
2015-12-31 11:02:58.658 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - driverClassName.................
2015-12-31 11:02:58.658 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckProperties...........{}
2015-12-31 11:02:58.658 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckRegistry.............
2015-12-31 11:02:58.658 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - idleTimeout.....................600000
2015-12-31 11:02:58.658 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - initializationFailFast..........true
2015-12-31 11:02:58.658 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - isolateInternalQueries..........false
2015-12-31 11:02:58.658 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbc4ConnectionTest.............false
2015-12-31 11:02:58.658 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbcUrl.........................jdbc:h2:mem:test
2015-12-31 11:02:58.658 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - leakDetectionThreshold..........0
2015-12-31 11:02:58.658 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maxLifetime.....................1800000
2015-12-31 11:02:58.659 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maximumPoolSize.................10
2015-12-31 11:02:58.659 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricRegistry..................
2015-12-31 11:02:58.659 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricsTrackerFactory...........
2015-12-31 11:02:58.659 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - minimumIdle.....................10
2015-12-31 11:02:58.659 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - password........................<masked>
2015-12-31 11:02:58.659 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - poolName........................HikariPool.jdbc:h2:mem:test.username
2015-12-31 11:02:58.659 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - readOnly........................false
2015-12-31 11:02:58.659 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - registerMbeans..................false
2015-12-31 11:02:58.659 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - scheduledExecutorService........
2015-12-31 11:02:58.659 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - threadFactory...................
2015-12-31 11:02:58.659 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - transactionIsolation............
2015-12-31 11:02:58.659 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - username........................username
2015-12-31 11:02:58.659 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - validationTimeout...............5000
2015-12-31 11:02:58.660 [Test worker] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool.jdbc:h2:mem:test.username - is starting.
2015-12-31 11:02:58.661 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.PoolBase - HikariPool.jdbc:h2:mem:test.username - Connection.setNetworkTimeout() is not supported (org.h2.jdbc.JdbcConnection.getNetworkTimeout()I)
2015-12-31 11:02:58.661 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn240: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.662 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn241: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.662 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn242: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.662 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn243: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.662 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn244: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.662 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn245: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.663 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn246: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.663 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn247: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.663 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn248: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.663 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - Connecting with driver org.h2.Driver to jdbc:h2:mem:test
2015-12-31 11:02:58.663 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - class org.h2.Driver
2015-12-31 11:02:58.663 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn249: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.663 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - HikariPool.jdbc:h2:mem:test.username - configuration:
2015-12-31 11:02:58.663 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - After adding	pool HikariPool.jdbc:h2:mem:test.username stats (total=10, active=0, idle=10, waiting=0)
2015-12-31 11:02:58.664 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - allowPoolSuspension.............false
2015-12-31 11:02:58.664 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - autoCommit......................true
2015-12-31 11:02:58.664 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - catalog.........................
2015-12-31 11:02:58.664 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionInitSql...............
2015-12-31 11:02:58.664 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTestQuery.............
2015-12-31 11:02:58.664 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTimeout...............30000
2015-12-31 11:02:58.664 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSource......................
2015-12-31 11:02:58.664 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceClassName.............
2015-12-31 11:02:58.664 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceJNDI..................
2015-12-31 11:02:58.664 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceProperties............{password=<masked>, dataSourceClassName=org.h2.Driver}
2015-12-31 11:02:58.665 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - driverClassName.................
2015-12-31 11:02:58.665 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckProperties...........{}
2015-12-31 11:02:58.665 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckRegistry.............
2015-12-31 11:02:58.665 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - idleTimeout.....................600000
2015-12-31 11:02:58.665 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - initializationFailFast..........true
2015-12-31 11:02:58.665 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - isolateInternalQueries..........false
2015-12-31 11:02:58.665 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbc4ConnectionTest.............false
2015-12-31 11:02:58.665 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbcUrl.........................jdbc:h2:mem:test
2015-12-31 11:02:58.665 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - leakDetectionThreshold..........0
2015-12-31 11:02:58.665 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maxLifetime.....................1800000
2015-12-31 11:02:58.665 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maximumPoolSize.................10
2015-12-31 11:02:58.665 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricRegistry..................
2015-12-31 11:02:58.665 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricsTrackerFactory...........
2015-12-31 11:02:58.665 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - minimumIdle.....................10
2015-12-31 11:02:58.665 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - password........................<masked>
2015-12-31 11:02:58.665 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - poolName........................HikariPool.jdbc:h2:mem:test.username
2015-12-31 11:02:58.665 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - readOnly........................false
2015-12-31 11:02:58.665 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - registerMbeans..................false
2015-12-31 11:02:58.665 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - scheduledExecutorService........
2015-12-31 11:02:58.665 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - threadFactory...................
2015-12-31 11:02:58.666 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - transactionIsolation............
2015-12-31 11:02:58.666 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - username........................username
2015-12-31 11:02:58.666 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - validationTimeout...............5000
2015-12-31 11:02:58.666 [Test worker] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool.jdbc:h2:mem:test.username - is starting.
2015-12-31 11:02:58.667 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.PoolBase - HikariPool.jdbc:h2:mem:test.username - Connection.setNetworkTimeout() is not supported (org.h2.jdbc.JdbcConnection.getNetworkTimeout()I)
2015-12-31 11:02:58.667 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn250: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.667 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn251: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.668 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn252: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.668 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn253: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.668 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn254: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.668 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@29d12a95] obtained in 0 millis
2015-12-31 11:02:58.669 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn255: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.669 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn256: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.669 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn257: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.670 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn258: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.670 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn259: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.670 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - After adding	pool HikariPool.jdbc:h2:mem:test.username stats (total=10, active=1, idle=9, waiting=0)
2015-12-31 11:02:58.671 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[DROP TABLE IF EXISTS products] took 1 millis
2015-12-31 11:02:58.671 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@29d12a95] released
2015-12-31 11:02:58.671 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@2d67d49e] obtained in 0 millis
2015-12-31 11:02:58.672 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[CREATE TABLE products (id int(11) NOT NULL AUTO_INCREMENT, name varchar(20) NOT NULL DEFAULT '', vendor_id int(11) NOT NULL, price decimal(10,4) unsigned NOT NULL DEFAULT '0.0000', PRIMARY KEY (`id`) )] took 0 millis
2015-12-31 11:02:58.672 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@2d67d49e] released
2015-12-31 11:02:58.672 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@64e13832] obtained in 0 millis
2015-12-31 11:02:58.673 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-12-31 11:02:58.673 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@64e13832] released
2015-12-31 11:02:58.673 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@6ca8260a] obtained in 0 millis
2015-12-31 11:02:58.673 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-12-31 11:02:58.673 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@6ca8260a] released
2015-12-31 11:02:58.673 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@78262a67] obtained in 0 millis
2015-12-31 11:02:58.674 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-12-31 11:02:58.674 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@78262a67] released
2015-12-31 11:02:58.674 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@929f714] obtained in 0 millis
2015-12-31 11:02:58.676 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - About to parse: inline@186a09e1
2015-12-31 11:02:58.676 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Building AST
2015-12-31 11:02:58.678 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Creating templates
2015-12-31 11:02:58.679 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[SELECT * FROM products WHERE vendor_id = ? OR vendor_id = ?] took 0 millis
2015-12-31 11:02:58.681 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@929f714] released
2015-12-31 11:02:58.681 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@4c83672d] obtained in 0 millis
2015-12-31 11:02:58.682 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - About to parse: inline@6838f77
2015-12-31 11:02:58.682 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Building AST
2015-12-31 11:02:58.683 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Creating templates
2015-12-31 11:02:58.688 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@4c83672d] released
2015-12-31 11:02:58.689 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - Connecting with driver org.h2.Driver to jdbc:h2:mem:test
2015-12-31 11:02:58.689 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - class org.h2.Driver
2015-12-31 11:02:58.689 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - HikariPool.jdbc:h2:mem:test.username - configuration:
2015-12-31 11:02:58.689 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - allowPoolSuspension.............false
2015-12-31 11:02:58.689 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - autoCommit......................true
2015-12-31 11:02:58.689 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - catalog.........................
2015-12-31 11:02:58.689 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionInitSql...............
2015-12-31 11:02:58.689 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTestQuery.............
2015-12-31 11:02:58.689 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTimeout...............30000
2015-12-31 11:02:58.689 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSource......................
2015-12-31 11:02:58.689 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceClassName.............
2015-12-31 11:02:58.689 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceJNDI..................
2015-12-31 11:02:58.689 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceProperties............{password=<masked>, dataSourceClassName=org.h2.Driver}
2015-12-31 11:02:58.689 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - driverClassName.................
2015-12-31 11:02:58.689 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckProperties...........{}
2015-12-31 11:02:58.689 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckRegistry.............
2015-12-31 11:02:58.689 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - idleTimeout.....................600000
2015-12-31 11:02:58.690 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - initializationFailFast..........true
2015-12-31 11:02:58.690 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - isolateInternalQueries..........false
2015-12-31 11:02:58.690 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbc4ConnectionTest.............false
2015-12-31 11:02:58.690 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbcUrl.........................jdbc:h2:mem:test
2015-12-31 11:02:58.690 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - leakDetectionThreshold..........0
2015-12-31 11:02:58.690 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maxLifetime.....................1800000
2015-12-31 11:02:58.690 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maximumPoolSize.................10
2015-12-31 11:02:58.690 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricRegistry..................
2015-12-31 11:02:58.690 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricsTrackerFactory...........
2015-12-31 11:02:58.690 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - minimumIdle.....................10
2015-12-31 11:02:58.690 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - password........................<masked>
2015-12-31 11:02:58.690 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - poolName........................HikariPool.jdbc:h2:mem:test.username
2015-12-31 11:02:58.690 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - readOnly........................false
2015-12-31 11:02:58.690 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - registerMbeans..................false
2015-12-31 11:02:58.690 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - scheduledExecutorService........
2015-12-31 11:02:58.690 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - threadFactory...................
2015-12-31 11:02:58.690 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - transactionIsolation............
2015-12-31 11:02:58.690 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - username........................username
2015-12-31 11:02:58.690 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - validationTimeout...............5000
2015-12-31 11:02:58.690 [Test worker] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool.jdbc:h2:mem:test.username - is starting.
2015-12-31 11:02:58.691 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.PoolBase - HikariPool.jdbc:h2:mem:test.username - Connection.setNetworkTimeout() is not supported (org.h2.jdbc.JdbcConnection.getNetworkTimeout()I)
2015-12-31 11:02:58.692 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn260: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.693 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn261: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.693 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn262: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.693 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn263: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.694 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn264: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.694 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn265: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.694 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@203831eb] obtained in 0 millis
2015-12-31 11:02:58.694 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn266: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.695 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn267: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.695 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn268: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.695 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn269: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.695 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - After adding	pool HikariPool.jdbc:h2:mem:test.username stats (total=10, active=1, idle=9, waiting=0)
2015-12-31 11:02:58.695 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - About to parse: inline@186a09e1
2015-12-31 11:02:58.695 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Building AST
2015-12-31 11:02:58.696 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Creating templates
2015-12-31 11:02:58.698 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[SELECT * FROM products WHERE vendor_id = ? OR vendor_id = ?] took 0 millis
2015-12-31 11:02:58.699 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@203831eb] released
2015-12-31 11:02:58.700 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - Connecting with driver org.h2.Driver to jdbc:h2:mem:test
2015-12-31 11:02:58.700 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - class org.h2.Driver
2015-12-31 11:02:58.700 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - HikariPool.jdbc:h2:mem:test.username - configuration:
2015-12-31 11:02:58.700 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - allowPoolSuspension.............false
2015-12-31 11:02:58.701 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - autoCommit......................true
2015-12-31 11:02:58.701 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - catalog.........................
2015-12-31 11:02:58.701 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionInitSql...............
2015-12-31 11:02:58.701 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTestQuery.............
2015-12-31 11:02:58.701 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTimeout...............30000
2015-12-31 11:02:58.701 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSource......................
2015-12-31 11:02:58.701 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceClassName.............
2015-12-31 11:02:58.701 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceJNDI..................
2015-12-31 11:02:58.701 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceProperties............{password=<masked>, dataSourceClassName=org.h2.Driver}
2015-12-31 11:02:58.701 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - driverClassName.................
2015-12-31 11:02:58.701 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckProperties...........{}
2015-12-31 11:02:58.701 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckRegistry.............
2015-12-31 11:02:58.701 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - idleTimeout.....................600000
2015-12-31 11:02:58.701 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - initializationFailFast..........true
2015-12-31 11:02:58.701 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - isolateInternalQueries..........false
2015-12-31 11:02:58.701 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbc4ConnectionTest.............false
2015-12-31 11:02:58.701 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbcUrl.........................jdbc:h2:mem:test
2015-12-31 11:02:58.701 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - leakDetectionThreshold..........0
2015-12-31 11:02:58.701 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maxLifetime.....................1800000
2015-12-31 11:02:58.701 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maximumPoolSize.................10
2015-12-31 11:02:58.701 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricRegistry..................
2015-12-31 11:02:58.701 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricsTrackerFactory...........
2015-12-31 11:02:58.701 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - minimumIdle.....................10
2015-12-31 11:02:58.701 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - password........................<masked>
2015-12-31 11:02:58.701 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - poolName........................HikariPool.jdbc:h2:mem:test.username
2015-12-31 11:02:58.701 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - readOnly........................false
2015-12-31 11:02:58.701 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - registerMbeans..................false
2015-12-31 11:02:58.701 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - scheduledExecutorService........
2015-12-31 11:02:58.702 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - threadFactory...................
2015-12-31 11:02:58.702 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - transactionIsolation............
2015-12-31 11:02:58.702 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - username........................username
2015-12-31 11:02:58.702 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - validationTimeout...............5000
2015-12-31 11:02:58.702 [Test worker] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool.jdbc:h2:mem:test.username - is starting.
2015-12-31 11:02:58.703 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.PoolBase - HikariPool.jdbc:h2:mem:test.username - Connection.setNetworkTimeout() is not supported (org.h2.jdbc.JdbcConnection.getNetworkTimeout()I)
2015-12-31 11:02:58.703 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn270: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.703 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn271: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.704 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn272: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.704 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn273: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.704 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn274: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.705 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn275: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.705 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn276: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.705 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn277: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.705 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - Connecting with driver org.test.Driver to jdbc:h2:mem:test
2015-12-31 11:02:58.705 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn278: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.706 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn279: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.706 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - After adding	pool HikariPool.jdbc:h2:mem:test.username stats (total=10, active=0, idle=10, waiting=0)
2015-12-31 11:02:58.708 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - Connecting with driver org.h2.Driver to jdbc:h2:mem:test
2015-12-31 11:02:58.709 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - class org.h2.Driver
2015-12-31 11:02:58.709 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - HikariPool.jdbc:h2:mem:test.username - configuration:
2015-12-31 11:02:58.710 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - allowPoolSuspension.............false
2015-12-31 11:02:58.710 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - autoCommit......................true
2015-12-31 11:02:58.710 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - catalog.........................
2015-12-31 11:02:58.710 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionInitSql...............
2015-12-31 11:02:58.710 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTestQuery.............
2015-12-31 11:02:58.710 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTimeout...............30000
2015-12-31 11:02:58.710 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSource......................
2015-12-31 11:02:58.710 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceClassName.............
2015-12-31 11:02:58.710 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceJNDI..................
2015-12-31 11:02:58.711 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceProperties............{password=<masked>, dataSourceClassName=org.h2.Driver}
2015-12-31 11:02:58.711 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - driverClassName.................
2015-12-31 11:02:58.711 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckProperties...........{}
2015-12-31 11:02:58.711 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckRegistry.............
2015-12-31 11:02:58.711 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - idleTimeout.....................600000
2015-12-31 11:02:58.711 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - initializationFailFast..........true
2015-12-31 11:02:58.711 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - isolateInternalQueries..........false
2015-12-31 11:02:58.711 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbc4ConnectionTest.............false
2015-12-31 11:02:58.711 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbcUrl.........................jdbc:h2:mem:test
2015-12-31 11:02:58.711 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - leakDetectionThreshold..........0
2015-12-31 11:02:58.711 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maxLifetime.....................1800000
2015-12-31 11:02:58.711 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maximumPoolSize.................10
2015-12-31 11:02:58.711 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricRegistry..................
2015-12-31 11:02:58.711 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricsTrackerFactory...........
2015-12-31 11:02:58.711 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - minimumIdle.....................10
2015-12-31 11:02:58.711 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - password........................<masked>
2015-12-31 11:02:58.711 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - poolName........................HikariPool.jdbc:h2:mem:test.username
2015-12-31 11:02:58.711 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - readOnly........................false
2015-12-31 11:02:58.711 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - registerMbeans..................false
2015-12-31 11:02:58.711 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - scheduledExecutorService........
2015-12-31 11:02:58.711 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - threadFactory...................
2015-12-31 11:02:58.711 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - transactionIsolation............
2015-12-31 11:02:58.711 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - username........................username
2015-12-31 11:02:58.711 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - validationTimeout...............5000
2015-12-31 11:02:58.711 [Test worker] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool.jdbc:h2:mem:test.username - is starting.
2015-12-31 11:02:58.712 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.PoolBase - HikariPool.jdbc:h2:mem:test.username - Connection.setNetworkTimeout() is not supported (org.h2.jdbc.JdbcConnection.getNetworkTimeout()I)
2015-12-31 11:02:58.713 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn280: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.713 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn281: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.714 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn282: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.714 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn283: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.714 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn284: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.715 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn285: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.715 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn286: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.715 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn287: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.716 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn288: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.716 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn289: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.716 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - After adding	pool HikariPool.jdbc:h2:mem:test.username stats (total=10, active=0, idle=10, waiting=0)
2015-12-31 11:02:58.719 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - Connecting with driver org.h2.Driver to jdbc:h2:mem:test
2015-12-31 11:02:58.719 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - class org.h2.Driver
2015-12-31 11:02:58.719 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - HikariPool.jdbc:h2:mem:test.username - configuration:
2015-12-31 11:02:58.720 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - allowPoolSuspension.............false
2015-12-31 11:02:58.720 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - autoCommit......................true
2015-12-31 11:02:58.720 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - catalog.........................
2015-12-31 11:02:58.720 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionInitSql...............
2015-12-31 11:02:58.720 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTestQuery.............
2015-12-31 11:02:58.720 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTimeout...............30000
2015-12-31 11:02:58.720 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSource......................
2015-12-31 11:02:58.720 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceClassName.............
2015-12-31 11:02:58.720 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceJNDI..................
2015-12-31 11:02:58.720 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceProperties............{password=<masked>, dataSourceClassName=org.h2.Driver}
2015-12-31 11:02:58.720 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - driverClassName.................
2015-12-31 11:02:58.720 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckProperties...........{}
2015-12-31 11:02:58.720 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckRegistry.............
2015-12-31 11:02:58.720 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - idleTimeout.....................600000
2015-12-31 11:02:58.720 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - initializationFailFast..........true
2015-12-31 11:02:58.720 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - isolateInternalQueries..........false
2015-12-31 11:02:58.720 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbc4ConnectionTest.............false
2015-12-31 11:02:58.720 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbcUrl.........................jdbc:h2:mem:test
2015-12-31 11:02:58.720 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - leakDetectionThreshold..........0
2015-12-31 11:02:58.720 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maxLifetime.....................1800000
2015-12-31 11:02:58.720 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maximumPoolSize.................10
2015-12-31 11:02:58.720 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricRegistry..................com.codahale.metrics.MetricRegistry@10f03555
2015-12-31 11:02:58.720 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricsTrackerFactory...........
2015-12-31 11:02:58.720 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - minimumIdle.....................10
2015-12-31 11:02:58.720 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - password........................<masked>
2015-12-31 11:02:58.720 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - poolName........................HikariPool.jdbc:h2:mem:test.username
2015-12-31 11:02:58.720 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - readOnly........................false
2015-12-31 11:02:58.720 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - registerMbeans..................false
2015-12-31 11:02:58.720 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - scheduledExecutorService........
2015-12-31 11:02:58.720 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - threadFactory...................
2015-12-31 11:02:58.720 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - transactionIsolation............
2015-12-31 11:02:58.720 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - username........................username
2015-12-31 11:02:58.720 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - validationTimeout...............5000
2015-12-31 11:02:58.720 [Test worker] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool.jdbc:h2:mem:test.username - is starting.
2015-12-31 11:02:58.745 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.PoolBase - HikariPool.jdbc:h2:mem:test.username - Connection.setNetworkTimeout() is not supported (org.h2.jdbc.JdbcConnection.getNetworkTimeout()I)
2015-12-31 11:02:58.746 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn290: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.749 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn291: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.749 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn292: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.749 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn293: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.749 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn294: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.750 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn295: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.750 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn296: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.750 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn297: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.750 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn298: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.751 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool.jdbc:h2:mem:test.username - Added connection conn299: url=jdbc:h2:mem:test user=USERNAME
2015-12-31 11:02:58.751 [Hikari connection adder (pool HikariPool.jdbc:h2:mem:test.username)] DEBUG com.zaxxer.hikari.pool.HikariPool - After adding	pool HikariPool.jdbc:h2:mem:test.username stats (total=10, active=0, idle=10, waiting=0)
