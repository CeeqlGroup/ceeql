2015-08-19 21:45:16.379 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - Connecting with driver org.h2.Driver to jdbc:h2:mem:test
2015-08-19 21:45:16.398 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - class org.h2.Driver
2015-08-19 21:45:16.878 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - HikariCP pool HikariPool-0 configuration:
2015-08-19 21:45:16.889 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - allowPoolSuspension.............false
2015-08-19 21:45:16.889 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - autoCommit......................true
2015-08-19 21:45:16.890 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - catalog.........................
2015-08-19 21:45:16.890 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionCustomizer............com.zaxxer.hikari.AbstractHikariConfig$1@4b49501c
2015-08-19 21:45:16.890 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionCustomizerClassName...
2015-08-19 21:45:16.890 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionInitSql...............
2015-08-19 21:45:16.890 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTestQuery.............
2015-08-19 21:45:16.891 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTimeout...............30000
2015-08-19 21:45:16.891 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSource......................
2015-08-19 21:45:16.891 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceClassName.............
2015-08-19 21:45:16.891 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceJNDI..................
2015-08-19 21:45:16.892 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceProperties............{password=<masked>, dataSourceClassName=org.h2.Driver}
2015-08-19 21:45:16.892 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - driverClassName.................
2015-08-19 21:45:16.892 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckProperties...........{}
2015-08-19 21:45:16.892 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckRegistry.............
2015-08-19 21:45:16.892 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - idleTimeout.....................600000
2015-08-19 21:45:16.892 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - initializationFailFast..........true
2015-08-19 21:45:16.893 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - isolateInternalQueries..........false
2015-08-19 21:45:16.893 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbc4ConnectionTest.............false
2015-08-19 21:45:16.893 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbcUrl.........................jdbc:h2:mem:test
2015-08-19 21:45:16.893 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - leakDetectionThreshold..........0
2015-08-19 21:45:16.893 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maxLifetime.....................1800000
2015-08-19 21:45:16.893 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maximumPoolSize.................10
2015-08-19 21:45:16.893 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricRegistry..................
2015-08-19 21:45:16.894 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - minimumIdle.....................10
2015-08-19 21:45:16.894 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - password........................<masked>
2015-08-19 21:45:16.894 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - poolName........................HikariPool-0
2015-08-19 21:45:16.894 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - readOnly........................false
2015-08-19 21:45:16.894 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - registerMbeans..................false
2015-08-19 21:45:16.894 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - threadFactory...................
2015-08-19 21:45:16.894 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - transactionIsolation............
2015-08-19 21:45:16.895 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - username........................username
2015-08-19 21:45:16.895 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - validationTimeout...............5000
2015-08-19 21:45:16.896 [Test worker] INFO  com.zaxxer.hikari.HikariDataSource - HikariCP pool HikariPool-0 is starting.
2015-08-19 21:45:17.179 [Test worker] DEBUG com.zaxxer.hikari.pool.PoolUtilities - HikariPool-0 - Connection.setNetworkTimeout() not supported
2015-08-19 21:45:17.240 [HikariCP connection filler (pool HikariPool-0)] DEBUG com.zaxxer.hikari.pool.HikariPool - After fill pool stats HikariPool-0 (total=10, inUse=0, avail=10, waiting=0)
2015-08-19 21:45:17.617 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@4db0d8dc] obtained in 0 millis
2015-08-19 21:45:17.658 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[DROP TABLE IF EXISTS products] took 0 millis
2015-08-19 21:45:17.658 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@4db0d8dc] released
2015-08-19 21:45:17.659 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@37ef15d0] obtained in 0 millis
2015-08-19 21:45:17.672 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[CREATE TABLE products (id int(11) NOT NULL AUTO_INCREMENT, name varchar(20) NOT NULL DEFAULT '', vendor_id int(11) NOT NULL, price decimal(10,4) unsigned NOT NULL DEFAULT '0.0000', PRIMARY KEY (`id`) )] took 8 millis
2015-08-19 21:45:17.673 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@37ef15d0] released
2015-08-19 21:45:17.677 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@48b4b1bf] obtained in 0 millis
2015-08-19 21:45:17.838 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - About to parse: inline@55888b29
2015-08-19 21:45:17.916 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Building AST
2015-08-19 21:45:17.943 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Creating templates
2015-08-19 21:45:18.569 [Test worker] DEBUG org.skife.jdbi.v2 - batch:[[
  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch1', 1.0, 1
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch2', 2.0, 2
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch3', 3.0, 3
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch4', 4.0, 4
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch5', 5.0, 5
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch6', 6.0, 6
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch7', 7.0, 7
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch8', 8.0, 8
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch9', 9.0, 9
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch10', 10.0, 10
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch11', 11.0, 11
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch12', 12.0, 12
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch13', 13.0, 13
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch14', 14.0, 14
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch15', 15.0, 15
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch16', 16.0, 16
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch17', 17.0, 17
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch18', 18.0, 18
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch19', 19.0, 19
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch20', 20.0, 20
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch21', 21.0, 21
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch22', 22.0, 22
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch23', 23.0, 23
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch24', 24.0, 24
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch25', 25.0, 25
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch26', 26.0, 26
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch27', 27.0, 27
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch28', 28.0, 28
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch29', 29.0, 29
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch30', 30.0, 30
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch31', 31.0, 31
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch32', 32.0, 32
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch33', 33.0, 33
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch34', 34.0, 34
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch35', 35.0, 35
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch36', 36.0, 36
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch37', 37.0, 37
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch38', 38.0, 38
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch39', 39.0, 39
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch40', 40.0, 40
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch41', 41.0, 41
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch42', 42.0, 42
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch43', 43.0, 43
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch44', 44.0, 44
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch45', 45.0, 45
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch46', 46.0, 46
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch47', 47.0, 47
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch48', 48.0, 48
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch49', 49.0, 49
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch50', 50.0, 50
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch51', 51.0, 51
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch52', 52.0, 52
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch53', 53.0, 53
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch54', 54.0, 54
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch55', 55.0, 55
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch56', 56.0, 56
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch57', 57.0, 57
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch58', 58.0, 58
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch59', 59.0, 59
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch60', 60.0, 60
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch61', 61.0, 61
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch62', 62.0, 62
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch63', 63.0, 63
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch64', 64.0, 64
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch65', 65.0, 65
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch66', 66.0, 66
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch67', 67.0, 67
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch68', 68.0, 68
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch69', 69.0, 69
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch70', 70.0, 70
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch71', 71.0, 71
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch72', 72.0, 72
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch73', 73.0, 73
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch74', 74.0, 74
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch75', 75.0, 75
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch76', 76.0, 76
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch77', 77.0, 77
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch78', 78.0, 78
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch79', 79.0, 79
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch80', 80.0, 80
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch81', 81.0, 81
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch82', 82.0, 82
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch83', 83.0, 83
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch84', 84.0, 84
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch85', 85.0, 85
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch86', 86.0, 86
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch87', 87.0, 87
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch88', 88.0, 88
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch89', 89.0, 89
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch90', 90.0, 90
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch91', 91.0, 91
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch92', 92.0, 92
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch93', 93.0, 93
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch94', 94.0, 94
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch95', 95.0, 95
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch96', 96.0, 96
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch97', 97.0, 97
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch98', 98.0, 98
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch99', 99.0, 99
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch100', 100.0, 100
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch101', 101.0, 101
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch102', 102.0, 102
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch103', 103.0, 103
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch104', 104.0, 104
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch105', 105.0, 105
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch106', 106.0, 106
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch107', 107.0, 107
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch108', 108.0, 108
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch109', 109.0, 109
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch110', 110.0, 110
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch111', 111.0, 111
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch112', 112.0, 112
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch113', 113.0, 113
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch114', 114.0, 114
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch115', 115.0, 115
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch116', 116.0, 116
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch117', 117.0, 117
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch118', 118.0, 118
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch119', 119.0, 119
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch120', 120.0, 120
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch121', 121.0, 121
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch122', 122.0, 122
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch123', 123.0, 123
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch124', 124.0, 124
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch125', 125.0, 125
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch126', 126.0, 126
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch127', 127.0, 127
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch128', 128.0, 128
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch129', 129.0, 129
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch130', 130.0, 130
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch131', 131.0, 131
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch132', 132.0, 132
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch133', 133.0, 133
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch134', 134.0, 134
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch135', 135.0, 135
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch136', 136.0, 136
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch137', 137.0, 137
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch138', 138.0, 138
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch139', 139.0, 139
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch140', 140.0, 140
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch141', 141.0, 141
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch142', 142.0, 142
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch143', 143.0, 143
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch144', 144.0, 144
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch145', 145.0, 145
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch146', 146.0, 146
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch147', 147.0, 147
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch148', 148.0, 148
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch149', 149.0, 149
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch150', 150.0, 150
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch151', 151.0, 151
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch152', 152.0, 152
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch153', 153.0, 153
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch154', 154.0, 154
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch155', 155.0, 155
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch156', 156.0, 156
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch157', 157.0, 157
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch158', 158.0, 158
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch159', 159.0, 159
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch160', 160.0, 160
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch161', 161.0, 161
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch162', 162.0, 162
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch163', 163.0, 163
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch164', 164.0, 164
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch165', 165.0, 165
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch166', 166.0, 166
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch167', 167.0, 167
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch168', 168.0, 168
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch169', 169.0, 169
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch170', 170.0, 170
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch171', 171.0, 171
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch172', 172.0, 172
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch173', 173.0, 173
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch174', 174.0, 174
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch175', 175.0, 175
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch176', 176.0, 176
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch177', 177.0, 177
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch178', 178.0, 178
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch179', 179.0, 179
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch180', 180.0, 180
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch181', 181.0, 181
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch182', 182.0, 182
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch183', 183.0, 183
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch184', 184.0, 184
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch185', 185.0, 185
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch186', 186.0, 186
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch187', 187.0, 187
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch188', 188.0, 188
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch189', 189.0, 189
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch190', 190.0, 190
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch191', 191.0, 191
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch192', 192.0, 192
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch193', 193.0, 193
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch194', 194.0, 194
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch195', 195.0, 195
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch196', 196.0, 196
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch197', 197.0, 197
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch198', 198.0, 198
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch199', 199.0, 199
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch200', 200.0, 200
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch201', 201.0, 201
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch202', 202.0, 202
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch203', 203.0, 203
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch204', 204.0, 204
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch205', 205.0, 205
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch206', 206.0, 206
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch207', 207.0, 207
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch208', 208.0, 208
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch209', 209.0, 209
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch210', 210.0, 210
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch211', 211.0, 211
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch212', 212.0, 212
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch213', 213.0, 213
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch214', 214.0, 214
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch215', 215.0, 215
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch216', 216.0, 216
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch217', 217.0, 217
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch218', 218.0, 218
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch219', 219.0, 219
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch220', 220.0, 220
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch221', 221.0, 221
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch222', 222.0, 222
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch223', 223.0, 223
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch224', 224.0, 224
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch225', 225.0, 225
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch226', 226.0, 226
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch227', 227.0, 227
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch228', 228.0, 228
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch229', 229.0, 229
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch230', 230.0, 230
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch231', 231.0, 231
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch232', 232.0, 232
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch233', 233.0, 233
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch234', 234.0, 234
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch235', 235.0, 235
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch236', 236.0, 236
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch237', 237.0, 237
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch238', 238.0, 238
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch239', 239.0, 239
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch240', 240.0, 240
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch241', 241.0, 241
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch242', 242.0, 242
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch243', 243.0, 243
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch244', 244.0, 244
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch245', 245.0, 245
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch246', 246.0, 246
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch247', 247.0, 247
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch248', 248.0, 248
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch249', 249.0, 249
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch250', 250.0, 250
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch251', 251.0, 251
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch252', 252.0, 252
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch253', 253.0, 253
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch254', 254.0, 254
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch255', 255.0, 255
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch256', 256.0, 256
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch257', 257.0, 257
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch258', 258.0, 258
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch259', 259.0, 259
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch260', 260.0, 260
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch261', 261.0, 261
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch262', 262.0, 262
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch263', 263.0, 263
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch264', 264.0, 264
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch265', 265.0, 265
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch266', 266.0, 266
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch267', 267.0, 267
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch268', 268.0, 268
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch269', 269.0, 269
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch270', 270.0, 270
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch271', 271.0, 271
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch272', 272.0, 272
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch273', 273.0, 273
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch274', 274.0, 274
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch275', 275.0, 275
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch276', 276.0, 276
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch277', 277.0, 277
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch278', 278.0, 278
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch279', 279.0, 279
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch280', 280.0, 280
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch281', 281.0, 281
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch282', 282.0, 282
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch283', 283.0, 283
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch284', 284.0, 284
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch285', 285.0, 285
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch286', 286.0, 286
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch287', 287.0, 287
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch288', 288.0, 288
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch289', 289.0, 289
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch290', 290.0, 290
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch291', 291.0, 291
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch292', 292.0, 292
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch293', 293.0, 293
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch294', 294.0, 294
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch295', 295.0, 295
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch296', 296.0, 296
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch297', 297.0, 297
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch298', 298.0, 298
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch299', 299.0, 299
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch300', 300.0, 300
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch301', 301.0, 301
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch302', 302.0, 302
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch303', 303.0, 303
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch304', 304.0, 304
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch305', 305.0, 305
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch306', 306.0, 306
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch307', 307.0, 307
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch308', 308.0, 308
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch309', 309.0, 309
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch310', 310.0, 310
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch311', 311.0, 311
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch312', 312.0, 312
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch313', 313.0, 313
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch314', 314.0, 314
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch315', 315.0, 315
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch316', 316.0, 316
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch317', 317.0, 317
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch318', 318.0, 318
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch319', 319.0, 319
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch320', 320.0, 320
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch321', 321.0, 321
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch322', 322.0, 322
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch323', 323.0, 323
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch324', 324.0, 324
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch325', 325.0, 325
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch326', 326.0, 326
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch327', 327.0, 327
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch328', 328.0, 328
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch329', 329.0, 329
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch330', 330.0, 330
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch331', 331.0, 331
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch332', 332.0, 332
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch333', 333.0, 333
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch334', 334.0, 334
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch335', 335.0, 335
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch336', 336.0, 336
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch337', 337.0, 337
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch338', 338.0, 338
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch339', 339.0, 339
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch340', 340.0, 340
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch341', 341.0, 341
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch342', 342.0, 342
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch343', 343.0, 343
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch344', 344.0, 344
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch345', 345.0, 345
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch346', 346.0, 346
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch347', 347.0, 347
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch348', 348.0, 348
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch349', 349.0, 349
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch350', 350.0, 350
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch351', 351.0, 351
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch352', 352.0, 352
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch353', 353.0, 353
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch354', 354.0, 354
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch355', 355.0, 355
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch356', 356.0, 356
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch357', 357.0, 357
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch358', 358.0, 358
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch359', 359.0, 359
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch360', 360.0, 360
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch361', 361.0, 361
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch362', 362.0, 362
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch363', 363.0, 363
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch364', 364.0, 364
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch365', 365.0, 365
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch366', 366.0, 366
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch367', 367.0, 367
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch368', 368.0, 368
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch369', 369.0, 369
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch370', 370.0, 370
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch371', 371.0, 371
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch372', 372.0, 372
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch373', 373.0, 373
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch374', 374.0, 374
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch375', 375.0, 375
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch376', 376.0, 376
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch377', 377.0, 377
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch378', 378.0, 378
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch379', 379.0, 379
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch380', 380.0, 380
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch381', 381.0, 381
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch382', 382.0, 382
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch383', 383.0, 383
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch384', 384.0, 384
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch385', 385.0, 385
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch386', 386.0, 386
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch387', 387.0, 387
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch388', 388.0, 388
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch389', 389.0, 389
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch390', 390.0, 390
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch391', 391.0, 391
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch392', 392.0, 392
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch393', 393.0, 393
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch394', 394.0, 394
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch395', 395.0, 395
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch396', 396.0, 396
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch397', 397.0, 397
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch398', 398.0, 398
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch399', 399.0, 399
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch400', 400.0, 400
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch401', 401.0, 401
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch402', 402.0, 402
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch403', 403.0, 403
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch404', 404.0, 404
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch405', 405.0, 405
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch406', 406.0, 406
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch407', 407.0, 407
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch408', 408.0, 408
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch409', 409.0, 409
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch410', 410.0, 410
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch411', 411.0, 411
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch412', 412.0, 412
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch413', 413.0, 413
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch414', 414.0, 414
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch415', 415.0, 415
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch416', 416.0, 416
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch417', 417.0, 417
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch418', 418.0, 418
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch419', 419.0, 419
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch420', 420.0, 420
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch421', 421.0, 421
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch422', 422.0, 422
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch423', 423.0, 423
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch424', 424.0, 424
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch425', 425.0, 425
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch426', 426.0, 426
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch427', 427.0, 427
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch428', 428.0, 428
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch429', 429.0, 429
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch430', 430.0, 430
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch431', 431.0, 431
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch432', 432.0, 432
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch433', 433.0, 433
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch434', 434.0, 434
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch435', 435.0, 435
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch436', 436.0, 436
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch437', 437.0, 437
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch438', 438.0, 438
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch439', 439.0, 439
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch440', 440.0, 440
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch441', 441.0, 441
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch442', 442.0, 442
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch443', 443.0, 443
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch444', 444.0, 444
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch445', 445.0, 445
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch446', 446.0, 446
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch447', 447.0, 447
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch448', 448.0, 448
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch449', 449.0, 449
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch450', 450.0, 450
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch451', 451.0, 451
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch452', 452.0, 452
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch453', 453.0, 453
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch454', 454.0, 454
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch455', 455.0, 455
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch456', 456.0, 456
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch457', 457.0, 457
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch458', 458.0, 458
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch459', 459.0, 459
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch460', 460.0, 460
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch461', 461.0, 461
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch462', 462.0, 462
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch463', 463.0, 463
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch464', 464.0, 464
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch465', 465.0, 465
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch466', 466.0, 466
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch467', 467.0, 467
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch468', 468.0, 468
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch469', 469.0, 469
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch470', 470.0, 470
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch471', 471.0, 471
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch472', 472.0, 472
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch473', 473.0, 473
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch474', 474.0, 474
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch475', 475.0, 475
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch476', 476.0, 476
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch477', 477.0, 477
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch478', 478.0, 478
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch479', 479.0, 479
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch480', 480.0, 480
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch481', 481.0, 481
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch482', 482.0, 482
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch483', 483.0, 483
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch484', 484.0, 484
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch485', 485.0, 485
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch486', 486.0, 486
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch487', 487.0, 487
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch488', 488.0, 488
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch489', 489.0, 489
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch490', 490.0, 490
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch491', 491.0, 491
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch492', 492.0, 492
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch493', 493.0, 493
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch494', 494.0, 494
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch495', 495.0, 495
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch496', 496.0, 496
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch497', 497.0, 497
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch498', 498.0, 498
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch499', 499.0, 499
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch500', 500.0, 500
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch501', 501.0, 501
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch502', 502.0, 502
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch503', 503.0, 503
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch504', 504.0, 504
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch505', 505.0, 505
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch506', 506.0, 506
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch507', 507.0, 507
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch508', 508.0, 508
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch509', 509.0, 509
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch510', 510.0, 510
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch511', 511.0, 511
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch512', 512.0, 512
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch513', 513.0, 513
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch514', 514.0, 514
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch515', 515.0, 515
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch516', 516.0, 516
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch517', 517.0, 517
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch518', 518.0, 518
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch519', 519.0, 519
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch520', 520.0, 520
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch521', 521.0, 521
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch522', 522.0, 522
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch523', 523.0, 523
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch524', 524.0, 524
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch525', 525.0, 525
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch526', 526.0, 526
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch527', 527.0, 527
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch528', 528.0, 528
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch529', 529.0, 529
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch530', 530.0, 530
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch531', 531.0, 531
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch532', 532.0, 532
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch533', 533.0, 533
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch534', 534.0, 534
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch535', 535.0, 535
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch536', 536.0, 536
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch537', 537.0, 537
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch538', 538.0, 538
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch539', 539.0, 539
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch540', 540.0, 540
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch541', 541.0, 541
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch542', 542.0, 542
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch543', 543.0, 543
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch544', 544.0, 544
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch545', 545.0, 545
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch546', 546.0, 546
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch547', 547.0, 547
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch548', 548.0, 548
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch549', 549.0, 549
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch550', 550.0, 550
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch551', 551.0, 551
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch552', 552.0, 552
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch553', 553.0, 553
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch554', 554.0, 554
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch555', 555.0, 555
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch556', 556.0, 556
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch557', 557.0, 557
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch558', 558.0, 558
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch559', 559.0, 559
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch560', 560.0, 560
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch561', 561.0, 561
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch562', 562.0, 562
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch563', 563.0, 563
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch564', 564.0, 564
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch565', 565.0, 565
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch566', 566.0, 566
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch567', 567.0, 567
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch568', 568.0, 568
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch569', 569.0, 569
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch570', 570.0, 570
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch571', 571.0, 571
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch572', 572.0, 572
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch573', 573.0, 573
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch574', 574.0, 574
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch575', 575.0, 575
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch576', 576.0, 576
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch577', 577.0, 577
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch578', 578.0, 578
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch579', 579.0, 579
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch580', 580.0, 580
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch581', 581.0, 581
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch582', 582.0, 582
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch583', 583.0, 583
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch584', 584.0, 584
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch585', 585.0, 585
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch586', 586.0, 586
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch587', 587.0, 587
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch588', 588.0, 588
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch589', 589.0, 589
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch590', 590.0, 590
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch591', 591.0, 591
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch592', 592.0, 592
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch593', 593.0, 593
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch594', 594.0, 594
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch595', 595.0, 595
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch596', 596.0, 596
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch597', 597.0, 597
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch598', 598.0, 598
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch599', 599.0, 599
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch600', 600.0, 600
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch601', 601.0, 601
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch602', 602.0, 602
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch603', 603.0, 603
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch604', 604.0, 604
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch605', 605.0, 605
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch606', 606.0, 606
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch607', 607.0, 607
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch608', 608.0, 608
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch609', 609.0, 609
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch610', 610.0, 610
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch611', 611.0, 611
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch612', 612.0, 612
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch613', 613.0, 613
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch614', 614.0, 614
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch615', 615.0, 615
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch616', 616.0, 616
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch617', 617.0, 617
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch618', 618.0, 618
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch619', 619.0, 619
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch620', 620.0, 620
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch621', 621.0, 621
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch622', 622.0, 622
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch623', 623.0, 623
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch624', 624.0, 624
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch625', 625.0, 625
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch626', 626.0, 626
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch627', 627.0, 627
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch628', 628.0, 628
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch629', 629.0, 629
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch630', 630.0, 630
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch631', 631.0, 631
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch632', 632.0, 632
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch633', 633.0, 633
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch634', 634.0, 634
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch635', 635.0, 635
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch636', 636.0, 636
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch637', 637.0, 637
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch638', 638.0, 638
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch639', 639.0, 639
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch640', 640.0, 640
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch641', 641.0, 641
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch642', 642.0, 642
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch643', 643.0, 643
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch644', 644.0, 644
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch645', 645.0, 645
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch646', 646.0, 646
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch647', 647.0, 647
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch648', 648.0, 648
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch649', 649.0, 649
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch650', 650.0, 650
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch651', 651.0, 651
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch652', 652.0, 652
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch653', 653.0, 653
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch654', 654.0, 654
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch655', 655.0, 655
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch656', 656.0, 656
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch657', 657.0, 657
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch658', 658.0, 658
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch659', 659.0, 659
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch660', 660.0, 660
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch661', 661.0, 661
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch662', 662.0, 662
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch663', 663.0, 663
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch664', 664.0, 664
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch665', 665.0, 665
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch666', 666.0, 666
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch667', 667.0, 667
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch668', 668.0, 668
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch669', 669.0, 669
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch670', 670.0, 670
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch671', 671.0, 671
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch672', 672.0, 672
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch673', 673.0, 673
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch674', 674.0, 674
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch675', 675.0, 675
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch676', 676.0, 676
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch677', 677.0, 677
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch678', 678.0, 678
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch679', 679.0, 679
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch680', 680.0, 680
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch681', 681.0, 681
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch682', 682.0, 682
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch683', 683.0, 683
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch684', 684.0, 684
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch685', 685.0, 685
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch686', 686.0, 686
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch687', 687.0, 687
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch688', 688.0, 688
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch689', 689.0, 689
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch690', 690.0, 690
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch691', 691.0, 691
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch692', 692.0, 692
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch693', 693.0, 693
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch694', 694.0, 694
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch695', 695.0, 695
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch696', 696.0, 696
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch697', 697.0, 697
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch698', 698.0, 698
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch699', 699.0, 699
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch700', 700.0, 700
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch701', 701.0, 701
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch702', 702.0, 702
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch703', 703.0, 703
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch704', 704.0, 704
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch705', 705.0, 705
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch706', 706.0, 706
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch707', 707.0, 707
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch708', 708.0, 708
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch709', 709.0, 709
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch710', 710.0, 710
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch711', 711.0, 711
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch712', 712.0, 712
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch713', 713.0, 713
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch714', 714.0, 714
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch715', 715.0, 715
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch716', 716.0, 716
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch717', 717.0, 717
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch718', 718.0, 718
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch719', 719.0, 719
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch720', 720.0, 720
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch721', 721.0, 721
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch722', 722.0, 722
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch723', 723.0, 723
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch724', 724.0, 724
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch725', 725.0, 725
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch726', 726.0, 726
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch727', 727.0, 727
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch728', 728.0, 728
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch729', 729.0, 729
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch730', 730.0, 730
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch731', 731.0, 731
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch732', 732.0, 732
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch733', 733.0, 733
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch734', 734.0, 734
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch735', 735.0, 735
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch736', 736.0, 736
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch737', 737.0, 737
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch738', 738.0, 738
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch739', 739.0, 739
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch740', 740.0, 740
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch741', 741.0, 741
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch742', 742.0, 742
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch743', 743.0, 743
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch744', 744.0, 744
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch745', 745.0, 745
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch746', 746.0, 746
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch747', 747.0, 747
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch748', 748.0, 748
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch749', 749.0, 749
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch750', 750.0, 750
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch751', 751.0, 751
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch752', 752.0, 752
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch753', 753.0, 753
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch754', 754.0, 754
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch755', 755.0, 755
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch756', 756.0, 756
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch757', 757.0, 757
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch758', 758.0, 758
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch759', 759.0, 759
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch760', 760.0, 760
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch761', 761.0, 761
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch762', 762.0, 762
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch763', 763.0, 763
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch764', 764.0, 764
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch765', 765.0, 765
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch766', 766.0, 766
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch767', 767.0, 767
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch768', 768.0, 768
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch769', 769.0, 769
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch770', 770.0, 770
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch771', 771.0, 771
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch772', 772.0, 772
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch773', 773.0, 773
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch774', 774.0, 774
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch775', 775.0, 775
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch776', 776.0, 776
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch777', 777.0, 777
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch778', 778.0, 778
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch779', 779.0, 779
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch780', 780.0, 780
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch781', 781.0, 781
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch782', 782.0, 782
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch783', 783.0, 783
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch784', 784.0, 784
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch785', 785.0, 785
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch786', 786.0, 786
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch787', 787.0, 787
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch788', 788.0, 788
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch789', 789.0, 789
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch790', 790.0, 790
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch791', 791.0, 791
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch792', 792.0, 792
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch793', 793.0, 793
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch794', 794.0, 794
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch795', 795.0, 795
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch796', 796.0, 796
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch797', 797.0, 797
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch798', 798.0, 798
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch799', 799.0, 799
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch800', 800.0, 800
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch801', 801.0, 801
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch802', 802.0, 802
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch803', 803.0, 803
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch804', 804.0, 804
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch805', 805.0, 805
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch806', 806.0, 806
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch807', 807.0, 807
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch808', 808.0, 808
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch809', 809.0, 809
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch810', 810.0, 810
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch811', 811.0, 811
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch812', 812.0, 812
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch813', 813.0, 813
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch814', 814.0, 814
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch815', 815.0, 815
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch816', 816.0, 816
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch817', 817.0, 817
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch818', 818.0, 818
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch819', 819.0, 819
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch820', 820.0, 820
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch821', 821.0, 821
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch822', 822.0, 822
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch823', 823.0, 823
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch824', 824.0, 824
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch825', 825.0, 825
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch826', 826.0, 826
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch827', 827.0, 827
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch828', 828.0, 828
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch829', 829.0, 829
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch830', 830.0, 830
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch831', 831.0, 831
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch832', 832.0, 832
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch833', 833.0, 833
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch834', 834.0, 834
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch835', 835.0, 835
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch836', 836.0, 836
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch837', 837.0, 837
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch838', 838.0, 838
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch839', 839.0, 839
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch840', 840.0, 840
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch841', 841.0, 841
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch842', 842.0, 842
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch843', 843.0, 843
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch844', 844.0, 844
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch845', 845.0, 845
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch846', 846.0, 846
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch847', 847.0, 847
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch848', 848.0, 848
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch849', 849.0, 849
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch850', 850.0, 850
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch851', 851.0, 851
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch852', 852.0, 852
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch853', 853.0, 853
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch854', 854.0, 854
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch855', 855.0, 855
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch856', 856.0, 856
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch857', 857.0, 857
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch858', 858.0, 858
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch859', 859.0, 859
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch860', 860.0, 860
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch861', 861.0, 861
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch862', 862.0, 862
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch863', 863.0, 863
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch864', 864.0, 864
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch865', 865.0, 865
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch866', 866.0, 866
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch867', 867.0, 867
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch868', 868.0, 868
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch869', 869.0, 869
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch870', 870.0, 870
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch871', 871.0, 871
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch872', 872.0, 872
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch873', 873.0, 873
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch874', 874.0, 874
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch875', 875.0, 875
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch876', 876.0, 876
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch877', 877.0, 877
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch878', 878.0, 878
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch879', 879.0, 879
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch880', 880.0, 880
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch881', 881.0, 881
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch882', 882.0, 882
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch883', 883.0, 883
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch884', 884.0, 884
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch885', 885.0, 885
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch886', 886.0, 886
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch887', 887.0, 887
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch888', 888.0, 888
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch889', 889.0, 889
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch890', 890.0, 890
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch891', 891.0, 891
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch892', 892.0, 892
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch893', 893.0, 893
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch894', 894.0, 894
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch895', 895.0, 895
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch896', 896.0, 896
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch897', 897.0, 897
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch898', 898.0, 898
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch899', 899.0, 899
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch900', 900.0, 900
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch901', 901.0, 901
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch902', 902.0, 902
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch903', 903.0, 903
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch904', 904.0, 904
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch905', 905.0, 905
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch906', 906.0, 906
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch907', 907.0, 907
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch908', 908.0, 908
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch909', 909.0, 909
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch910', 910.0, 910
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch911', 911.0, 911
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch912', 912.0, 912
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch913', 913.0, 913
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch914', 914.0, 914
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch915', 915.0, 915
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch916', 916.0, 916
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch917', 917.0, 917
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch918', 918.0, 918
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch919', 919.0, 919
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch920', 920.0, 920
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch921', 921.0, 921
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch922', 922.0, 922
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch923', 923.0, 923
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch924', 924.0, 924
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch925', 925.0, 925
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch926', 926.0, 926
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch927', 927.0, 927
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch928', 928.0, 928
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch929', 929.0, 929
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch930', 930.0, 930
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch931', 931.0, 931
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch932', 932.0, 932
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch933', 933.0, 933
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch934', 934.0, 934
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch935', 935.0, 935
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch936', 936.0, 936
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch937', 937.0, 937
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch938', 938.0, 938
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch939', 939.0, 939
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch940', 940.0, 940
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch941', 941.0, 941
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch942', 942.0, 942
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch943', 943.0, 943
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch944', 944.0, 944
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch945', 945.0, 945
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch946', 946.0, 946
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch947', 947.0, 947
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch948', 948.0, 948
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch949', 949.0, 949
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch950', 950.0, 950
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch951', 951.0, 951
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch952', 952.0, 952
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch953', 953.0, 953
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch954', 954.0, 954
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch955', 955.0, 955
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch956', 956.0, 956
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch957', 957.0, 957
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch958', 958.0, 958
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch959', 959.0, 959
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch960', 960.0, 960
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch961', 961.0, 961
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch962', 962.0, 962
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch963', 963.0, 963
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch964', 964.0, 964
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch965', 965.0, 965
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch966', 966.0, 966
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch967', 967.0, 967
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch968', 968.0, 968
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch969', 969.0, 969
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch970', 970.0, 970
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch971', 971.0, 971
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch972', 972.0, 972
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch973', 973.0, 973
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch974', 974.0, 974
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch975', 975.0, 975
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch976', 976.0, 976
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch977', 977.0, 977
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch978', 978.0, 978
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch979', 979.0, 979
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch980', 980.0, 980
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch981', 981.0, 981
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch982', 982.0, 982
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch983', 983.0, 983
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch984', 984.0, 984
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch985', 985.0, 985
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch986', 986.0, 986
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch987', 987.0, 987
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch988', 988.0, 988
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch989', 989.0, 989
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch990', 990.0, 990
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch991', 991.0, 991
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch992', 992.0, 992
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch993', 993.0, 993
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch994', 994.0, 994
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch995', 995.0, 995
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch996', 996.0, 996
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch997', 997.0, 997
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch998', 998.0, 998
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch999', 999.0, 999
  );

  INSERT INTO products(
    name, price, vendor_id
  ) VALUES (
    'batch1000', 1000.0, 1000
  );

]] took 520 millis
2015-08-19 21:45:18.700 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@48b4b1bf] released
2015-08-19 21:45:18.700 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@282f0901] obtained in 0 millis
2015-08-19 21:45:18.703 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - About to parse: inline@4c744f80
2015-08-19 21:45:18.703 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Building AST
2015-08-19 21:45:18.704 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Creating templates
2015-08-19 21:45:18.738 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[SELECT * FROM products] took 13 millis
2015-08-19 21:45:18.788 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@282f0901] released
2015-08-19 21:45:18.832 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - Connecting with driver org.h2.Driver to jdbc:h2:mem:test
2015-08-19 21:45:18.833 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - class org.h2.Driver
2015-08-19 21:45:18.833 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - HikariCP pool HikariPool-1 configuration:
2015-08-19 21:45:18.833 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - allowPoolSuspension.............false
2015-08-19 21:45:18.834 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - autoCommit......................true
2015-08-19 21:45:18.834 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - catalog.........................
2015-08-19 21:45:18.834 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionCustomizer............com.zaxxer.hikari.AbstractHikariConfig$1@59f5db67
2015-08-19 21:45:18.834 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionCustomizerClassName...
2015-08-19 21:45:18.834 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionInitSql...............
2015-08-19 21:45:18.834 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTestQuery.............
2015-08-19 21:45:18.834 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTimeout...............30000
2015-08-19 21:45:18.834 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSource......................
2015-08-19 21:45:18.834 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceClassName.............
2015-08-19 21:45:18.834 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceJNDI..................
2015-08-19 21:45:18.834 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceProperties............{password=<masked>, dataSourceClassName=org.h2.Driver}
2015-08-19 21:45:18.835 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - driverClassName.................
2015-08-19 21:45:18.835 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckProperties...........{}
2015-08-19 21:45:18.835 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckRegistry.............
2015-08-19 21:45:18.835 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - idleTimeout.....................600000
2015-08-19 21:45:18.835 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - initializationFailFast..........true
2015-08-19 21:45:18.835 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - isolateInternalQueries..........false
2015-08-19 21:45:18.835 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbc4ConnectionTest.............false
2015-08-19 21:45:18.835 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbcUrl.........................jdbc:h2:mem:test
2015-08-19 21:45:18.835 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - leakDetectionThreshold..........0
2015-08-19 21:45:18.835 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maxLifetime.....................1800000
2015-08-19 21:45:18.836 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maximumPoolSize.................10
2015-08-19 21:45:18.836 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricRegistry..................
2015-08-19 21:45:18.836 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - minimumIdle.....................10
2015-08-19 21:45:18.836 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - password........................<masked>
2015-08-19 21:45:18.836 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - poolName........................HikariPool-1
2015-08-19 21:45:18.836 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - readOnly........................false
2015-08-19 21:45:18.836 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - registerMbeans..................false
2015-08-19 21:45:18.836 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - threadFactory...................
2015-08-19 21:45:18.837 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - transactionIsolation............
2015-08-19 21:45:18.837 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - username........................username
2015-08-19 21:45:18.837 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - validationTimeout...............5000
2015-08-19 21:45:18.838 [Test worker] INFO  com.zaxxer.hikari.HikariDataSource - HikariCP pool HikariPool-1 is starting.
2015-08-19 21:45:18.839 [Test worker] DEBUG com.zaxxer.hikari.pool.PoolUtilities - HikariPool-1 - Connection.setNetworkTimeout() not supported
2015-08-19 21:45:18.841 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@57c40032] obtained in 0 millis
2015-08-19 21:45:18.844 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[DROP TABLE IF EXISTS products] took 2 millis
2015-08-19 21:45:18.844 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@57c40032] released
2015-08-19 21:45:18.844 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@12e9e6f6] obtained in 0 millis
2015-08-19 21:45:18.845 [HikariCP connection filler (pool HikariPool-1)] DEBUG com.zaxxer.hikari.pool.HikariPool - After fill pool stats HikariPool-1 (total=10, inUse=1, avail=9, waiting=0)
2015-08-19 21:45:18.846 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[CREATE TABLE products (id int(11) NOT NULL AUTO_INCREMENT, name varchar(20) NOT NULL DEFAULT '', vendor_id int(11) NOT NULL, price decimal(10,4) unsigned NOT NULL DEFAULT '0.0000', PRIMARY KEY (`id`) )] took 0 millis
2015-08-19 21:45:18.846 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@12e9e6f6] released
2015-08-19 21:45:18.847 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@51ddf106] obtained in 0 millis
2015-08-19 21:45:18.849 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-08-19 21:45:18.849 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@51ddf106] released
2015-08-19 21:45:18.849 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@7bb1f063] obtained in 0 millis
2015-08-19 21:45:18.850 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-08-19 21:45:18.850 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@7bb1f063] released
2015-08-19 21:45:18.850 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@3aba7465] obtained in 0 millis
2015-08-19 21:45:18.851 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-08-19 21:45:18.851 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@3aba7465] released
2015-08-19 21:45:18.851 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@529a71ef] obtained in 0 millis
2015-08-19 21:45:18.852 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - About to parse: inline@4c744f80
2015-08-19 21:45:18.853 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Building AST
2015-08-19 21:45:18.854 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Creating templates
2015-08-19 21:45:18.857 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[SELECT * FROM products] took 0 millis
2015-08-19 21:45:18.862 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - Connecting with driver org.h2.Driver to jdbc:h2:mem:test
2015-08-19 21:45:18.862 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - class org.h2.Driver
2015-08-19 21:45:18.862 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - HikariCP pool HikariPool-2 configuration:
2015-08-19 21:45:18.863 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - allowPoolSuspension.............false
2015-08-19 21:45:18.863 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - autoCommit......................true
2015-08-19 21:45:18.863 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - catalog.........................
2015-08-19 21:45:18.863 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionCustomizer............com.zaxxer.hikari.AbstractHikariConfig$1@3ca25882
2015-08-19 21:45:18.863 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionCustomizerClassName...
2015-08-19 21:45:18.863 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionInitSql...............
2015-08-19 21:45:18.863 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTestQuery.............
2015-08-19 21:45:18.863 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTimeout...............30000
2015-08-19 21:45:18.864 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSource......................
2015-08-19 21:45:18.864 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceClassName.............
2015-08-19 21:45:18.864 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceJNDI..................
2015-08-19 21:45:18.864 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceProperties............{password=<masked>, dataSourceClassName=org.h2.Driver}
2015-08-19 21:45:18.864 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - driverClassName.................
2015-08-19 21:45:18.864 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckProperties...........{}
2015-08-19 21:45:18.864 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckRegistry.............
2015-08-19 21:45:18.864 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - idleTimeout.....................600000
2015-08-19 21:45:18.864 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - initializationFailFast..........true
2015-08-19 21:45:18.864 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - isolateInternalQueries..........false
2015-08-19 21:45:18.864 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbc4ConnectionTest.............false
2015-08-19 21:45:18.865 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbcUrl.........................jdbc:h2:mem:test
2015-08-19 21:45:18.865 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - leakDetectionThreshold..........0
2015-08-19 21:45:18.865 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maxLifetime.....................1800000
2015-08-19 21:45:18.865 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maximumPoolSize.................10
2015-08-19 21:45:18.865 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricRegistry..................
2015-08-19 21:45:18.865 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - minimumIdle.....................10
2015-08-19 21:45:18.865 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - password........................<masked>
2015-08-19 21:45:18.865 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - poolName........................HikariPool-2
2015-08-19 21:45:18.865 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - readOnly........................false
2015-08-19 21:45:18.865 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - registerMbeans..................false
2015-08-19 21:45:18.865 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - threadFactory...................
2015-08-19 21:45:18.866 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - transactionIsolation............
2015-08-19 21:45:18.866 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - username........................username
2015-08-19 21:45:18.866 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - validationTimeout...............5000
2015-08-19 21:45:18.866 [Test worker] INFO  com.zaxxer.hikari.HikariDataSource - HikariCP pool HikariPool-2 is starting.
2015-08-19 21:45:18.867 [Test worker] DEBUG com.zaxxer.hikari.pool.PoolUtilities - HikariPool-2 - Connection.setNetworkTimeout() not supported
2015-08-19 21:45:18.869 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@128eb0ad] obtained in 0 millis
2015-08-19 21:45:18.870 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[DROP TABLE IF EXISTS products] took 0 millis
2015-08-19 21:45:18.870 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@128eb0ad] released
2015-08-19 21:45:18.870 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@7aa0e058] obtained in 0 millis
2015-08-19 21:45:18.871 [HikariCP connection filler (pool HikariPool-2)] DEBUG com.zaxxer.hikari.pool.HikariPool - After fill pool stats HikariPool-2 (total=10, inUse=1, avail=9, waiting=0)
2015-08-19 21:45:18.872 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[CREATE TABLE products (id int(11) NOT NULL AUTO_INCREMENT, name varchar(20) NOT NULL DEFAULT '', vendor_id int(11) NOT NULL, price decimal(10,4) unsigned NOT NULL DEFAULT '0.0000', PRIMARY KEY (`id`) )] took 0 millis
2015-08-19 21:45:18.872 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@7aa0e058] released
2015-08-19 21:45:18.872 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@52884131] obtained in 0 millis
2015-08-19 21:45:18.873 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-08-19 21:45:18.873 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@52884131] released
2015-08-19 21:45:18.873 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@530c1e19] obtained in 0 millis
2015-08-19 21:45:18.874 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-08-19 21:45:18.874 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@530c1e19] released
2015-08-19 21:45:18.874 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@52ee78b2] obtained in 0 millis
2015-08-19 21:45:18.874 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-08-19 21:45:18.874 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@52ee78b2] released
2015-08-19 21:45:18.875 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@13b75123] obtained in 0 millis
2015-08-19 21:45:18.876 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - About to parse: inline@4c744f80
2015-08-19 21:45:18.876 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Building AST
2015-08-19 21:45:18.877 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Creating templates
2015-08-19 21:45:18.878 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[SELECT * FROM products] took 0 millis
2015-08-19 21:45:18.879 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - Connecting with driver org.h2.Driver to jdbc:h2:mem:test
2015-08-19 21:45:18.879 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - class org.h2.Driver
2015-08-19 21:45:18.879 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - HikariCP pool HikariPool-3 configuration:
2015-08-19 21:45:18.879 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - allowPoolSuspension.............false
2015-08-19 21:45:18.879 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - autoCommit......................true
2015-08-19 21:45:18.880 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - catalog.........................
2015-08-19 21:45:18.880 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionCustomizer............com.zaxxer.hikari.AbstractHikariConfig$1@6adddbbf
2015-08-19 21:45:18.880 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionCustomizerClassName...
2015-08-19 21:45:18.880 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionInitSql...............
2015-08-19 21:45:18.880 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTestQuery.............
2015-08-19 21:45:18.880 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTimeout...............30000
2015-08-19 21:45:18.880 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSource......................
2015-08-19 21:45:18.880 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceClassName.............
2015-08-19 21:45:18.880 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceJNDI..................
2015-08-19 21:45:18.880 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceProperties............{password=<masked>, dataSourceClassName=org.h2.Driver}
2015-08-19 21:45:18.880 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - driverClassName.................
2015-08-19 21:45:18.881 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckProperties...........{}
2015-08-19 21:45:18.881 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckRegistry.............
2015-08-19 21:45:18.881 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - idleTimeout.....................600000
2015-08-19 21:45:18.881 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - initializationFailFast..........true
2015-08-19 21:45:18.881 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - isolateInternalQueries..........false
2015-08-19 21:45:18.881 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbc4ConnectionTest.............false
2015-08-19 21:45:18.881 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbcUrl.........................jdbc:h2:mem:test
2015-08-19 21:45:18.881 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - leakDetectionThreshold..........0
2015-08-19 21:45:18.881 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maxLifetime.....................1800000
2015-08-19 21:45:18.881 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maximumPoolSize.................10
2015-08-19 21:45:18.881 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricRegistry..................
2015-08-19 21:45:18.881 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - minimumIdle.....................10
2015-08-19 21:45:18.882 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - password........................<masked>
2015-08-19 21:45:18.882 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - poolName........................HikariPool-3
2015-08-19 21:45:18.882 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - readOnly........................false
2015-08-19 21:45:18.882 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - registerMbeans..................false
2015-08-19 21:45:18.882 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - threadFactory...................
2015-08-19 21:45:18.882 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - transactionIsolation............
2015-08-19 21:45:18.882 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - username........................username
2015-08-19 21:45:18.882 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - validationTimeout...............5000
2015-08-19 21:45:18.882 [Test worker] INFO  com.zaxxer.hikari.HikariDataSource - HikariCP pool HikariPool-3 is starting.
2015-08-19 21:45:18.883 [Test worker] DEBUG com.zaxxer.hikari.pool.PoolUtilities - HikariPool-3 - Connection.setNetworkTimeout() not supported
2015-08-19 21:45:18.885 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@30819c94] obtained in 0 millis
2015-08-19 21:45:18.886 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[DROP TABLE IF EXISTS products] took 0 millis
2015-08-19 21:45:18.886 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@30819c94] released
2015-08-19 21:45:18.887 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@32eb6f82] obtained in 0 millis
2015-08-19 21:45:18.887 [HikariCP connection filler (pool HikariPool-3)] DEBUG com.zaxxer.hikari.pool.HikariPool - After fill pool stats HikariPool-3 (total=10, inUse=1, avail=9, waiting=0)
2015-08-19 21:45:18.888 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[CREATE TABLE products (id int(11) NOT NULL AUTO_INCREMENT, name varchar(20) NOT NULL DEFAULT '', vendor_id int(11) NOT NULL, price decimal(10,4) unsigned NOT NULL DEFAULT '0.0000', PRIMARY KEY (`id`) )] took 0 millis
2015-08-19 21:45:18.888 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@32eb6f82] released
2015-08-19 21:45:18.888 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@500d8240] obtained in 0 millis
2015-08-19 21:45:18.889 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-08-19 21:45:18.889 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@500d8240] released
2015-08-19 21:45:18.889 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@2644070b] obtained in 0 millis
2015-08-19 21:45:18.890 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-08-19 21:45:18.890 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@2644070b] released
2015-08-19 21:45:18.890 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@385a64f8] obtained in 0 millis
2015-08-19 21:45:18.890 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-08-19 21:45:18.891 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@385a64f8] released
2015-08-19 21:45:18.891 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@69478a61] obtained in 0 millis
2015-08-19 21:45:18.892 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - About to parse: inline@4c744f80
2015-08-19 21:45:18.893 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Building AST
2015-08-19 21:45:18.893 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Creating templates
2015-08-19 21:45:18.894 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[SELECT * FROM products] took 0 millis
2015-08-19 21:45:18.894 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@69478a61] released
2015-08-19 21:45:18.895 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - Connecting with driver org.h2.Driver to jdbc:h2:mem:test
2015-08-19 21:45:18.895 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - class org.h2.Driver
2015-08-19 21:45:18.895 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - HikariCP pool HikariPool-4 configuration:
2015-08-19 21:45:18.895 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - allowPoolSuspension.............false
2015-08-19 21:45:18.896 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - autoCommit......................true
2015-08-19 21:45:18.896 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - catalog.........................
2015-08-19 21:45:18.896 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionCustomizer............com.zaxxer.hikari.AbstractHikariConfig$1@4bb719e5
2015-08-19 21:45:18.896 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionCustomizerClassName...
2015-08-19 21:45:18.896 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionInitSql...............
2015-08-19 21:45:18.896 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTestQuery.............
2015-08-19 21:45:18.896 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTimeout...............30000
2015-08-19 21:45:18.896 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSource......................
2015-08-19 21:45:18.897 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceClassName.............
2015-08-19 21:45:18.897 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceJNDI..................
2015-08-19 21:45:18.897 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceProperties............{password=<masked>, dataSourceClassName=org.h2.Driver}
2015-08-19 21:45:18.897 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - driverClassName.................
2015-08-19 21:45:18.897 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckProperties...........{}
2015-08-19 21:45:18.897 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckRegistry.............
2015-08-19 21:45:18.897 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - idleTimeout.....................600000
2015-08-19 21:45:18.897 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - initializationFailFast..........true
2015-08-19 21:45:18.897 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - isolateInternalQueries..........false
2015-08-19 21:45:18.898 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbc4ConnectionTest.............false
2015-08-19 21:45:18.898 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbcUrl.........................jdbc:h2:mem:test
2015-08-19 21:45:18.898 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - leakDetectionThreshold..........0
2015-08-19 21:45:18.898 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maxLifetime.....................1800000
2015-08-19 21:45:18.898 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maximumPoolSize.................10
2015-08-19 21:45:18.898 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricRegistry..................
2015-08-19 21:45:18.898 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - minimumIdle.....................10
2015-08-19 21:45:18.898 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - password........................<masked>
2015-08-19 21:45:18.898 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - poolName........................HikariPool-4
2015-08-19 21:45:18.898 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - readOnly........................false
2015-08-19 21:45:18.898 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - registerMbeans..................false
2015-08-19 21:45:18.898 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - threadFactory...................
2015-08-19 21:45:18.898 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - transactionIsolation............
2015-08-19 21:45:18.899 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - username........................username
2015-08-19 21:45:18.899 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - validationTimeout...............5000
2015-08-19 21:45:18.899 [Test worker] INFO  com.zaxxer.hikari.HikariDataSource - HikariCP pool HikariPool-4 is starting.
2015-08-19 21:45:18.900 [Test worker] DEBUG com.zaxxer.hikari.pool.PoolUtilities - HikariPool-4 - Connection.setNetworkTimeout() not supported
2015-08-19 21:45:18.902 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@305e20e9] obtained in 0 millis
2015-08-19 21:45:18.903 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[DROP TABLE IF EXISTS products] took 0 millis
2015-08-19 21:45:18.903 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@305e20e9] released
2015-08-19 21:45:18.903 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@30918235] obtained in 0 millis
2015-08-19 21:45:18.904 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[CREATE TABLE products (id int(11) NOT NULL AUTO_INCREMENT, name varchar(20) NOT NULL DEFAULT '', vendor_id int(11) NOT NULL, price decimal(10,4) unsigned NOT NULL DEFAULT '0.0000', PRIMARY KEY (`id`) )] took 0 millis
2015-08-19 21:45:18.905 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@30918235] released
2015-08-19 21:45:18.905 [HikariCP connection filler (pool HikariPool-4)] DEBUG com.zaxxer.hikari.pool.HikariPool - After fill pool stats HikariPool-4 (total=10, inUse=1, avail=10, waiting=0)
2015-08-19 21:45:18.905 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@308a58d3] obtained in 0 millis
2015-08-19 21:45:18.905 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-08-19 21:45:18.905 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@308a58d3] released
2015-08-19 21:45:18.906 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@30468bcf] obtained in 0 millis
2015-08-19 21:45:18.906 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-08-19 21:45:18.907 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@30468bcf] released
2015-08-19 21:45:18.907 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@697f1fd7] obtained in 0 millis
2015-08-19 21:45:18.908 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-08-19 21:45:18.908 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@697f1fd7] released
2015-08-19 21:45:18.908 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@1cde1d56] obtained in 0 millis
2015-08-19 21:45:18.909 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[SELECT * FROM products] took 0 millis
2015-08-19 21:45:18.910 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - Connecting with driver org.h2.Driver to jdbc:h2:mem:test
2015-08-19 21:45:18.910 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - class org.h2.Driver
2015-08-19 21:45:18.911 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - HikariCP pool HikariPool-5 configuration:
2015-08-19 21:45:18.911 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - allowPoolSuspension.............false
2015-08-19 21:45:18.912 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - autoCommit......................true
2015-08-19 21:45:18.912 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - catalog.........................
2015-08-19 21:45:18.912 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionCustomizer............com.zaxxer.hikari.AbstractHikariConfig$1@56b1054
2015-08-19 21:45:18.912 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionCustomizerClassName...
2015-08-19 21:45:18.912 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionInitSql...............
2015-08-19 21:45:18.912 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTestQuery.............
2015-08-19 21:45:18.912 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTimeout...............30000
2015-08-19 21:45:18.912 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSource......................
2015-08-19 21:45:18.912 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceClassName.............
2015-08-19 21:45:18.912 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceJNDI..................
2015-08-19 21:45:18.913 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceProperties............{password=<masked>, dataSourceClassName=org.h2.Driver}
2015-08-19 21:45:18.913 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - driverClassName.................
2015-08-19 21:45:18.913 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckProperties...........{}
2015-08-19 21:45:18.913 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckRegistry.............
2015-08-19 21:45:18.913 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - idleTimeout.....................600000
2015-08-19 21:45:18.913 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - initializationFailFast..........true
2015-08-19 21:45:18.913 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - isolateInternalQueries..........false
2015-08-19 21:45:18.913 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbc4ConnectionTest.............false
2015-08-19 21:45:18.913 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbcUrl.........................jdbc:h2:mem:test
2015-08-19 21:45:18.913 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - leakDetectionThreshold..........0
2015-08-19 21:45:18.914 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maxLifetime.....................1800000
2015-08-19 21:45:18.914 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maximumPoolSize.................10
2015-08-19 21:45:18.914 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricRegistry..................
2015-08-19 21:45:18.914 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - minimumIdle.....................10
2015-08-19 21:45:18.914 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - password........................<masked>
2015-08-19 21:45:18.914 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - poolName........................HikariPool-5
2015-08-19 21:45:18.914 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - readOnly........................false
2015-08-19 21:45:18.914 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - registerMbeans..................false
2015-08-19 21:45:18.914 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - threadFactory...................
2015-08-19 21:45:18.914 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - transactionIsolation............
2015-08-19 21:45:18.914 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - username........................username
2015-08-19 21:45:18.914 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - validationTimeout...............5000
2015-08-19 21:45:18.915 [Test worker] INFO  com.zaxxer.hikari.HikariDataSource - HikariCP pool HikariPool-5 is starting.
2015-08-19 21:45:18.916 [Test worker] DEBUG com.zaxxer.hikari.pool.PoolUtilities - HikariPool-5 - Connection.setNetworkTimeout() not supported
2015-08-19 21:45:18.917 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@24afc4be] obtained in 0 millis
2015-08-19 21:45:18.918 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[DROP TABLE IF EXISTS products] took 0 millis
2015-08-19 21:45:18.919 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@24afc4be] released
2015-08-19 21:45:18.919 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@9ad2d50] obtained in 0 millis
2015-08-19 21:45:18.919 [HikariCP connection filler (pool HikariPool-5)] DEBUG com.zaxxer.hikari.pool.HikariPool - After fill pool stats HikariPool-5 (total=10, inUse=1, avail=9, waiting=0)
2015-08-19 21:45:18.920 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[CREATE TABLE products (id int(11) NOT NULL AUTO_INCREMENT, name varchar(20) NOT NULL DEFAULT '', vendor_id int(11) NOT NULL, price decimal(10,4) unsigned NOT NULL DEFAULT '0.0000', PRIMARY KEY (`id`) )] took 0 millis
2015-08-19 21:45:18.920 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@9ad2d50] released
2015-08-19 21:45:18.920 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@4a9fb2be] obtained in 0 millis
2015-08-19 21:45:18.921 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-08-19 21:45:18.921 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@4a9fb2be] released
2015-08-19 21:45:18.921 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@154854b4] obtained in 0 millis
2015-08-19 21:45:18.922 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-08-19 21:45:18.922 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@154854b4] released
2015-08-19 21:45:18.922 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@4ec92c36] obtained in 0 millis
2015-08-19 21:45:18.923 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-08-19 21:45:18.923 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@4ec92c36] released
2015-08-19 21:45:18.923 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@48ff5919] obtained in 0 millis
2015-08-19 21:45:18.924 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - About to parse: inline@4c744f80
2015-08-19 21:45:18.924 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Building AST
2015-08-19 21:45:18.925 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Creating templates
2015-08-19 21:45:18.926 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[SELECT * FROM products] took 0 millis
2015-08-19 21:45:18.926 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@48ff5919] released
2015-08-19 21:45:18.926 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - Connecting with driver org.h2.Driver to jdbc:h2:mem:test
2015-08-19 21:45:18.927 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - class org.h2.Driver
2015-08-19 21:45:18.927 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - HikariCP pool HikariPool-6 configuration:
2015-08-19 21:45:18.927 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - allowPoolSuspension.............false
2015-08-19 21:45:18.927 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - autoCommit......................true
2015-08-19 21:45:18.927 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - catalog.........................
2015-08-19 21:45:18.927 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionCustomizer............com.zaxxer.hikari.AbstractHikariConfig$1@20cc171c
2015-08-19 21:45:18.927 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionCustomizerClassName...
2015-08-19 21:45:18.927 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionInitSql...............
2015-08-19 21:45:18.927 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTestQuery.............
2015-08-19 21:45:18.927 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTimeout...............30000
2015-08-19 21:45:18.927 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSource......................
2015-08-19 21:45:18.927 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceClassName.............
2015-08-19 21:45:18.927 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceJNDI..................
2015-08-19 21:45:18.927 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceProperties............{password=<masked>, dataSourceClassName=org.h2.Driver}
2015-08-19 21:45:18.927 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - driverClassName.................
2015-08-19 21:45:18.927 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckProperties...........{}
2015-08-19 21:45:18.927 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckRegistry.............
2015-08-19 21:45:18.927 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - idleTimeout.....................600000
2015-08-19 21:45:18.927 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - initializationFailFast..........true
2015-08-19 21:45:18.928 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - isolateInternalQueries..........false
2015-08-19 21:45:18.928 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbc4ConnectionTest.............false
2015-08-19 21:45:18.928 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbcUrl.........................jdbc:h2:mem:test
2015-08-19 21:45:18.928 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - leakDetectionThreshold..........0
2015-08-19 21:45:18.928 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maxLifetime.....................1800000
2015-08-19 21:45:18.928 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maximumPoolSize.................10
2015-08-19 21:45:18.928 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricRegistry..................
2015-08-19 21:45:18.928 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - minimumIdle.....................10
2015-08-19 21:45:18.928 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - password........................<masked>
2015-08-19 21:45:18.928 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - poolName........................HikariPool-6
2015-08-19 21:45:18.928 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - readOnly........................false
2015-08-19 21:45:18.928 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - registerMbeans..................false
2015-08-19 21:45:18.928 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - threadFactory...................
2015-08-19 21:45:18.928 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - transactionIsolation............
2015-08-19 21:45:18.929 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - username........................username
2015-08-19 21:45:18.929 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - validationTimeout...............5000
2015-08-19 21:45:18.929 [Test worker] INFO  com.zaxxer.hikari.HikariDataSource - HikariCP pool HikariPool-6 is starting.
2015-08-19 21:45:18.930 [Test worker] DEBUG com.zaxxer.hikari.pool.PoolUtilities - HikariPool-6 - Connection.setNetworkTimeout() not supported
2015-08-19 21:45:18.931 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@2c1b410b] obtained in 0 millis
2015-08-19 21:45:18.932 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[DROP TABLE IF EXISTS products] took 0 millis
2015-08-19 21:45:18.932 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@2c1b410b] released
2015-08-19 21:45:18.932 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@85b9f45] obtained in 0 millis
2015-08-19 21:45:18.933 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[CREATE TABLE products (id int(11) NOT NULL AUTO_INCREMENT, name varchar(20) NOT NULL DEFAULT '', vendor_id int(11) NOT NULL, price decimal(10,4) unsigned NOT NULL DEFAULT '0.0000', PRIMARY KEY (`id`) )] took 1 millis
2015-08-19 21:45:18.934 [HikariCP connection filler (pool HikariPool-6)] DEBUG com.zaxxer.hikari.pool.HikariPool - After fill pool stats HikariPool-6 (total=10, inUse=1, avail=9, waiting=0)
2015-08-19 21:45:18.934 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@85b9f45] released
2015-08-19 21:45:18.935 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@44b6561c] obtained in 0 millis
2015-08-19 21:45:18.938 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-08-19 21:45:18.938 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@44b6561c] released
2015-08-19 21:45:18.938 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@667fd723] obtained in 0 millis
2015-08-19 21:45:18.938 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-08-19 21:45:18.938 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@667fd723] released
2015-08-19 21:45:18.939 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@19f07610] obtained in 0 millis
2015-08-19 21:45:18.939 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-08-19 21:45:18.939 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@19f07610] released
2015-08-19 21:45:18.939 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@28603425] obtained in 0 millis
2015-08-19 21:45:18.940 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[SELECT * FROM products] took 0 millis
2015-08-19 21:45:18.942 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - Connecting with driver org.h2.Driver to jdbc:h2:mem:test
2015-08-19 21:45:18.942 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - class org.h2.Driver
2015-08-19 21:45:18.942 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - HikariCP pool HikariPool-7 configuration:
2015-08-19 21:45:18.942 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - allowPoolSuspension.............false
2015-08-19 21:45:18.942 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - autoCommit......................true
2015-08-19 21:45:18.943 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - catalog.........................
2015-08-19 21:45:18.943 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionCustomizer............com.zaxxer.hikari.AbstractHikariConfig$1@2c1f7b05
2015-08-19 21:45:18.943 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionCustomizerClassName...
2015-08-19 21:45:18.943 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionInitSql...............
2015-08-19 21:45:18.943 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTestQuery.............
2015-08-19 21:45:18.943 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTimeout...............30000
2015-08-19 21:45:18.943 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSource......................
2015-08-19 21:45:18.943 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceClassName.............
2015-08-19 21:45:18.943 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceJNDI..................
2015-08-19 21:45:18.943 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceProperties............{password=<masked>, dataSourceClassName=org.h2.Driver}
2015-08-19 21:45:18.943 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - driverClassName.................
2015-08-19 21:45:18.943 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckProperties...........{}
2015-08-19 21:45:18.943 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckRegistry.............
2015-08-19 21:45:18.944 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - idleTimeout.....................600000
2015-08-19 21:45:18.944 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - initializationFailFast..........true
2015-08-19 21:45:18.944 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - isolateInternalQueries..........false
2015-08-19 21:45:18.944 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbc4ConnectionTest.............false
2015-08-19 21:45:18.944 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbcUrl.........................jdbc:h2:mem:test
2015-08-19 21:45:18.944 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - leakDetectionThreshold..........0
2015-08-19 21:45:18.944 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maxLifetime.....................1800000
2015-08-19 21:45:18.944 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maximumPoolSize.................10
2015-08-19 21:45:18.944 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricRegistry..................
2015-08-19 21:45:18.944 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - minimumIdle.....................10
2015-08-19 21:45:18.944 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - password........................<masked>
2015-08-19 21:45:18.944 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - poolName........................HikariPool-7
2015-08-19 21:45:18.944 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - readOnly........................false
2015-08-19 21:45:18.944 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - registerMbeans..................false
2015-08-19 21:45:18.944 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - threadFactory...................
2015-08-19 21:45:18.944 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - transactionIsolation............
2015-08-19 21:45:18.945 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - username........................username
2015-08-19 21:45:18.945 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - validationTimeout...............5000
2015-08-19 21:45:18.945 [Test worker] INFO  com.zaxxer.hikari.HikariDataSource - HikariCP pool HikariPool-7 is starting.
2015-08-19 21:45:18.946 [Test worker] DEBUG com.zaxxer.hikari.pool.PoolUtilities - HikariPool-7 - Connection.setNetworkTimeout() not supported
2015-08-19 21:45:18.949 [HikariCP connection filler (pool HikariPool-7)] DEBUG com.zaxxer.hikari.pool.HikariPool - After fill pool stats HikariPool-7 (total=10, inUse=0, avail=10, waiting=0)
2015-08-19 21:45:18.950 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@6c2f4564] obtained in 0 millis
2015-08-19 21:45:18.951 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[DROP TABLE IF EXISTS products] took 0 millis
2015-08-19 21:45:18.951 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@6c2f4564] released
2015-08-19 21:45:18.952 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@56f3725e] obtained in 0 millis
2015-08-19 21:45:18.953 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[CREATE TABLE products (id int(11) NOT NULL AUTO_INCREMENT, name varchar(20) NOT NULL DEFAULT '', vendor_id int(11) NOT NULL, price decimal(10,4) unsigned NOT NULL DEFAULT '0.0000', PRIMARY KEY (`id`) )] took 0 millis
2015-08-19 21:45:18.953 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@56f3725e] released
2015-08-19 21:45:18.953 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@1225498] obtained in 0 millis
2015-08-19 21:45:18.954 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-08-19 21:45:18.954 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@1225498] released
2015-08-19 21:45:18.954 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@4ae97c8] obtained in 0 millis
2015-08-19 21:45:18.954 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-08-19 21:45:18.954 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@4ae97c8] released
2015-08-19 21:45:18.955 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@2e7a6c3f] obtained in 0 millis
2015-08-19 21:45:18.955 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-08-19 21:45:18.955 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@2e7a6c3f] released
2015-08-19 21:45:18.955 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@4b2a4907] obtained in 0 millis
2015-08-19 21:45:18.956 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - About to parse: inline@4c744f80
2015-08-19 21:45:18.956 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Building AST
2015-08-19 21:45:18.957 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Creating templates
2015-08-19 21:45:18.958 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[SELECT * FROM products] took 0 millis
2015-08-19 21:45:18.961 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@4b2a4907] released
2015-08-19 21:45:18.961 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@1f477a82] obtained in 0 millis
2015-08-19 21:45:18.963 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - About to parse: inline@1126789b
2015-08-19 21:45:18.964 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Building AST
2015-08-19 21:45:18.964 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Creating templates
2015-08-19 21:45:18.966 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[DELETE FROM products] took 1 millis
2015-08-19 21:45:18.970 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@1f477a82] released
2015-08-19 21:45:18.971 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@4ebea8e7] obtained in 0 millis
2015-08-19 21:45:18.972 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - About to parse: inline@4c744f80
2015-08-19 21:45:18.972 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Building AST
2015-08-19 21:45:18.973 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Creating templates
2015-08-19 21:45:18.973 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[SELECT * FROM products] took 0 millis
2015-08-19 21:45:18.974 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@4ebea8e7] released
2015-08-19 21:45:18.974 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - Connecting with driver org.h2.Driver to jdbc:h2:mem:test
2015-08-19 21:45:18.974 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - class org.h2.Driver
2015-08-19 21:45:18.974 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - HikariCP pool HikariPool-8 configuration:
2015-08-19 21:45:18.974 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - allowPoolSuspension.............false
2015-08-19 21:45:18.974 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - autoCommit......................true
2015-08-19 21:45:18.974 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - catalog.........................
2015-08-19 21:45:18.975 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionCustomizer............com.zaxxer.hikari.AbstractHikariConfig$1@6739b34a
2015-08-19 21:45:18.975 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionCustomizerClassName...
2015-08-19 21:45:18.975 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionInitSql...............
2015-08-19 21:45:18.975 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTestQuery.............
2015-08-19 21:45:18.975 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTimeout...............30000
2015-08-19 21:45:18.975 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSource......................
2015-08-19 21:45:18.975 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceClassName.............
2015-08-19 21:45:18.975 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceJNDI..................
2015-08-19 21:45:18.975 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceProperties............{password=<masked>, dataSourceClassName=org.h2.Driver}
2015-08-19 21:45:18.975 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - driverClassName.................
2015-08-19 21:45:18.975 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckProperties...........{}
2015-08-19 21:45:18.975 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckRegistry.............
2015-08-19 21:45:18.975 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - idleTimeout.....................600000
2015-08-19 21:45:18.975 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - initializationFailFast..........true
2015-08-19 21:45:18.975 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - isolateInternalQueries..........false
2015-08-19 21:45:18.975 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbc4ConnectionTest.............false
2015-08-19 21:45:18.975 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbcUrl.........................jdbc:h2:mem:test
2015-08-19 21:45:18.975 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - leakDetectionThreshold..........0
2015-08-19 21:45:18.975 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maxLifetime.....................1800000
2015-08-19 21:45:18.975 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maximumPoolSize.................10
2015-08-19 21:45:18.975 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricRegistry..................
2015-08-19 21:45:18.976 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - minimumIdle.....................10
2015-08-19 21:45:18.976 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - password........................<masked>
2015-08-19 21:45:18.976 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - poolName........................HikariPool-8
2015-08-19 21:45:18.976 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - readOnly........................false
2015-08-19 21:45:18.976 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - registerMbeans..................false
2015-08-19 21:45:18.976 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - threadFactory...................
2015-08-19 21:45:18.976 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - transactionIsolation............
2015-08-19 21:45:18.976 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - username........................username
2015-08-19 21:45:18.977 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - validationTimeout...............5000
2015-08-19 21:45:18.977 [Test worker] INFO  com.zaxxer.hikari.HikariDataSource - HikariCP pool HikariPool-8 is starting.
2015-08-19 21:45:18.977 [Test worker] DEBUG com.zaxxer.hikari.pool.PoolUtilities - HikariPool-8 - Connection.setNetworkTimeout() not supported
2015-08-19 21:45:18.979 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@35201c12] obtained in 0 millis
2015-08-19 21:45:18.980 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[DROP TABLE IF EXISTS products] took 0 millis
2015-08-19 21:45:18.981 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@35201c12] released
2015-08-19 21:45:18.981 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@5ae471f0] obtained in 0 millis
2015-08-19 21:45:18.982 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[CREATE TABLE products (id int(11) NOT NULL AUTO_INCREMENT, name varchar(20) NOT NULL DEFAULT '', vendor_id int(11) NOT NULL, price decimal(10,4) unsigned NOT NULL DEFAULT '0.0000', PRIMARY KEY (`id`) )] took 0 millis
2015-08-19 21:45:18.982 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@5ae471f0] released
2015-08-19 21:45:18.982 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@e2c2de0] obtained in 0 millis
2015-08-19 21:45:18.983 [HikariCP connection filler (pool HikariPool-8)] DEBUG com.zaxxer.hikari.pool.HikariPool - After fill pool stats HikariPool-8 (total=10, inUse=1, avail=9, waiting=0)
2015-08-19 21:45:18.983 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-08-19 21:45:18.984 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@e2c2de0] released
2015-08-19 21:45:18.984 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@11aded36] obtained in 0 millis
2015-08-19 21:45:18.985 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-08-19 21:45:18.985 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@11aded36] released
2015-08-19 21:45:18.985 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@7cf5ec3a] obtained in 0 millis
2015-08-19 21:45:18.986 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-08-19 21:45:18.986 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@7cf5ec3a] released
2015-08-19 21:45:18.986 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@2f11a1ce] obtained in 0 millis
2015-08-19 21:45:18.987 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - About to parse: inline@4c744f80
2015-08-19 21:45:18.988 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Building AST
2015-08-19 21:45:18.989 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Creating templates
2015-08-19 21:45:18.989 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[SELECT * FROM products] took 0 millis
2015-08-19 21:45:18.994 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@2f11a1ce] released
2015-08-19 21:45:18.994 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@2be3368c] obtained in 0 millis
2015-08-19 21:45:18.995 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - About to parse: inline@507a281
2015-08-19 21:45:18.996 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Building AST
2015-08-19 21:45:18.997 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Creating templates
2015-08-19 21:45:19.000 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[DELETE FROM products WHERE id = ?] took 0 millis
2015-08-19 21:45:19.000 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@2be3368c] released
2015-08-19 21:45:19.000 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@3f70ce75] obtained in 0 millis
2015-08-19 21:45:19.001 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - About to parse: inline@4c744f80
2015-08-19 21:45:19.002 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Building AST
2015-08-19 21:45:19.004 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Creating templates
2015-08-19 21:45:19.005 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[SELECT * FROM products] took 0 millis
2015-08-19 21:45:19.008 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@3f70ce75] released
2015-08-19 21:45:19.010 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - Connecting with driver org.test.Driver to jdbc:h2:mem:test
2015-08-19 21:45:19.012 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - Connecting with driver org.test.Driver to jdbc:h2:mem:test
2015-08-19 21:45:19.017 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - Connecting with driver org.h2.Driver to jdbc:h2:mem:test
2015-08-19 21:45:19.017 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - class org.h2.Driver
2015-08-19 21:45:19.018 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - HikariCP pool HikariPool-9 configuration:
2015-08-19 21:45:19.018 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - allowPoolSuspension.............false
2015-08-19 21:45:19.018 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - autoCommit......................true
2015-08-19 21:45:19.018 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - catalog.........................
2015-08-19 21:45:19.018 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionCustomizer............com.zaxxer.hikari.AbstractHikariConfig$1@1a573d3f
2015-08-19 21:45:19.018 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionCustomizerClassName...
2015-08-19 21:45:19.018 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionInitSql...............
2015-08-19 21:45:19.018 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTestQuery.............
2015-08-19 21:45:19.018 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTimeout...............30000
2015-08-19 21:45:19.018 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSource......................
2015-08-19 21:45:19.018 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceClassName.............
2015-08-19 21:45:19.018 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceJNDI..................
2015-08-19 21:45:19.018 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceProperties............{password=<masked>, dataSourceClassName=org.h2.Driver}
2015-08-19 21:45:19.018 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - driverClassName.................
2015-08-19 21:45:19.018 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckProperties...........{}
2015-08-19 21:45:19.018 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckRegistry.............
2015-08-19 21:45:19.019 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - idleTimeout.....................600000
2015-08-19 21:45:19.019 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - initializationFailFast..........true
2015-08-19 21:45:19.019 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - isolateInternalQueries..........false
2015-08-19 21:45:19.019 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbc4ConnectionTest.............false
2015-08-19 21:45:19.019 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbcUrl.........................jdbc:h2:mem:test
2015-08-19 21:45:19.019 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - leakDetectionThreshold..........0
2015-08-19 21:45:19.019 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maxLifetime.....................1800000
2015-08-19 21:45:19.019 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maximumPoolSize.................10
2015-08-19 21:45:19.019 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricRegistry..................
2015-08-19 21:45:19.019 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - minimumIdle.....................10
2015-08-19 21:45:19.019 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - password........................<masked>
2015-08-19 21:45:19.019 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - poolName........................HikariPool-9
2015-08-19 21:45:19.019 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - readOnly........................false
2015-08-19 21:45:19.019 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - registerMbeans..................false
2015-08-19 21:45:19.019 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - threadFactory...................
2015-08-19 21:45:19.019 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - transactionIsolation............
2015-08-19 21:45:19.019 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - username........................username
2015-08-19 21:45:19.019 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - validationTimeout...............5000
2015-08-19 21:45:19.019 [Test worker] INFO  com.zaxxer.hikari.HikariDataSource - HikariCP pool HikariPool-9 is starting.
2015-08-19 21:45:19.020 [Test worker] DEBUG com.zaxxer.hikari.pool.PoolUtilities - HikariPool-9 - Connection.setNetworkTimeout() not supported
2015-08-19 21:45:19.022 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@24c7a9c] obtained in 0 millis
2015-08-19 21:45:19.024 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[DROP TABLE IF EXISTS something; create table something (id int primary key, name varchar(100))] took 0 millis
2015-08-19 21:45:19.024 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@24c7a9c] released
2015-08-19 21:45:19.024 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - Connecting with driver org.h2.Driver to jdbc:h2:mem:test
2015-08-19 21:45:19.024 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - class org.h2.Driver
2015-08-19 21:45:19.024 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - HikariCP pool HikariPool-10 configuration:
2015-08-19 21:45:19.024 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - allowPoolSuspension.............false
2015-08-19 21:45:19.025 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - autoCommit......................true
2015-08-19 21:45:19.025 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - catalog.........................
2015-08-19 21:45:19.025 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionCustomizer............com.zaxxer.hikari.AbstractHikariConfig$1@228ddc6e
2015-08-19 21:45:19.025 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionCustomizerClassName...
2015-08-19 21:45:19.025 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionInitSql...............
2015-08-19 21:45:19.025 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTestQuery.............
2015-08-19 21:45:19.025 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTimeout...............30000
2015-08-19 21:45:19.025 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSource......................
2015-08-19 21:45:19.025 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceClassName.............
2015-08-19 21:45:19.025 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceJNDI..................
2015-08-19 21:45:19.025 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceProperties............{password=<masked>, dataSourceClassName=org.h2.Driver}
2015-08-19 21:45:19.025 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - driverClassName.................
2015-08-19 21:45:19.025 [HikariCP connection filler (pool HikariPool-9)] DEBUG com.zaxxer.hikari.pool.HikariPool - After fill pool stats HikariPool-9 (total=10, inUse=0, avail=10, waiting=0)
2015-08-19 21:45:19.026 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckProperties...........{}
2015-08-19 21:45:19.026 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckRegistry.............
2015-08-19 21:45:19.026 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - idleTimeout.....................600000
2015-08-19 21:45:19.026 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - initializationFailFast..........true
2015-08-19 21:45:19.026 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - isolateInternalQueries..........false
2015-08-19 21:45:19.026 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbc4ConnectionTest.............false
2015-08-19 21:45:19.026 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbcUrl.........................jdbc:h2:mem:test
2015-08-19 21:45:19.026 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - leakDetectionThreshold..........0
2015-08-19 21:45:19.026 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maxLifetime.....................1800000
2015-08-19 21:45:19.026 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maximumPoolSize.................10
2015-08-19 21:45:19.026 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricRegistry..................
2015-08-19 21:45:19.026 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - minimumIdle.....................10
2015-08-19 21:45:19.027 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - password........................<masked>
2015-08-19 21:45:19.027 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - poolName........................HikariPool-10
2015-08-19 21:45:19.027 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - readOnly........................false
2015-08-19 21:45:19.027 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - registerMbeans..................false
2015-08-19 21:45:19.027 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - threadFactory...................
2015-08-19 21:45:19.027 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - transactionIsolation............
2015-08-19 21:45:19.027 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - username........................username
2015-08-19 21:45:19.027 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - validationTimeout...............5000
2015-08-19 21:45:19.027 [Test worker] INFO  com.zaxxer.hikari.HikariDataSource - HikariCP pool HikariPool-10 is starting.
2015-08-19 21:45:19.028 [Test worker] DEBUG com.zaxxer.hikari.pool.PoolUtilities - HikariPool-10 - Connection.setNetworkTimeout() not supported
2015-08-19 21:45:19.029 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@fa36e7b] obtained in 0 millis
2015-08-19 21:45:19.031 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[DROP TABLE IF EXISTS something; create table something (id int primary key, name varchar(100))] took 1 millis
2015-08-19 21:45:19.031 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@fa36e7b] released
2015-08-19 21:45:19.031 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@2424ee57] obtained in 0 millis
2015-08-19 21:45:19.032 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[insert into something (id, name) values (1, 'Brian')] took 0 millis
2015-08-19 21:45:19.032 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@2424ee57] released
2015-08-19 21:45:19.032 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@40b6445e] obtained in 0 millis
2015-08-19 21:45:19.032 [HikariCP connection filler (pool HikariPool-10)] DEBUG com.zaxxer.hikari.pool.HikariPool - After fill pool stats HikariPool-10 (total=10, inUse=1, avail=9, waiting=0)
2015-08-19 21:45:19.032 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[select name from something] took 0 millis
2015-08-19 21:45:19.033 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@40b6445e] released
2015-08-19 21:45:19.033 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - Connecting with driver org.h2.Driver to jdbc:h2:mem:test
2015-08-19 21:45:19.033 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - class org.h2.Driver
2015-08-19 21:45:19.033 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - HikariCP pool HikariPool-11 configuration:
2015-08-19 21:45:19.033 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - allowPoolSuspension.............false
2015-08-19 21:45:19.034 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - autoCommit......................true
2015-08-19 21:45:19.034 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - catalog.........................
2015-08-19 21:45:19.034 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionCustomizer............com.zaxxer.hikari.AbstractHikariConfig$1@70d8c80a
2015-08-19 21:45:19.034 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionCustomizerClassName...
2015-08-19 21:45:19.034 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionInitSql...............
2015-08-19 21:45:19.034 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTestQuery.............
2015-08-19 21:45:19.034 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTimeout...............30000
2015-08-19 21:45:19.034 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSource......................
2015-08-19 21:45:19.034 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceClassName.............
2015-08-19 21:45:19.035 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceJNDI..................
2015-08-19 21:45:19.035 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceProperties............{password=<masked>, dataSourceClassName=org.h2.Driver}
2015-08-19 21:45:19.035 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - driverClassName.................
2015-08-19 21:45:19.035 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckProperties...........{}
2015-08-19 21:45:19.035 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckRegistry.............
2015-08-19 21:45:19.035 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - idleTimeout.....................600000
2015-08-19 21:45:19.035 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - initializationFailFast..........true
2015-08-19 21:45:19.035 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - isolateInternalQueries..........false
2015-08-19 21:45:19.036 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbc4ConnectionTest.............false
2015-08-19 21:45:19.036 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbcUrl.........................jdbc:h2:mem:test
2015-08-19 21:45:19.036 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - leakDetectionThreshold..........0
2015-08-19 21:45:19.036 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maxLifetime.....................1800000
2015-08-19 21:45:19.036 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maximumPoolSize.................10
2015-08-19 21:45:19.036 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricRegistry..................
2015-08-19 21:45:19.036 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - minimumIdle.....................10
2015-08-19 21:45:19.036 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - password........................<masked>
2015-08-19 21:45:19.036 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - poolName........................HikariPool-11
2015-08-19 21:45:19.036 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - readOnly........................false
2015-08-19 21:45:19.036 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - registerMbeans..................false
2015-08-19 21:45:19.036 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - threadFactory...................
2015-08-19 21:45:19.036 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - transactionIsolation............
2015-08-19 21:45:19.036 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - username........................username
2015-08-19 21:45:19.036 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - validationTimeout...............5000
2015-08-19 21:45:19.037 [Test worker] INFO  com.zaxxer.hikari.HikariDataSource - HikariCP pool HikariPool-11 is starting.
2015-08-19 21:45:19.037 [Test worker] DEBUG com.zaxxer.hikari.pool.PoolUtilities - HikariPool-11 - Connection.setNetworkTimeout() not supported
2015-08-19 21:45:19.039 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@1f29d8c5] obtained in 0 millis
2015-08-19 21:45:19.040 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[DROP TABLE IF EXISTS something; create table something (id int primary key, name varchar(100))] took 0 millis
2015-08-19 21:45:19.040 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@1f29d8c5] released
2015-08-19 21:45:19.040 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@3fd903f1] obtained in 0 millis
2015-08-19 21:45:19.041 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[insert into something (id, name) values (1, 'Brian')] took 0 millis
2015-08-19 21:45:19.041 [HikariCP connection filler (pool HikariPool-11)] DEBUG com.zaxxer.hikari.pool.HikariPool - After fill pool stats HikariPool-11 (total=10, inUse=1, avail=9, waiting=0)
2015-08-19 21:45:19.041 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@3fd903f1] released
2015-08-19 21:45:19.044 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - Connecting with driver org.h2.Driver to jdbc:h2:mem:test
2015-08-19 21:45:19.045 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - class org.h2.Driver
2015-08-19 21:45:19.045 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - HikariCP pool HikariPool-12 configuration:
2015-08-19 21:45:19.046 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - allowPoolSuspension.............false
2015-08-19 21:45:19.046 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - autoCommit......................true
2015-08-19 21:45:19.046 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - catalog.........................
2015-08-19 21:45:19.047 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionCustomizer............com.zaxxer.hikari.AbstractHikariConfig$1@36ac85b0
2015-08-19 21:45:19.047 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionCustomizerClassName...
2015-08-19 21:45:19.047 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionInitSql...............
2015-08-19 21:45:19.047 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTestQuery.............
2015-08-19 21:45:19.047 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTimeout...............30000
2015-08-19 21:45:19.047 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSource......................
2015-08-19 21:45:19.047 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceClassName.............
2015-08-19 21:45:19.047 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceJNDI..................
2015-08-19 21:45:19.047 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceProperties............{password=<masked>, dataSourceClassName=org.h2.Driver}
2015-08-19 21:45:19.047 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - driverClassName.................
2015-08-19 21:45:19.047 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckProperties...........{}
2015-08-19 21:45:19.047 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckRegistry.............
2015-08-19 21:45:19.047 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - idleTimeout.....................600000
2015-08-19 21:45:19.048 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - initializationFailFast..........true
2015-08-19 21:45:19.048 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - isolateInternalQueries..........false
2015-08-19 21:45:19.048 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbc4ConnectionTest.............false
2015-08-19 21:45:19.048 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbcUrl.........................jdbc:h2:mem:test
2015-08-19 21:45:19.048 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - leakDetectionThreshold..........0
2015-08-19 21:45:19.048 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maxLifetime.....................1800000
2015-08-19 21:45:19.048 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maximumPoolSize.................10
2015-08-19 21:45:19.048 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricRegistry..................
2015-08-19 21:45:19.048 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - minimumIdle.....................10
2015-08-19 21:45:19.048 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - password........................<masked>
2015-08-19 21:45:19.048 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - poolName........................HikariPool-12
2015-08-19 21:45:19.048 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - readOnly........................false
2015-08-19 21:45:19.048 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - registerMbeans..................false
2015-08-19 21:45:19.048 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - threadFactory...................
2015-08-19 21:45:19.048 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - transactionIsolation............
2015-08-19 21:45:19.048 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - username........................username
2015-08-19 21:45:19.048 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - validationTimeout...............5000
2015-08-19 21:45:19.048 [Test worker] INFO  com.zaxxer.hikari.HikariDataSource - HikariCP pool HikariPool-12 is starting.
2015-08-19 21:45:19.049 [Test worker] DEBUG com.zaxxer.hikari.pool.PoolUtilities - HikariPool-12 - Connection.setNetworkTimeout() not supported
2015-08-19 21:45:19.051 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@15d1c88b] obtained in 0 millis
2015-08-19 21:45:19.052 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[DROP TABLE IF EXISTS products] took 0 millis
2015-08-19 21:45:19.053 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@15d1c88b] released
2015-08-19 21:45:19.053 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@767375a] obtained in 0 millis
2015-08-19 21:45:19.054 [HikariCP connection filler (pool HikariPool-12)] DEBUG com.zaxxer.hikari.pool.HikariPool - After fill pool stats HikariPool-12 (total=10, inUse=1, avail=9, waiting=0)
2015-08-19 21:45:19.055 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[CREATE TABLE products (id int(11) NOT NULL AUTO_INCREMENT, name varchar(20) NOT NULL DEFAULT '', vendor_id int(11) NOT NULL, price decimal(10,4) unsigned NOT NULL DEFAULT '0.0000', PRIMARY KEY (`id`) )] took 0 millis
2015-08-19 21:45:19.055 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@767375a] released
2015-08-19 21:45:19.055 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@6e7fdf64] obtained in 0 millis
2015-08-19 21:45:19.056 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-08-19 21:45:19.056 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@6e7fdf64] released
2015-08-19 21:45:19.056 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@5e07003] obtained in 0 millis
2015-08-19 21:45:19.057 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-08-19 21:45:19.057 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@5e07003] released
2015-08-19 21:45:19.057 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@22a14007] obtained in 0 millis
2015-08-19 21:45:19.057 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-08-19 21:45:19.057 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@22a14007] released
2015-08-19 21:45:19.057 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@28122deb] obtained in 0 millis
2015-08-19 21:45:19.058 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - About to parse: inline@4c744f80
2015-08-19 21:45:19.058 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Building AST
2015-08-19 21:45:19.059 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Creating templates
2015-08-19 21:45:19.059 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[SELECT * FROM products] took 0 millis
2015-08-19 21:45:19.061 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@28122deb] released
2015-08-19 21:45:19.062 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@14a264ae] obtained in 0 millis
2015-08-19 21:45:19.063 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - About to parse: inline@6ffdc663
2015-08-19 21:45:19.064 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Building AST
2015-08-19 21:45:19.065 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Creating templates
2015-08-19 21:45:19.065 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, vendor_id, price) VALUES (?, ?, ?)] took 0 millis
2015-08-19 21:45:19.067 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@14a264ae] released
2015-08-19 21:45:19.068 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - Connecting with driver org.h2.Driver to jdbc:h2:mem:test
2015-08-19 21:45:19.069 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - class org.h2.Driver
2015-08-19 21:45:19.069 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - HikariCP pool HikariPool-13 configuration:
2015-08-19 21:45:19.069 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - allowPoolSuspension.............false
2015-08-19 21:45:19.069 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - autoCommit......................true
2015-08-19 21:45:19.069 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - catalog.........................
2015-08-19 21:45:19.069 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionCustomizer............com.zaxxer.hikari.AbstractHikariConfig$1@75979184
2015-08-19 21:45:19.069 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionCustomizerClassName...
2015-08-19 21:45:19.069 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionInitSql...............
2015-08-19 21:45:19.069 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTestQuery.............
2015-08-19 21:45:19.069 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTimeout...............30000
2015-08-19 21:45:19.069 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSource......................
2015-08-19 21:45:19.069 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceClassName.............
2015-08-19 21:45:19.069 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceJNDI..................
2015-08-19 21:45:19.069 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceProperties............{password=<masked>, dataSourceClassName=org.h2.Driver}
2015-08-19 21:45:19.069 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - driverClassName.................
2015-08-19 21:45:19.069 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckProperties...........{}
2015-08-19 21:45:19.070 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckRegistry.............
2015-08-19 21:45:19.070 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - idleTimeout.....................600000
2015-08-19 21:45:19.070 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - initializationFailFast..........true
2015-08-19 21:45:19.070 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - isolateInternalQueries..........false
2015-08-19 21:45:19.070 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbc4ConnectionTest.............false
2015-08-19 21:45:19.070 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbcUrl.........................jdbc:h2:mem:test
2015-08-19 21:45:19.070 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - leakDetectionThreshold..........0
2015-08-19 21:45:19.070 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maxLifetime.....................1800000
2015-08-19 21:45:19.070 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maximumPoolSize.................10
2015-08-19 21:45:19.070 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricRegistry..................
2015-08-19 21:45:19.070 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - minimumIdle.....................10
2015-08-19 21:45:19.070 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - password........................<masked>
2015-08-19 21:45:19.070 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - poolName........................HikariPool-13
2015-08-19 21:45:19.070 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - readOnly........................false
2015-08-19 21:45:19.070 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - registerMbeans..................false
2015-08-19 21:45:19.070 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - threadFactory...................
2015-08-19 21:45:19.070 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - transactionIsolation............
2015-08-19 21:45:19.070 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - username........................username
2015-08-19 21:45:19.070 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - validationTimeout...............5000
2015-08-19 21:45:19.070 [Test worker] INFO  com.zaxxer.hikari.HikariDataSource - HikariCP pool HikariPool-13 is starting.
2015-08-19 21:45:19.071 [Test worker] DEBUG com.zaxxer.hikari.pool.PoolUtilities - HikariPool-13 - Connection.setNetworkTimeout() not supported
2015-08-19 21:45:19.074 [HikariCP connection filler (pool HikariPool-13)] DEBUG com.zaxxer.hikari.pool.HikariPool - After fill pool stats HikariPool-13 (total=10, inUse=0, avail=10, waiting=0)
2015-08-19 21:45:19.074 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - Connecting with driver org.h2.Driver to jdbc:h2:mem:test
2015-08-19 21:45:19.074 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - class org.h2.Driver
2015-08-19 21:45:19.074 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - HikariCP pool HikariPool-14 configuration:
2015-08-19 21:45:19.074 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - allowPoolSuspension.............false
2015-08-19 21:45:19.074 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - autoCommit......................true
2015-08-19 21:45:19.074 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - catalog.........................
2015-08-19 21:45:19.074 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionCustomizer............com.zaxxer.hikari.AbstractHikariConfig$1@1eab8109
2015-08-19 21:45:19.074 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionCustomizerClassName...
2015-08-19 21:45:19.074 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionInitSql...............
2015-08-19 21:45:19.074 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTestQuery.............
2015-08-19 21:45:19.074 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTimeout...............30000
2015-08-19 21:45:19.075 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSource......................
2015-08-19 21:45:19.075 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceClassName.............
2015-08-19 21:45:19.075 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceJNDI..................
2015-08-19 21:45:19.075 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceProperties............{password=<masked>, dataSourceClassName=org.h2.Driver}
2015-08-19 21:45:19.075 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - driverClassName.................
2015-08-19 21:45:19.075 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckProperties...........{}
2015-08-19 21:45:19.075 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckRegistry.............
2015-08-19 21:45:19.075 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - idleTimeout.....................600000
2015-08-19 21:45:19.075 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - initializationFailFast..........true
2015-08-19 21:45:19.075 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - isolateInternalQueries..........false
2015-08-19 21:45:19.075 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbc4ConnectionTest.............false
2015-08-19 21:45:19.075 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbcUrl.........................jdbc:h2:mem:test
2015-08-19 21:45:19.075 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - leakDetectionThreshold..........0
2015-08-19 21:45:19.075 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maxLifetime.....................1800000
2015-08-19 21:45:19.075 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maximumPoolSize.................10
2015-08-19 21:45:19.075 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricRegistry..................
2015-08-19 21:45:19.075 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - minimumIdle.....................10
2015-08-19 21:45:19.075 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - password........................<masked>
2015-08-19 21:45:19.075 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - poolName........................HikariPool-14
2015-08-19 21:45:19.076 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - readOnly........................false
2015-08-19 21:45:19.076 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - registerMbeans..................false
2015-08-19 21:45:19.076 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - threadFactory...................
2015-08-19 21:45:19.076 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - transactionIsolation............
2015-08-19 21:45:19.076 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - username........................username
2015-08-19 21:45:19.076 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - validationTimeout...............5000
2015-08-19 21:45:19.076 [Test worker] INFO  com.zaxxer.hikari.HikariDataSource - HikariCP pool HikariPool-14 is starting.
2015-08-19 21:45:19.077 [Test worker] DEBUG com.zaxxer.hikari.pool.PoolUtilities - HikariPool-14 - Connection.setNetworkTimeout() not supported
2015-08-19 21:45:19.079 [HikariCP connection filler (pool HikariPool-14)] DEBUG com.zaxxer.hikari.pool.HikariPool - After fill pool stats HikariPool-14 (total=10, inUse=0, avail=10, waiting=0)
2015-08-19 21:45:19.082 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - Connecting with driver org.h2.Driver to jdbc:h2:mem:test
2015-08-19 21:45:19.082 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - class org.h2.Driver
2015-08-19 21:45:19.082 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - HikariCP pool HikariPool-15 configuration:
2015-08-19 21:45:19.083 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - allowPoolSuspension.............false
2015-08-19 21:45:19.083 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - autoCommit......................true
2015-08-19 21:45:19.083 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - catalog.........................
2015-08-19 21:45:19.083 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionCustomizer............com.zaxxer.hikari.AbstractHikariConfig$1@de1dc32
2015-08-19 21:45:19.084 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionCustomizerClassName...
2015-08-19 21:45:19.084 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionInitSql...............
2015-08-19 21:45:19.084 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTestQuery.............
2015-08-19 21:45:19.085 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTimeout...............30000
2015-08-19 21:45:19.085 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSource......................
2015-08-19 21:45:19.085 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceClassName.............
2015-08-19 21:45:19.085 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceJNDI..................
2015-08-19 21:45:19.085 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceProperties............{password=<masked>, dataSourceClassName=org.h2.Driver}
2015-08-19 21:45:19.086 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - driverClassName.................
2015-08-19 21:45:19.086 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckProperties...........{}
2015-08-19 21:45:19.086 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckRegistry.............
2015-08-19 21:45:19.086 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - idleTimeout.....................600000
2015-08-19 21:45:19.087 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - initializationFailFast..........true
2015-08-19 21:45:19.087 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - isolateInternalQueries..........false
2015-08-19 21:45:19.088 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbc4ConnectionTest.............false
2015-08-19 21:45:19.088 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbcUrl.........................jdbc:h2:mem:test
2015-08-19 21:45:19.089 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - leakDetectionThreshold..........0
2015-08-19 21:45:19.089 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maxLifetime.....................1800000
2015-08-19 21:45:19.089 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maximumPoolSize.................10
2015-08-19 21:45:19.090 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricRegistry..................
2015-08-19 21:45:19.090 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - minimumIdle.....................10
2015-08-19 21:45:19.090 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - password........................<masked>
2015-08-19 21:45:19.091 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - poolName........................HikariPool-15
2015-08-19 21:45:19.091 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - readOnly........................false
2015-08-19 21:45:19.092 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - registerMbeans..................false
2015-08-19 21:45:19.092 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - threadFactory...................
2015-08-19 21:45:19.092 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - transactionIsolation............
2015-08-19 21:45:19.092 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - username........................username
2015-08-19 21:45:19.093 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - validationTimeout...............5000
2015-08-19 21:45:19.093 [Test worker] INFO  com.zaxxer.hikari.HikariDataSource - HikariCP pool HikariPool-15 is starting.
2015-08-19 21:45:19.093 [Test worker] DEBUG com.zaxxer.hikari.pool.PoolUtilities - HikariPool-15 - Connection.setNetworkTimeout() not supported
2015-08-19 21:45:19.094 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@2b0e1e7e] obtained in 0 millis
2015-08-19 21:45:19.095 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[DROP TABLE IF EXISTS products] took 0 millis
2015-08-19 21:45:19.095 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@2b0e1e7e] released
2015-08-19 21:45:19.095 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@79dab7e3] obtained in 0 millis
2015-08-19 21:45:19.095 [HikariCP connection filler (pool HikariPool-15)] DEBUG com.zaxxer.hikari.pool.HikariPool - After fill pool stats HikariPool-15 (total=10, inUse=1, avail=9, waiting=0)
2015-08-19 21:45:19.096 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[CREATE TABLE products (id int(11) NOT NULL AUTO_INCREMENT, name varchar(20) NOT NULL DEFAULT '', vendor_id int(11) NOT NULL, price decimal(10,4) unsigned NOT NULL DEFAULT '0.0000', PRIMARY KEY (`id`) )] took 0 millis
2015-08-19 21:45:19.096 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@79dab7e3] released
2015-08-19 21:45:19.096 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@235be32d] obtained in 0 millis
2015-08-19 21:45:19.097 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-08-19 21:45:19.097 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@235be32d] released
2015-08-19 21:45:19.097 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@48cc6cda] obtained in 0 millis
2015-08-19 21:45:19.097 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-08-19 21:45:19.097 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@48cc6cda] released
2015-08-19 21:45:19.097 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@2a3a5086] obtained in 0 millis
2015-08-19 21:45:19.097 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-08-19 21:45:19.098 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@2a3a5086] released
2015-08-19 21:45:19.098 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@2fbc054c] obtained in 0 millis
2015-08-19 21:45:19.099 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - About to parse: inline@186a09e1
2015-08-19 21:45:19.099 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Building AST
2015-08-19 21:45:19.100 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Creating templates
2015-08-19 21:45:19.102 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[SELECT * FROM products WHERE vendor_id = ? OR vendor_id = ?] took 0 millis
2015-08-19 21:45:19.103 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@2fbc054c] released
2015-08-19 21:45:19.104 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - Connecting with driver org.h2.Driver to jdbc:h2:mem:test
2015-08-19 21:45:19.104 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - class org.h2.Driver
2015-08-19 21:45:19.104 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - HikariCP pool HikariPool-16 configuration:
2015-08-19 21:45:19.104 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - allowPoolSuspension.............false
2015-08-19 21:45:19.104 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - autoCommit......................true
2015-08-19 21:45:19.104 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - catalog.........................
2015-08-19 21:45:19.104 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionCustomizer............com.zaxxer.hikari.AbstractHikariConfig$1@6866862
2015-08-19 21:45:19.104 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionCustomizerClassName...
2015-08-19 21:45:19.104 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionInitSql...............
2015-08-19 21:45:19.104 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTestQuery.............
2015-08-19 21:45:19.104 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTimeout...............30000
2015-08-19 21:45:19.104 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSource......................
2015-08-19 21:45:19.105 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceClassName.............
2015-08-19 21:45:19.105 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceJNDI..................
2015-08-19 21:45:19.105 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceProperties............{password=<masked>, dataSourceClassName=org.h2.Driver}
2015-08-19 21:45:19.105 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - driverClassName.................
2015-08-19 21:45:19.105 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckProperties...........{}
2015-08-19 21:45:19.105 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckRegistry.............
2015-08-19 21:45:19.105 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - idleTimeout.....................600000
2015-08-19 21:45:19.105 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - initializationFailFast..........true
2015-08-19 21:45:19.105 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - isolateInternalQueries..........false
2015-08-19 21:45:19.105 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbc4ConnectionTest.............false
2015-08-19 21:45:19.105 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbcUrl.........................jdbc:h2:mem:test
2015-08-19 21:45:19.105 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - leakDetectionThreshold..........0
2015-08-19 21:45:19.105 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maxLifetime.....................1800000
2015-08-19 21:45:19.105 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maximumPoolSize.................10
2015-08-19 21:45:19.105 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricRegistry..................
2015-08-19 21:45:19.105 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - minimumIdle.....................10
2015-08-19 21:45:19.105 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - password........................<masked>
2015-08-19 21:45:19.105 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - poolName........................HikariPool-16
2015-08-19 21:45:19.105 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - readOnly........................false
2015-08-19 21:45:19.105 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - registerMbeans..................false
2015-08-19 21:45:19.106 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - threadFactory...................
2015-08-19 21:45:19.106 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - transactionIsolation............
2015-08-19 21:45:19.106 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - username........................username
2015-08-19 21:45:19.106 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - validationTimeout...............5000
2015-08-19 21:45:19.106 [Test worker] INFO  com.zaxxer.hikari.HikariDataSource - HikariCP pool HikariPool-16 is starting.
2015-08-19 21:45:19.107 [Test worker] DEBUG com.zaxxer.hikari.pool.PoolUtilities - HikariPool-16 - Connection.setNetworkTimeout() not supported
2015-08-19 21:45:19.108 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@482ddae0] obtained in 0 millis
2015-08-19 21:45:19.109 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[DROP TABLE IF EXISTS products] took 0 millis
2015-08-19 21:45:19.110 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@482ddae0] released
2015-08-19 21:45:19.110 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@7312f484] obtained in 0 millis
2015-08-19 21:45:19.112 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[CREATE TABLE products (id int(11) NOT NULL AUTO_INCREMENT, name varchar(20) NOT NULL DEFAULT '', vendor_id int(11) NOT NULL, price decimal(10,4) unsigned NOT NULL DEFAULT '0.0000', PRIMARY KEY (`id`) )] took 1 millis
2015-08-19 21:45:19.113 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@7312f484] released
2015-08-19 21:45:19.113 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@c570e2f] obtained in 0 millis
2015-08-19 21:45:19.113 [HikariCP connection filler (pool HikariPool-16)] DEBUG com.zaxxer.hikari.pool.HikariPool - After fill pool stats HikariPool-16 (total=10, inUse=1, avail=9, waiting=0)
2015-08-19 21:45:19.113 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-08-19 21:45:19.113 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@c570e2f] released
2015-08-19 21:45:19.114 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@4b28c5f3] obtained in 0 millis
2015-08-19 21:45:19.114 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-08-19 21:45:19.114 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@4b28c5f3] released
2015-08-19 21:45:19.114 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@3cf78a35] obtained in 0 millis
2015-08-19 21:45:19.115 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-08-19 21:45:19.115 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@3cf78a35] released
2015-08-19 21:45:19.115 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@7871771e] obtained in 0 millis
2015-08-19 21:45:19.116 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - About to parse: inline@2d00c006
2015-08-19 21:45:19.116 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Building AST
2015-08-19 21:45:19.117 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Creating templates
2015-08-19 21:45:19.119 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[SELECT * FROM products WHERE id = ?] took 0 millis
2015-08-19 21:45:19.122 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@7871771e] released
2015-08-19 21:45:19.122 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - Connecting with driver org.h2.Driver to jdbc:h2:mem:test
2015-08-19 21:45:19.122 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - class org.h2.Driver
2015-08-19 21:45:19.122 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - HikariCP pool HikariPool-17 configuration:
2015-08-19 21:45:19.123 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - allowPoolSuspension.............false
2015-08-19 21:45:19.123 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - autoCommit......................true
2015-08-19 21:45:19.123 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - catalog.........................
2015-08-19 21:45:19.123 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionCustomizer............com.zaxxer.hikari.AbstractHikariConfig$1@7200b1ec
2015-08-19 21:45:19.123 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionCustomizerClassName...
2015-08-19 21:45:19.123 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionInitSql...............
2015-08-19 21:45:19.123 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTestQuery.............
2015-08-19 21:45:19.123 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTimeout...............30000
2015-08-19 21:45:19.123 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSource......................
2015-08-19 21:45:19.123 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceClassName.............
2015-08-19 21:45:19.123 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceJNDI..................
2015-08-19 21:45:19.123 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceProperties............{password=<masked>, dataSourceClassName=org.h2.Driver}
2015-08-19 21:45:19.123 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - driverClassName.................
2015-08-19 21:45:19.123 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckProperties...........{}
2015-08-19 21:45:19.123 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckRegistry.............
2015-08-19 21:45:19.123 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - idleTimeout.....................600000
2015-08-19 21:45:19.123 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - initializationFailFast..........true
2015-08-19 21:45:19.123 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - isolateInternalQueries..........false
2015-08-19 21:45:19.124 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbc4ConnectionTest.............false
2015-08-19 21:45:19.124 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbcUrl.........................jdbc:h2:mem:test
2015-08-19 21:45:19.124 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - leakDetectionThreshold..........0
2015-08-19 21:45:19.124 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maxLifetime.....................1800000
2015-08-19 21:45:19.124 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maximumPoolSize.................10
2015-08-19 21:45:19.124 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricRegistry..................
2015-08-19 21:45:19.124 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - minimumIdle.....................10
2015-08-19 21:45:19.124 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - password........................<masked>
2015-08-19 21:45:19.124 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - poolName........................HikariPool-17
2015-08-19 21:45:19.124 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - readOnly........................false
2015-08-19 21:45:19.124 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - registerMbeans..................false
2015-08-19 21:45:19.124 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - threadFactory...................
2015-08-19 21:45:19.124 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - transactionIsolation............
2015-08-19 21:45:19.124 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - username........................username
2015-08-19 21:45:19.124 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - validationTimeout...............5000
2015-08-19 21:45:19.124 [Test worker] INFO  com.zaxxer.hikari.HikariDataSource - HikariCP pool HikariPool-17 is starting.
2015-08-19 21:45:19.125 [Test worker] DEBUG com.zaxxer.hikari.pool.PoolUtilities - HikariPool-17 - Connection.setNetworkTimeout() not supported
2015-08-19 21:45:19.126 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@422ebc65] obtained in 0 millis
2015-08-19 21:45:19.127 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[DROP TABLE IF EXISTS products] took 0 millis
2015-08-19 21:45:19.127 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@422ebc65] released
2015-08-19 21:45:19.127 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@46363369] obtained in 0 millis
2015-08-19 21:45:19.128 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[CREATE TABLE products (id int(11) NOT NULL AUTO_INCREMENT, name varchar(20) NOT NULL DEFAULT '', vendor_id int(11) NOT NULL, price decimal(10,4) unsigned NOT NULL DEFAULT '0.0000', PRIMARY KEY (`id`) )] took 0 millis
2015-08-19 21:45:19.128 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@46363369] released
2015-08-19 21:45:19.128 [HikariCP connection filler (pool HikariPool-17)] DEBUG com.zaxxer.hikari.pool.HikariPool - After fill pool stats HikariPool-17 (total=10, inUse=1, avail=9, waiting=0)
2015-08-19 21:45:19.128 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@4a12a76e] obtained in 0 millis
2015-08-19 21:45:19.130 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 1 millis
2015-08-19 21:45:19.130 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@4a12a76e] released
2015-08-19 21:45:19.130 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@2f86c2a5] obtained in 0 millis
2015-08-19 21:45:19.130 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-08-19 21:45:19.130 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@2f86c2a5] released
2015-08-19 21:45:19.131 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@e7013c7] obtained in 0 millis
2015-08-19 21:45:19.131 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-08-19 21:45:19.131 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@e7013c7] released
2015-08-19 21:45:19.131 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@6f8a0d85] obtained in 0 millis
2015-08-19 21:45:19.132 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - About to parse: inline@4c744f80
2015-08-19 21:45:19.132 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Building AST
2015-08-19 21:45:19.132 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Creating templates
2015-08-19 21:45:19.133 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[SELECT * FROM products] took 0 millis
2015-08-19 21:45:19.135 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@6f8a0d85] released
2015-08-19 21:45:19.139 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - Connecting with driver org.h2.Driver to jdbc:h2:mem:test
2015-08-19 21:45:19.139 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - class org.h2.Driver
2015-08-19 21:45:19.139 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - HikariCP pool HikariPool-18 configuration:
2015-08-19 21:45:19.139 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - allowPoolSuspension.............false
2015-08-19 21:45:19.139 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - autoCommit......................true
2015-08-19 21:45:19.139 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - catalog.........................
2015-08-19 21:45:19.139 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionCustomizer............com.zaxxer.hikari.AbstractHikariConfig$1@1be4a68d
2015-08-19 21:45:19.139 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionCustomizerClassName...
2015-08-19 21:45:19.139 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionInitSql...............
2015-08-19 21:45:19.140 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTestQuery.............
2015-08-19 21:45:19.140 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTimeout...............30000
2015-08-19 21:45:19.140 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSource......................
2015-08-19 21:45:19.140 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceClassName.............
2015-08-19 21:45:19.140 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceJNDI..................
2015-08-19 21:45:19.140 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceProperties............{password=<masked>, dataSourceClassName=org.h2.Driver}
2015-08-19 21:45:19.140 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - driverClassName.................
2015-08-19 21:45:19.140 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckProperties...........{}
2015-08-19 21:45:19.140 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckRegistry.............
2015-08-19 21:45:19.140 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - idleTimeout.....................600000
2015-08-19 21:45:19.140 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - initializationFailFast..........true
2015-08-19 21:45:19.140 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - isolateInternalQueries..........false
2015-08-19 21:45:19.140 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbc4ConnectionTest.............false
2015-08-19 21:45:19.140 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbcUrl.........................jdbc:h2:mem:test
2015-08-19 21:45:19.140 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - leakDetectionThreshold..........0
2015-08-19 21:45:19.140 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maxLifetime.....................1800000
2015-08-19 21:45:19.140 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maximumPoolSize.................10
2015-08-19 21:45:19.140 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricRegistry..................
2015-08-19 21:45:19.140 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - minimumIdle.....................10
2015-08-19 21:45:19.140 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - password........................<masked>
2015-08-19 21:45:19.140 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - poolName........................HikariPool-18
2015-08-19 21:45:19.140 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - readOnly........................false
2015-08-19 21:45:19.140 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - registerMbeans..................false
2015-08-19 21:45:19.140 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - threadFactory...................
2015-08-19 21:45:19.140 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - transactionIsolation............
2015-08-19 21:45:19.140 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - username........................username
2015-08-19 21:45:19.140 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - validationTimeout...............5000
2015-08-19 21:45:19.141 [Test worker] INFO  com.zaxxer.hikari.HikariDataSource - HikariCP pool HikariPool-18 is starting.
2015-08-19 21:45:19.141 [Test worker] DEBUG com.zaxxer.hikari.pool.PoolUtilities - HikariPool-18 - Connection.setNetworkTimeout() not supported
2015-08-19 21:45:19.142 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@51b889a9] obtained in 0 millis
2015-08-19 21:45:19.143 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[DROP TABLE IF EXISTS products] took 0 millis
2015-08-19 21:45:19.143 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@51b889a9] released
2015-08-19 21:45:19.143 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@1a0d7066] obtained in 0 millis
2015-08-19 21:45:19.143 [HikariCP connection filler (pool HikariPool-18)] DEBUG com.zaxxer.hikari.pool.HikariPool - After fill pool stats HikariPool-18 (total=10, inUse=1, avail=9, waiting=0)
2015-08-19 21:45:19.144 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[CREATE TABLE products (id int(11) NOT NULL AUTO_INCREMENT, name varchar(20) NOT NULL DEFAULT '', vendor_id int(11) NOT NULL, price decimal(10,4) unsigned NOT NULL DEFAULT '0.0000', PRIMARY KEY (`id`) )] took 0 millis
2015-08-19 21:45:19.144 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@1a0d7066] released
2015-08-19 21:45:19.144 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@7df0249] obtained in 0 millis
2015-08-19 21:45:19.144 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-08-19 21:45:19.144 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@7df0249] released
2015-08-19 21:45:19.145 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@13c9b46a] obtained in 0 millis
2015-08-19 21:45:19.145 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-08-19 21:45:19.145 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@13c9b46a] released
2015-08-19 21:45:19.145 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@1c3e12c0] obtained in 0 millis
2015-08-19 21:45:19.145 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-08-19 21:45:19.145 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@1c3e12c0] released
2015-08-19 21:45:19.145 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@6ba18a8] obtained in 0 millis
2015-08-19 21:45:19.146 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - About to parse: inline@186a09e1
2015-08-19 21:45:19.146 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Building AST
2015-08-19 21:45:19.147 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Creating templates
2015-08-19 21:45:19.148 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[SELECT * FROM products WHERE vendor_id = ? OR vendor_id = ?] took 0 millis
2015-08-19 21:45:19.150 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@6ba18a8] released
2015-08-19 21:45:19.150 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - Connecting with driver org.h2.Driver to jdbc:h2:mem:test
2015-08-19 21:45:19.150 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - class org.h2.Driver
2015-08-19 21:45:19.151 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - HikariCP pool HikariPool-19 configuration:
2015-08-19 21:45:19.151 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - allowPoolSuspension.............false
2015-08-19 21:45:19.151 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - autoCommit......................true
2015-08-19 21:45:19.151 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - catalog.........................
2015-08-19 21:45:19.151 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionCustomizer............com.zaxxer.hikari.AbstractHikariConfig$1@4173358c
2015-08-19 21:45:19.151 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionCustomizerClassName...
2015-08-19 21:45:19.151 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionInitSql...............
2015-08-19 21:45:19.151 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTestQuery.............
2015-08-19 21:45:19.151 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTimeout...............30000
2015-08-19 21:45:19.151 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSource......................
2015-08-19 21:45:19.151 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceClassName.............
2015-08-19 21:45:19.151 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceJNDI..................
2015-08-19 21:45:19.151 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceProperties............{password=<masked>, dataSourceClassName=org.h2.Driver}
2015-08-19 21:45:19.151 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - driverClassName.................
2015-08-19 21:45:19.151 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckProperties...........{}
2015-08-19 21:45:19.151 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckRegistry.............
2015-08-19 21:45:19.152 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - idleTimeout.....................600000
2015-08-19 21:45:19.152 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - initializationFailFast..........true
2015-08-19 21:45:19.152 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - isolateInternalQueries..........false
2015-08-19 21:45:19.152 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbc4ConnectionTest.............false
2015-08-19 21:45:19.152 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbcUrl.........................jdbc:h2:mem:test
2015-08-19 21:45:19.152 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - leakDetectionThreshold..........0
2015-08-19 21:45:19.152 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maxLifetime.....................1800000
2015-08-19 21:45:19.152 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maximumPoolSize.................10
2015-08-19 21:45:19.152 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricRegistry..................
2015-08-19 21:45:19.152 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - minimumIdle.....................10
2015-08-19 21:45:19.152 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - password........................<masked>
2015-08-19 21:45:19.152 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - poolName........................HikariPool-19
2015-08-19 21:45:19.152 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - readOnly........................false
2015-08-19 21:45:19.152 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - registerMbeans..................false
2015-08-19 21:45:19.152 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - threadFactory...................
2015-08-19 21:45:19.152 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - transactionIsolation............
2015-08-19 21:45:19.152 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - username........................username
2015-08-19 21:45:19.152 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - validationTimeout...............5000
2015-08-19 21:45:19.152 [Test worker] INFO  com.zaxxer.hikari.HikariDataSource - HikariCP pool HikariPool-19 is starting.
2015-08-19 21:45:19.153 [Test worker] DEBUG com.zaxxer.hikari.pool.PoolUtilities - HikariPool-19 - Connection.setNetworkTimeout() not supported
2015-08-19 21:45:19.155 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@607d697] obtained in 0 millis
2015-08-19 21:45:19.156 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[DROP TABLE IF EXISTS products] took 0 millis
2015-08-19 21:45:19.157 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@607d697] released
2015-08-19 21:45:19.157 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@d7345d5] obtained in 0 millis
2015-08-19 21:45:19.157 [HikariCP connection filler (pool HikariPool-19)] DEBUG com.zaxxer.hikari.pool.HikariPool - After fill pool stats HikariPool-19 (total=10, inUse=1, avail=9, waiting=0)
2015-08-19 21:45:19.158 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[CREATE TABLE products (id int(11) NOT NULL AUTO_INCREMENT, name varchar(20) NOT NULL DEFAULT '', vendor_id int(11) NOT NULL, price decimal(10,4) unsigned NOT NULL DEFAULT '0.0000', PRIMARY KEY (`id`) )] took 0 millis
2015-08-19 21:45:19.158 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@d7345d5] released
2015-08-19 21:45:19.158 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@79b9f8ff] obtained in 0 millis
2015-08-19 21:45:19.158 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-08-19 21:45:19.158 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@79b9f8ff] released
2015-08-19 21:45:19.158 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@1feadbcf] obtained in 0 millis
2015-08-19 21:45:19.159 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-08-19 21:45:19.159 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@1feadbcf] released
2015-08-19 21:45:19.159 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@5d8d6db1] obtained in 0 millis
2015-08-19 21:45:19.159 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-08-19 21:45:19.159 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@5d8d6db1] released
2015-08-19 21:45:19.160 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@5cad1f6a] obtained in 0 millis
2015-08-19 21:45:19.160 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - About to parse: inline@2d00c006
2015-08-19 21:45:19.161 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Building AST
2015-08-19 21:45:19.162 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Creating templates
2015-08-19 21:45:19.162 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[SELECT * FROM products WHERE id = ?] took 0 millis
2015-08-19 21:45:19.165 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@5cad1f6a] released
2015-08-19 21:45:19.166 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - Connecting with driver org.h2.Driver to jdbc:h2:mem:test
2015-08-19 21:45:19.166 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - class org.h2.Driver
2015-08-19 21:45:19.167 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - HikariCP pool HikariPool-20 configuration:
2015-08-19 21:45:19.167 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - allowPoolSuspension.............false
2015-08-19 21:45:19.167 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - autoCommit......................true
2015-08-19 21:45:19.167 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - catalog.........................
2015-08-19 21:45:19.167 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionCustomizer............com.zaxxer.hikari.AbstractHikariConfig$1@3818f2af
2015-08-19 21:45:19.168 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionCustomizerClassName...
2015-08-19 21:45:19.168 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionInitSql...............
2015-08-19 21:45:19.168 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTestQuery.............
2015-08-19 21:45:19.168 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTimeout...............30000
2015-08-19 21:45:19.168 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSource......................
2015-08-19 21:45:19.168 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceClassName.............
2015-08-19 21:45:19.168 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceJNDI..................
2015-08-19 21:45:19.168 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceProperties............{password=<masked>, dataSourceClassName=org.h2.Driver}
2015-08-19 21:45:19.168 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - driverClassName.................
2015-08-19 21:45:19.168 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckProperties...........{}
2015-08-19 21:45:19.168 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckRegistry.............
2015-08-19 21:45:19.169 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - idleTimeout.....................600000
2015-08-19 21:45:19.169 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - initializationFailFast..........true
2015-08-19 21:45:19.169 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - isolateInternalQueries..........false
2015-08-19 21:45:19.169 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbc4ConnectionTest.............false
2015-08-19 21:45:19.169 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbcUrl.........................jdbc:h2:mem:test
2015-08-19 21:45:19.169 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - leakDetectionThreshold..........0
2015-08-19 21:45:19.169 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maxLifetime.....................1800000
2015-08-19 21:45:19.169 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maximumPoolSize.................10
2015-08-19 21:45:19.169 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricRegistry..................
2015-08-19 21:45:19.169 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - minimumIdle.....................10
2015-08-19 21:45:19.169 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - password........................<masked>
2015-08-19 21:45:19.169 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - poolName........................HikariPool-20
2015-08-19 21:45:19.170 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - readOnly........................false
2015-08-19 21:45:19.170 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - registerMbeans..................false
2015-08-19 21:45:19.170 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - threadFactory...................
2015-08-19 21:45:19.170 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - transactionIsolation............
2015-08-19 21:45:19.170 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - username........................username
2015-08-19 21:45:19.170 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - validationTimeout...............5000
2015-08-19 21:45:19.170 [Test worker] INFO  com.zaxxer.hikari.HikariDataSource - HikariCP pool HikariPool-20 is starting.
2015-08-19 21:45:19.171 [Test worker] DEBUG com.zaxxer.hikari.pool.PoolUtilities - HikariPool-20 - Connection.setNetworkTimeout() not supported
2015-08-19 21:45:19.173 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@756dfec2] obtained in 0 millis
2015-08-19 21:45:19.174 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[DROP TABLE IF EXISTS products] took 0 millis
2015-08-19 21:45:19.174 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@756dfec2] released
2015-08-19 21:45:19.174 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@a262b1e] obtained in 0 millis
2015-08-19 21:45:19.174 [HikariCP connection filler (pool HikariPool-20)] DEBUG com.zaxxer.hikari.pool.HikariPool - After fill pool stats HikariPool-20 (total=10, inUse=1, avail=9, waiting=0)
2015-08-19 21:45:19.175 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[CREATE TABLE products (id int(11) NOT NULL AUTO_INCREMENT, name varchar(20) NOT NULL DEFAULT '', vendor_id int(11) NOT NULL, price decimal(10,4) unsigned NOT NULL DEFAULT '0.0000', PRIMARY KEY (`id`) )] took 0 millis
2015-08-19 21:45:19.175 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@a262b1e] released
2015-08-19 21:45:19.175 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@365f4ab4] obtained in 0 millis
2015-08-19 21:45:19.176 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-08-19 21:45:19.176 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@365f4ab4] released
2015-08-19 21:45:19.177 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@27190934] obtained in 0 millis
2015-08-19 21:45:19.177 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-08-19 21:45:19.177 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@27190934] released
2015-08-19 21:45:19.177 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@3169e090] obtained in 0 millis
2015-08-19 21:45:19.178 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-08-19 21:45:19.178 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@3169e090] released
2015-08-19 21:45:19.179 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@76395fd5] obtained in 0 millis
2015-08-19 21:45:19.181 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - About to parse: inline@4c744f80
2015-08-19 21:45:19.181 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Building AST
2015-08-19 21:45:19.182 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Creating templates
2015-08-19 21:45:19.182 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[SELECT * FROM products] took 0 millis
2015-08-19 21:45:19.185 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@76395fd5] released
2015-08-19 21:45:19.187 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - Connecting with driver org.h2.Driver to jdbc:h2:mem:test
2015-08-19 21:45:19.188 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - class org.h2.Driver
2015-08-19 21:45:19.188 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - HikariCP pool HikariPool-21 configuration:
2015-08-19 21:45:19.188 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - allowPoolSuspension.............false
2015-08-19 21:45:19.188 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - autoCommit......................true
2015-08-19 21:45:19.188 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - catalog.........................
2015-08-19 21:45:19.188 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionCustomizer............com.zaxxer.hikari.AbstractHikariConfig$1@5972103a
2015-08-19 21:45:19.188 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionCustomizerClassName...
2015-08-19 21:45:19.188 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionInitSql...............
2015-08-19 21:45:19.188 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTestQuery.............
2015-08-19 21:45:19.188 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTimeout...............30000
2015-08-19 21:45:19.188 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSource......................
2015-08-19 21:45:19.188 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceClassName.............
2015-08-19 21:45:19.188 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceJNDI..................
2015-08-19 21:45:19.188 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceProperties............{password=<masked>, dataSourceClassName=org.h2.Driver}
2015-08-19 21:45:19.188 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - driverClassName.................
2015-08-19 21:45:19.188 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckProperties...........{}
2015-08-19 21:45:19.188 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckRegistry.............
2015-08-19 21:45:19.188 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - idleTimeout.....................600000
2015-08-19 21:45:19.188 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - initializationFailFast..........true
2015-08-19 21:45:19.188 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - isolateInternalQueries..........false
2015-08-19 21:45:19.188 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbc4ConnectionTest.............false
2015-08-19 21:45:19.188 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbcUrl.........................jdbc:h2:mem:test
2015-08-19 21:45:19.188 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - leakDetectionThreshold..........0
2015-08-19 21:45:19.188 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maxLifetime.....................1800000
2015-08-19 21:45:19.188 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maximumPoolSize.................10
2015-08-19 21:45:19.188 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricRegistry..................
2015-08-19 21:45:19.188 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - minimumIdle.....................10
2015-08-19 21:45:19.188 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - password........................<masked>
2015-08-19 21:45:19.188 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - poolName........................HikariPool-21
2015-08-19 21:45:19.188 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - readOnly........................false
2015-08-19 21:45:19.188 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - registerMbeans..................false
2015-08-19 21:45:19.188 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - threadFactory...................
2015-08-19 21:45:19.188 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - transactionIsolation............
2015-08-19 21:45:19.188 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - username........................username
2015-08-19 21:45:19.188 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - validationTimeout...............5000
2015-08-19 21:45:19.189 [Test worker] INFO  com.zaxxer.hikari.HikariDataSource - HikariCP pool HikariPool-21 is starting.
2015-08-19 21:45:19.190 [Test worker] DEBUG com.zaxxer.hikari.pool.PoolUtilities - HikariPool-21 - Connection.setNetworkTimeout() not supported
2015-08-19 21:45:19.191 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@49eb79fd] obtained in 0 millis
2015-08-19 21:45:19.193 [HikariCP connection filler (pool HikariPool-21)] DEBUG com.zaxxer.hikari.pool.HikariPool - After fill pool stats HikariPool-21 (total=10, inUse=1, avail=9, waiting=0)
2015-08-19 21:45:19.193 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[DROP TABLE IF EXISTS products] took 1 millis
2015-08-19 21:45:19.193 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@49eb79fd] released
2015-08-19 21:45:19.193 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@6316df13] obtained in 0 millis
2015-08-19 21:45:19.193 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[CREATE TABLE products (id int(11) NOT NULL AUTO_INCREMENT, name varchar(20) NOT NULL DEFAULT '', vendor_id int(11) NOT NULL, price decimal(10,4) unsigned NOT NULL DEFAULT '0.0000', PRIMARY KEY (`id`) )] took 0 millis
2015-08-19 21:45:19.194 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@6316df13] released
2015-08-19 21:45:19.194 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@6094bf76] obtained in 0 millis
2015-08-19 21:45:19.194 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-08-19 21:45:19.194 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@6094bf76] released
2015-08-19 21:45:19.194 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@47471bba] obtained in 0 millis
2015-08-19 21:45:19.195 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-08-19 21:45:19.195 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@47471bba] released
2015-08-19 21:45:19.195 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@4f8b71c0] obtained in 0 millis
2015-08-19 21:45:19.195 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-08-19 21:45:19.195 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@4f8b71c0] released
2015-08-19 21:45:19.195 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@3f2d950b] obtained in 0 millis
2015-08-19 21:45:19.196 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - About to parse: inline@44af029f
2015-08-19 21:45:19.196 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Building AST
2015-08-19 21:45:19.197 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Creating templates
2015-08-19 21:45:19.198 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[SELECT * FROM products
] took 0 millis
2015-08-19 21:45:19.200 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@3f2d950b] released
2015-08-19 21:45:19.200 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@2f3545ff] obtained in 0 millis
2015-08-19 21:45:19.201 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - About to parse: inline@44af029f
2015-08-19 21:45:19.201 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Building AST
2015-08-19 21:45:19.204 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Creating templates
2015-08-19 21:45:19.205 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[SELECT * FROM products

  WHERE id = ?] took 0 millis
2015-08-19 21:45:19.206 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@2f3545ff] released
2015-08-19 21:45:19.207 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - Connecting with driver org.h2.Driver to jdbc:h2:mem:test
2015-08-19 21:45:19.207 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - class org.h2.Driver
2015-08-19 21:45:19.207 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - HikariCP pool HikariPool-22 configuration:
2015-08-19 21:45:19.207 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - allowPoolSuspension.............false
2015-08-19 21:45:19.207 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - autoCommit......................true
2015-08-19 21:45:19.207 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - catalog.........................
2015-08-19 21:45:19.207 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionCustomizer............com.zaxxer.hikari.AbstractHikariConfig$1@63757ccf
2015-08-19 21:45:19.207 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionCustomizerClassName...
2015-08-19 21:45:19.207 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionInitSql...............
2015-08-19 21:45:19.207 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTestQuery.............
2015-08-19 21:45:19.207 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTimeout...............30000
2015-08-19 21:45:19.207 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSource......................
2015-08-19 21:45:19.207 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceClassName.............
2015-08-19 21:45:19.207 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceJNDI..................
2015-08-19 21:45:19.207 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceProperties............{password=<masked>, dataSourceClassName=org.h2.Driver}
2015-08-19 21:45:19.207 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - driverClassName.................
2015-08-19 21:45:19.207 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckProperties...........{}
2015-08-19 21:45:19.207 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckRegistry.............
2015-08-19 21:45:19.207 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - idleTimeout.....................600000
2015-08-19 21:45:19.207 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - initializationFailFast..........true
2015-08-19 21:45:19.208 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - isolateInternalQueries..........false
2015-08-19 21:45:19.208 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbc4ConnectionTest.............false
2015-08-19 21:45:19.208 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbcUrl.........................jdbc:h2:mem:test
2015-08-19 21:45:19.208 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - leakDetectionThreshold..........0
2015-08-19 21:45:19.208 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maxLifetime.....................1800000
2015-08-19 21:45:19.208 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maximumPoolSize.................10
2015-08-19 21:45:19.208 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricRegistry..................
2015-08-19 21:45:19.208 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - minimumIdle.....................10
2015-08-19 21:45:19.208 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - password........................<masked>
2015-08-19 21:45:19.208 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - poolName........................HikariPool-22
2015-08-19 21:45:19.208 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - readOnly........................false
2015-08-19 21:45:19.208 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - registerMbeans..................false
2015-08-19 21:45:19.208 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - threadFactory...................
2015-08-19 21:45:19.208 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - transactionIsolation............
2015-08-19 21:45:19.208 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - username........................username
2015-08-19 21:45:19.208 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - validationTimeout...............5000
2015-08-19 21:45:19.209 [Test worker] INFO  com.zaxxer.hikari.HikariDataSource - HikariCP pool HikariPool-22 is starting.
2015-08-19 21:45:19.209 [Test worker] DEBUG com.zaxxer.hikari.pool.PoolUtilities - HikariPool-22 - Connection.setNetworkTimeout() not supported
2015-08-19 21:45:19.211 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@36bb38e6] obtained in 0 millis
2015-08-19 21:45:19.211 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[DROP TABLE IF EXISTS products] took 0 millis
2015-08-19 21:45:19.212 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@36bb38e6] released
2015-08-19 21:45:19.212 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@585b79d1] obtained in 0 millis
2015-08-19 21:45:19.212 [HikariCP connection filler (pool HikariPool-22)] DEBUG com.zaxxer.hikari.pool.HikariPool - After fill pool stats HikariPool-22 (total=10, inUse=1, avail=9, waiting=0)
2015-08-19 21:45:19.214 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[CREATE TABLE products (id int(11) NOT NULL AUTO_INCREMENT, name varchar(20) NOT NULL DEFAULT '', vendor_id int(11) NOT NULL, price decimal(10,4) unsigned NOT NULL DEFAULT '0.0000', PRIMARY KEY (`id`) )] took 1 millis
2015-08-19 21:45:19.214 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@585b79d1] released
2015-08-19 21:45:19.214 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@3c4f1595] obtained in 0 millis
2015-08-19 21:45:19.215 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-08-19 21:45:19.215 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@3c4f1595] released
2015-08-19 21:45:19.216 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@48ac4195] obtained in 0 millis
2015-08-19 21:45:19.216 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-08-19 21:45:19.217 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@48ac4195] released
2015-08-19 21:45:19.217 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@78946ce6] obtained in 0 millis
2015-08-19 21:45:19.217 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-08-19 21:45:19.218 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@78946ce6] released
2015-08-19 21:45:19.220 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - Connecting with driver org.h2.Driver to jdbc:h2:mem:test
2015-08-19 21:45:19.220 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - class org.h2.Driver
2015-08-19 21:45:19.220 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - HikariCP pool HikariPool-23 configuration:
2015-08-19 21:45:19.221 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - allowPoolSuspension.............false
2015-08-19 21:45:19.221 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - autoCommit......................true
2015-08-19 21:45:19.221 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - catalog.........................
2015-08-19 21:45:19.221 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionCustomizer............com.zaxxer.hikari.AbstractHikariConfig$1@5ac31b81
2015-08-19 21:45:19.221 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionCustomizerClassName...
2015-08-19 21:45:19.221 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionInitSql...............
2015-08-19 21:45:19.221 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTestQuery.............
2015-08-19 21:45:19.221 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTimeout...............30000
2015-08-19 21:45:19.221 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSource......................
2015-08-19 21:45:19.221 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceClassName.............
2015-08-19 21:45:19.221 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceJNDI..................
2015-08-19 21:45:19.221 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceProperties............{password=<masked>, dataSourceClassName=org.h2.Driver}
2015-08-19 21:45:19.221 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - driverClassName.................
2015-08-19 21:45:19.221 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckProperties...........{}
2015-08-19 21:45:19.221 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckRegistry.............
2015-08-19 21:45:19.221 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - idleTimeout.....................600000
2015-08-19 21:45:19.221 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - initializationFailFast..........true
2015-08-19 21:45:19.221 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - isolateInternalQueries..........false
2015-08-19 21:45:19.221 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbc4ConnectionTest.............false
2015-08-19 21:45:19.221 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbcUrl.........................jdbc:h2:mem:test
2015-08-19 21:45:19.221 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - leakDetectionThreshold..........0
2015-08-19 21:45:19.222 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maxLifetime.....................1800000
2015-08-19 21:45:19.222 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maximumPoolSize.................10
2015-08-19 21:45:19.222 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricRegistry..................
2015-08-19 21:45:19.222 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - minimumIdle.....................10
2015-08-19 21:45:19.222 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - password........................<masked>
2015-08-19 21:45:19.222 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - poolName........................HikariPool-23
2015-08-19 21:45:19.222 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - readOnly........................false
2015-08-19 21:45:19.222 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - registerMbeans..................false
2015-08-19 21:45:19.222 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - threadFactory...................
2015-08-19 21:45:19.222 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - transactionIsolation............
2015-08-19 21:45:19.222 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - username........................username
2015-08-19 21:45:19.222 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - validationTimeout...............5000
2015-08-19 21:45:19.222 [Test worker] INFO  com.zaxxer.hikari.HikariDataSource - HikariCP pool HikariPool-23 is starting.
2015-08-19 21:45:19.223 [Test worker] DEBUG com.zaxxer.hikari.pool.PoolUtilities - HikariPool-23 - Connection.setNetworkTimeout() not supported
2015-08-19 21:45:19.225 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@3cbef087] obtained in 0 millis
2015-08-19 21:45:19.226 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[DROP TABLE IF EXISTS products] took 1 millis
2015-08-19 21:45:19.227 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@3cbef087] released
2015-08-19 21:45:19.227 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@65606921] obtained in 0 millis
2015-08-19 21:45:19.227 [HikariCP connection filler (pool HikariPool-23)] DEBUG com.zaxxer.hikari.pool.HikariPool - After fill pool stats HikariPool-23 (total=10, inUse=1, avail=9, waiting=0)
2015-08-19 21:45:19.228 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[CREATE TABLE products (id int(11) NOT NULL AUTO_INCREMENT, name varchar(20) NOT NULL DEFAULT '', vendor_id int(11) NOT NULL, price decimal(10,4) unsigned NOT NULL DEFAULT '0.0000', PRIMARY KEY (`id`) )] took 0 millis
2015-08-19 21:45:19.228 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@65606921] released
2015-08-19 21:45:19.229 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@55c24fb4] obtained in 0 millis
2015-08-19 21:45:19.229 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-08-19 21:45:19.229 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@55c24fb4] released
2015-08-19 21:45:19.229 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@11e14636] obtained in 0 millis
2015-08-19 21:45:19.230 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-08-19 21:45:19.230 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@11e14636] released
2015-08-19 21:45:19.230 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@dc3b53a] obtained in 0 millis
2015-08-19 21:45:19.230 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-08-19 21:45:19.230 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@dc3b53a] released
2015-08-19 21:45:19.230 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@5321588] obtained in 0 millis
2015-08-19 21:45:19.231 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[SELECT * FROM products] took 0 millis
2015-08-19 21:45:19.299 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - Connecting with driver org.h2.Driver to jdbc:h2:mem:test
2015-08-19 21:45:19.300 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - class org.h2.Driver
2015-08-19 21:45:19.300 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - HikariCP pool HikariPool-24 configuration:
2015-08-19 21:45:19.300 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - allowPoolSuspension.............false
2015-08-19 21:45:19.300 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - autoCommit......................true
2015-08-19 21:45:19.300 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - catalog.........................
2015-08-19 21:45:19.300 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionCustomizer............com.zaxxer.hikari.AbstractHikariConfig$1@9648f14
2015-08-19 21:45:19.300 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionCustomizerClassName...
2015-08-19 21:45:19.300 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionInitSql...............
2015-08-19 21:45:19.300 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTestQuery.............
2015-08-19 21:45:19.300 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTimeout...............30000
2015-08-19 21:45:19.300 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSource......................
2015-08-19 21:45:19.300 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceClassName.............
2015-08-19 21:45:19.301 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceJNDI..................
2015-08-19 21:45:19.301 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceProperties............{password=<masked>, dataSourceClassName=org.h2.Driver}
2015-08-19 21:45:19.301 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - driverClassName.................
2015-08-19 21:45:19.301 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckProperties...........{}
2015-08-19 21:45:19.301 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckRegistry.............
2015-08-19 21:45:19.301 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - idleTimeout.....................600000
2015-08-19 21:45:19.301 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - initializationFailFast..........true
2015-08-19 21:45:19.301 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - isolateInternalQueries..........false
2015-08-19 21:45:19.301 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbc4ConnectionTest.............false
2015-08-19 21:45:19.301 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbcUrl.........................jdbc:h2:mem:test
2015-08-19 21:45:19.301 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - leakDetectionThreshold..........0
2015-08-19 21:45:19.301 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maxLifetime.....................1800000
2015-08-19 21:45:19.301 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maximumPoolSize.................10
2015-08-19 21:45:19.301 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricRegistry..................
2015-08-19 21:45:19.301 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - minimumIdle.....................10
2015-08-19 21:45:19.301 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - password........................<masked>
2015-08-19 21:45:19.301 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - poolName........................HikariPool-24
2015-08-19 21:45:19.301 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - readOnly........................false
2015-08-19 21:45:19.301 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - registerMbeans..................false
2015-08-19 21:45:19.301 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - threadFactory...................
2015-08-19 21:45:19.301 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - transactionIsolation............
2015-08-19 21:45:19.302 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - username........................username
2015-08-19 21:45:19.302 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - validationTimeout...............5000
2015-08-19 21:45:19.302 [Test worker] INFO  com.zaxxer.hikari.HikariDataSource - HikariCP pool HikariPool-24 is starting.
2015-08-19 21:45:19.302 [Test worker] DEBUG com.zaxxer.hikari.pool.PoolUtilities - HikariPool-24 - Connection.setNetworkTimeout() not supported
2015-08-19 21:45:19.304 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@1a1fc963] obtained in 0 millis
2015-08-19 21:45:19.305 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[DROP TABLE IF EXISTS products] took 0 millis
2015-08-19 21:45:19.305 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@1a1fc963] released
2015-08-19 21:45:19.305 [HikariCP connection filler (pool HikariPool-24)] DEBUG com.zaxxer.hikari.pool.HikariPool - After fill pool stats HikariPool-24 (total=10, inUse=0, avail=10, waiting=0)
2015-08-19 21:45:19.305 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@5b7069b0] obtained in 0 millis
2015-08-19 21:45:19.306 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[CREATE TABLE products (id int(11) NOT NULL AUTO_INCREMENT, name varchar(20) NOT NULL DEFAULT '', vendor_id int(11) NOT NULL, price decimal(10,4) unsigned NOT NULL DEFAULT '0.0000', PRIMARY KEY (`id`) )] took 0 millis
2015-08-19 21:45:19.306 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@5b7069b0] released
2015-08-19 21:45:19.306 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@5a81ed8e] obtained in 0 millis
2015-08-19 21:45:19.307 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-08-19 21:45:19.307 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@5a81ed8e] released
2015-08-19 21:45:19.307 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@3a679df7] obtained in 0 millis
2015-08-19 21:45:19.307 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-08-19 21:45:19.307 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@3a679df7] released
2015-08-19 21:45:19.307 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@4cd4a0ef] obtained in 0 millis
2015-08-19 21:45:19.308 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[INSERT INTO products (name, price, vendor_id) VALUES (?, ?, ?)] took 0 millis
2015-08-19 21:45:19.308 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@4cd4a0ef] released
2015-08-19 21:45:19.308 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@4937f4eb] obtained in 0 millis
2015-08-19 21:45:19.309 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - About to parse: inline@186a09e1
2015-08-19 21:45:19.309 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Building AST
2015-08-19 21:45:19.310 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Creating templates
2015-08-19 21:45:19.311 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[SELECT * FROM products WHERE vendor_id = ? OR vendor_id = ?] took 0 millis
2015-08-19 21:45:19.313 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@4937f4eb] released
2015-08-19 21:45:19.314 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@5a3a4d39] obtained in 0 millis
2015-08-19 21:45:19.315 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - About to parse: inline@6838f77
2015-08-19 21:45:19.315 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Building AST
2015-08-19 21:45:19.315 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Creating templates
2015-08-19 21:45:19.318 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@5a3a4d39] released
2015-08-19 21:45:19.319 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - Connecting with driver org.h2.Driver to jdbc:h2:mem:test
2015-08-19 21:45:19.319 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - class org.h2.Driver
2015-08-19 21:45:19.319 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - HikariCP pool HikariPool-25 configuration:
2015-08-19 21:45:19.319 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - allowPoolSuspension.............false
2015-08-19 21:45:19.319 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - autoCommit......................true
2015-08-19 21:45:19.319 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - catalog.........................
2015-08-19 21:45:19.319 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionCustomizer............com.zaxxer.hikari.AbstractHikariConfig$1@2c5c6a39
2015-08-19 21:45:19.319 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionCustomizerClassName...
2015-08-19 21:45:19.319 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionInitSql...............
2015-08-19 21:45:19.319 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTestQuery.............
2015-08-19 21:45:19.319 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTimeout...............30000
2015-08-19 21:45:19.319 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSource......................
2015-08-19 21:45:19.319 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceClassName.............
2015-08-19 21:45:19.319 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceJNDI..................
2015-08-19 21:45:19.319 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceProperties............{password=<masked>, dataSourceClassName=org.h2.Driver}
2015-08-19 21:45:19.319 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - driverClassName.................
2015-08-19 21:45:19.319 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckProperties...........{}
2015-08-19 21:45:19.319 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckRegistry.............
2015-08-19 21:45:19.319 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - idleTimeout.....................600000
2015-08-19 21:45:19.319 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - initializationFailFast..........true
2015-08-19 21:45:19.320 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - isolateInternalQueries..........false
2015-08-19 21:45:19.320 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbc4ConnectionTest.............false
2015-08-19 21:45:19.320 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbcUrl.........................jdbc:h2:mem:test
2015-08-19 21:45:19.320 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - leakDetectionThreshold..........0
2015-08-19 21:45:19.320 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maxLifetime.....................1800000
2015-08-19 21:45:19.320 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maximumPoolSize.................10
2015-08-19 21:45:19.320 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricRegistry..................
2015-08-19 21:45:19.320 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - minimumIdle.....................10
2015-08-19 21:45:19.320 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - password........................<masked>
2015-08-19 21:45:19.320 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - poolName........................HikariPool-25
2015-08-19 21:45:19.320 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - readOnly........................false
2015-08-19 21:45:19.320 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - registerMbeans..................false
2015-08-19 21:45:19.320 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - threadFactory...................
2015-08-19 21:45:19.320 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - transactionIsolation............
2015-08-19 21:45:19.320 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - username........................username
2015-08-19 21:45:19.320 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - validationTimeout...............5000
2015-08-19 21:45:19.320 [Test worker] INFO  com.zaxxer.hikari.HikariDataSource - HikariCP pool HikariPool-25 is starting.
2015-08-19 21:45:19.320 [Test worker] DEBUG com.zaxxer.hikari.pool.PoolUtilities - HikariPool-25 - Connection.setNetworkTimeout() not supported
2015-08-19 21:45:19.322 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@52a956e7] obtained in 0 millis
2015-08-19 21:45:19.323 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - About to parse: inline@186a09e1
2015-08-19 21:45:19.323 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Building AST
2015-08-19 21:45:19.324 [HikariCP connection filler (pool HikariPool-25)] DEBUG com.zaxxer.hikari.pool.HikariPool - After fill pool stats HikariPool-25 (total=10, inUse=1, avail=9, waiting=0)
2015-08-19 21:45:19.325 [Test worker] DEBUG com.github.jknack.handlebars.internal.HbsParserFactory - Creating templates
2015-08-19 21:45:19.326 [Test worker] DEBUG org.skife.jdbi.v2 - statement:[SELECT * FROM products WHERE vendor_id = ? OR vendor_id = ?] took 0 millis
2015-08-19 21:45:19.328 [Test worker] DEBUG org.skife.jdbi.v2 - Handle [org.skife.jdbi.v2.BasicHandle@52a956e7] released
2015-08-19 21:45:19.328 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - Connecting with driver org.h2.Driver to jdbc:h2:mem:test
2015-08-19 21:45:19.328 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - class org.h2.Driver
2015-08-19 21:45:19.329 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - HikariCP pool HikariPool-26 configuration:
2015-08-19 21:45:19.329 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - allowPoolSuspension.............false
2015-08-19 21:45:19.329 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - autoCommit......................true
2015-08-19 21:45:19.329 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - catalog.........................
2015-08-19 21:45:19.329 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionCustomizer............com.zaxxer.hikari.AbstractHikariConfig$1@6c34bee8
2015-08-19 21:45:19.329 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionCustomizerClassName...
2015-08-19 21:45:19.329 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionInitSql...............
2015-08-19 21:45:19.329 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTestQuery.............
2015-08-19 21:45:19.329 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTimeout...............30000
2015-08-19 21:45:19.329 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSource......................
2015-08-19 21:45:19.329 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceClassName.............
2015-08-19 21:45:19.330 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceJNDI..................
2015-08-19 21:45:19.330 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceProperties............{password=<masked>, dataSourceClassName=org.h2.Driver}
2015-08-19 21:45:19.330 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - driverClassName.................
2015-08-19 21:45:19.330 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckProperties...........{}
2015-08-19 21:45:19.330 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckRegistry.............
2015-08-19 21:45:19.330 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - idleTimeout.....................600000
2015-08-19 21:45:19.330 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - initializationFailFast..........true
2015-08-19 21:45:19.330 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - isolateInternalQueries..........false
2015-08-19 21:45:19.330 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbc4ConnectionTest.............false
2015-08-19 21:45:19.330 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbcUrl.........................jdbc:h2:mem:test
2015-08-19 21:45:19.330 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - leakDetectionThreshold..........0
2015-08-19 21:45:19.330 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maxLifetime.....................1800000
2015-08-19 21:45:19.330 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maximumPoolSize.................10
2015-08-19 21:45:19.330 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricRegistry..................
2015-08-19 21:45:19.330 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - minimumIdle.....................10
2015-08-19 21:45:19.330 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - password........................<masked>
2015-08-19 21:45:19.330 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - poolName........................HikariPool-26
2015-08-19 21:45:19.330 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - readOnly........................false
2015-08-19 21:45:19.331 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - registerMbeans..................false
2015-08-19 21:45:19.331 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - threadFactory...................
2015-08-19 21:45:19.331 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - transactionIsolation............
2015-08-19 21:45:19.331 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - username........................username
2015-08-19 21:45:19.331 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - validationTimeout...............5000
2015-08-19 21:45:19.331 [Test worker] INFO  com.zaxxer.hikari.HikariDataSource - HikariCP pool HikariPool-26 is starting.
2015-08-19 21:45:19.331 [Test worker] DEBUG com.zaxxer.hikari.pool.PoolUtilities - HikariPool-26 - Connection.setNetworkTimeout() not supported
2015-08-19 21:45:19.333 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - Connecting with driver org.test.Driver to jdbc:h2:mem:test
2015-08-19 21:45:19.335 [HikariCP connection filler (pool HikariPool-26)] DEBUG com.zaxxer.hikari.pool.HikariPool - After fill pool stats HikariPool-26 (total=10, inUse=0, avail=10, waiting=0)
2015-08-19 21:45:19.336 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - Connecting with driver org.h2.Driver to jdbc:h2:mem:test
2015-08-19 21:45:19.336 [Test worker] DEBUG org.mrcsparker.ceeql.Ceeql - class org.h2.Driver
2015-08-19 21:45:19.338 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - HikariCP pool HikariPool-27 configuration:
2015-08-19 21:45:19.338 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - allowPoolSuspension.............false
2015-08-19 21:45:19.338 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - autoCommit......................true
2015-08-19 21:45:19.338 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - catalog.........................
2015-08-19 21:45:19.338 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionCustomizer............com.zaxxer.hikari.AbstractHikariConfig$1@38d0d4fd
2015-08-19 21:45:19.338 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionCustomizerClassName...
2015-08-19 21:45:19.338 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionInitSql...............
2015-08-19 21:45:19.338 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTestQuery.............
2015-08-19 21:45:19.339 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - connectionTimeout...............30000
2015-08-19 21:45:19.339 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSource......................
2015-08-19 21:45:19.339 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceClassName.............
2015-08-19 21:45:19.339 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceJNDI..................
2015-08-19 21:45:19.339 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceProperties............{password=<masked>, dataSourceClassName=org.h2.Driver}
2015-08-19 21:45:19.339 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - driverClassName.................
2015-08-19 21:45:19.339 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckProperties...........{}
2015-08-19 21:45:19.339 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckRegistry.............
2015-08-19 21:45:19.339 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - idleTimeout.....................600000
2015-08-19 21:45:19.339 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - initializationFailFast..........true
2015-08-19 21:45:19.339 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - isolateInternalQueries..........false
2015-08-19 21:45:19.340 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbc4ConnectionTest.............false
2015-08-19 21:45:19.340 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - jdbcUrl.........................jdbc:h2:mem:test
2015-08-19 21:45:19.340 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - leakDetectionThreshold..........0
2015-08-19 21:45:19.340 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maxLifetime.....................1800000
2015-08-19 21:45:19.340 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - maximumPoolSize.................10
2015-08-19 21:45:19.340 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - metricRegistry..................
2015-08-19 21:45:19.340 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - minimumIdle.....................10
2015-08-19 21:45:19.340 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - password........................<masked>
2015-08-19 21:45:19.340 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - poolName........................HikariPool-27
2015-08-19 21:45:19.340 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - readOnly........................false
2015-08-19 21:45:19.340 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - registerMbeans..................false
2015-08-19 21:45:19.340 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - threadFactory...................
2015-08-19 21:45:19.340 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - transactionIsolation............
2015-08-19 21:45:19.340 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - username........................username
2015-08-19 21:45:19.341 [Test worker] DEBUG com.zaxxer.hikari.HikariConfig - validationTimeout...............5000
2015-08-19 21:45:19.341 [Test worker] INFO  com.zaxxer.hikari.HikariDataSource - HikariCP pool HikariPool-27 is starting.
2015-08-19 21:45:19.342 [Test worker] DEBUG com.zaxxer.hikari.pool.PoolUtilities - HikariPool-27 - Connection.setNetworkTimeout() not supported
2015-08-19 21:45:19.345 [HikariCP connection filler (pool HikariPool-27)] DEBUG com.zaxxer.hikari.pool.HikariPool - After fill pool stats HikariPool-27 (total=10, inUse=0, avail=10, waiting=0)
